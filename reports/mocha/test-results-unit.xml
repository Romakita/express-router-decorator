<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Mocha Tests" time="3.8660" tests="1587" failures="0">
  <testsuite name="Root Suite" timestamp="2020-10-09T18:19:45" tests="0" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="AjvValidationPipe" timestamp="2020-10-09T18:19:45" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/ajv/src/pipes/AjvValidationPipe.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="With raw json schema" timestamp="2020-10-09T18:19:45" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/ajv/src/pipes/AjvValidationPipe.spec.ts" time="0.0210" failures="0">
    <testcase name="AjvValidationPipe With raw json schema should validate object" time="0.0130" classname="should validate object">
    </testcase>
    <testcase name="AjvValidationPipe With raw json schema should throw an error" time="0.0080" classname="should throw an error">
    </testcase>
  </testsuite>
  <testsuite name="With String" timestamp="2020-10-09T18:19:45" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/ajv/src/pipes/AjvValidationPipe.spec.ts" time="0.0120" failures="0">
    <testcase name="AjvValidationPipe With String should validate value" time="0.0050" classname="should validate value">
    </testcase>
    <testcase name="AjvValidationPipe With String should validate value (array)" time="0.0070" classname="should validate value (array)">
    </testcase>
  </testsuite>
  <testsuite name="With QueryParam with boolean" timestamp="2020-10-09T18:19:45" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/ajv/src/pipes/AjvValidationPipe.spec.ts" time="0.0140" failures="0">
    <testcase name="AjvValidationPipe With QueryParam with boolean should validate value" time="0.0140" classname="should validate value">
    </testcase>
  </testsuite>
  <testsuite name="With model" timestamp="2020-10-09T18:19:45" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/ajv/src/pipes/AjvValidationPipe.spec.ts" time="0.0220" failures="0">
    <testcase name="AjvValidationPipe With model should validate object" time="0.0060" classname="should validate object">
    </testcase>
    <testcase name="AjvValidationPipe With model should throw an error" time="0.0050" classname="should throw an error">
    </testcase>
    <testcase name="AjvValidationPipe With model should throw an error (deep property)" time="0.0070" classname="should throw an error (deep property)">
    </testcase>
    <testcase name="AjvValidationPipe With model should throw an error and hide password value" time="0.0040" classname="should throw an error and hide password value">
    </testcase>
  </testsuite>
  <testsuite name="With array of model" timestamp="2020-10-09T18:19:45" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/ajv/src/pipes/AjvValidationPipe.spec.ts" time="0.0160" failures="0">
    <testcase name="AjvValidationPipe With array of model should validate object" time="0.0050" classname="should validate object">
    </testcase>
    <testcase name="AjvValidationPipe With array of model should throw an error" time="0.0050" classname="should throw an error">
    </testcase>
    <testcase name="AjvValidationPipe With array of model should throw an error (deep property)" time="0.0060" classname="should throw an error (deep property)">
    </testcase>
  </testsuite>
  <testsuite name="With Map of model" timestamp="2020-10-09T18:19:46" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/ajv/src/pipes/AjvValidationPipe.spec.ts" time="0.0170" failures="0">
    <testcase name="AjvValidationPipe With Map of model should validate object" time="0.0050" classname="should validate object">
    </testcase>
    <testcase name="AjvValidationPipe With Map of model should throw an error" time="0.0050" classname="should throw an error">
    </testcase>
    <testcase name="AjvValidationPipe With Map of model should throw an error (deep property)" time="0.0070" classname="should throw an error (deep property)">
    </testcase>
  </testsuite>
  <testsuite name="With Set of model" timestamp="2020-10-09T18:19:46" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/ajv/src/pipes/AjvValidationPipe.spec.ts" time="0.0130" failures="0">
    <testcase name="AjvValidationPipe With Set of model should validate object" time="0.0040" classname="should validate object">
    </testcase>
    <testcase name="AjvValidationPipe With Set of model should throw an error" time="0.0040" classname="should throw an error">
    </testcase>
    <testcase name="AjvValidationPipe With Set of model should throw an error (deep property)" time="0.0050" classname="should throw an error (deep property)">
    </testcase>
  </testsuite>
  <testsuite name="Ajv" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/ajv/src/services/Ajv.spec.ts" time="0.0060" failures="0">
    <testcase name="Ajv should create a new Ajv instance" time="0.0060" classname="should create a new Ajv instance">
    </testcase>
  </testsuite>
  <testsuite name="PlatformConfiguration" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/config/services/PlatformConfiguration.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Test ENV" timestamp="2020-10-09T18:19:46" tests="21" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/config/services/PlatformConfiguration.spec.ts" time="0.0010" failures="0">
    <testcase name="PlatformConfiguration Test ENV should return rootDir" time="0.0000" classname="should return rootDir">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV should return rootDir" time="0.0000" classname="should return rootDir">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV should return custom keys" time="0.0000" classname="should return custom keys">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV should return env" time="0.0010" classname="should return env">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV should have logging jsonIndentaion set to 2" time="0.0000" classname="should have logging jsonIndentaion set to 2">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV should return httpsPort" time="0.0000" classname="should return httpsPort">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV should return httpPort" time="0.0000" classname="should return httpPort">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV should return httpsPort" time="0.0000" classname="should return httpsPort">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV should return httpPort" time="0.0000" classname="should return httpPort">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV should return componentsScan" time="0.0000" classname="should return componentsScan">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV should return mount" time="0.0000" classname="should return mount">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV should return httpsOptions" time="0.0000" classname="should return httpsOptions">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV should return acceptMimes" time="0.0000" classname="should return acceptMimes">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV should return statics" time="0.0000" classname="should return statics">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV should return env" time="0.0000" classname="should return env">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV should return version" time="0.0000" classname="should return version">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV should return errors" time="0.0000" classname="should return errors">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV should return routers" time="0.0000" classname="should return routers">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV should return converter settings" time="0.0000" classname="should return converter settings">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV should return controllerScope" time="0.0000" classname="should return controllerScope">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV should return excluded patterns" time="0.0000" classname="should return excluded patterns">
    </testcase>
  </testsuite>
  <testsuite name="debug" timestamp="2020-10-09T18:19:46" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/config/services/PlatformConfiguration.spec.ts" time="0.0000" failures="0">
    <testcase name="PlatformConfiguration Test ENV debug should expose debug as initialized" time="0.0000" classname="should expose debug as initialized">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV debug debug should be equal to the last set value" time="0.0000" classname="debug should be equal to the last set value">
    </testcase>
  </testsuite>
  <testsuite name="forEach()" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/config/services/PlatformConfiguration.spec.ts" time="0.0000" failures="0">
    <testcase name="PlatformConfiguration Test ENV forEach() should loop on items" time="0.0000" classname="should loop on items">
    </testcase>
  </testsuite>
  <testsuite name="buildAddressAndPort()" timestamp="2020-10-09T18:19:46" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/config/services/PlatformConfiguration.spec.ts" time="0.0000" failures="0">
    <testcase name="PlatformConfiguration Test ENV buildAddressAndPort() should return address and port from a concatened address and port" time="0.0000" classname="should return address and port from a concatened address and port">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV buildAddressAndPort() should return address and port from a port number" time="0.0000" classname="should return address and port from a port number">
    </testcase>
  </testsuite>
  <testsuite name="port" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/config/services/PlatformConfiguration.spec.ts" time="0.0000" failures="0">
    <testcase name="PlatformConfiguration Test ENV port should set port" time="0.0000" classname="should set port">
    </testcase>
  </testsuite>
  <testsuite name="resolve()" timestamp="2020-10-09T18:19:46" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/config/services/PlatformConfiguration.spec.ts" time="0.0000" failures="0">
    <testcase name="PlatformConfiguration Test ENV resolve() should replace rootDir" time="0.0000" classname="should replace rootDir">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV resolve() should preserve class" time="0.0000" classname="should preserve class">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV resolve() should replace rootDir" time="0.0000" classname="should replace rootDir">
    </testcase>
    <testcase name="PlatformConfiguration Test ENV resolve() should replace rootDir" time="0.0000" classname="should replace rootDir">
    </testcase>
  </testsuite>
  <testsuite name="Test PRODUCTION" timestamp="2020-10-09T18:19:46" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/config/services/PlatformConfiguration.spec.ts" time="0.0000" failures="0">
    <testcase name="PlatformConfiguration Test PRODUCTION should return env PROD" time="0.0000" classname="should return env PROD">
    </testcase>
    <testcase name="PlatformConfiguration Test PRODUCTION should have logging jsonIndentaion set to 0" time="0.0000" classname="should have logging jsonIndentaion set to 0">
    </testcase>
  </testsuite>
  <testsuite name="set logger format" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/config/services/PlatformConfiguration.spec.ts" time="0.0050" failures="0">
    <testcase name="PlatformConfiguration set logger format should call $log.appenders.set()" time="0.0050" classname="should call $log.appenders.set()">
    </testcase>
  </testsuite>
  <testsuite name="@AdditionalProperties" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/additionalProperties.spec.ts" time="0.0010" failures="0">
    <testcase name="@AdditionalProperties should accept additional properties" time="0.0010" classname="should accept additional properties">
    </testcase>
  </testsuite>
  <testsuite name="Any" timestamp="2020-10-09T18:19:46" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/any.spec.ts" time="0.0030" failures="0">
    <testcase name="Any should declare any prop" time="0.0010" classname="should declare any prop">
    </testcase>
    <testcase name="Any should declare any prop (uniq type)" time="0.0000" classname="should declare any prop (uniq type)">
    </testcase>
    <testcase name="Any should declare any prop (with list)" time="0.0010" classname="should declare any prop (with list)">
    </testcase>
    <testcase name="Any should declare any prop (with string, list)" time="0.0010" classname="should declare any prop (with string, list)">
    </testcase>
  </testsuite>
  <testsuite name="Const" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/const.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when const is a string" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/const.spec.ts" time="0.0010" failures="0">
    <testcase name="Const when const is a string should store data" time="0.0010" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="Default" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/default.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="value (0)" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/default.spec.ts" time="0.0010" failures="0">
    <testcase name="Default value (0) should store data" time="0.0010" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="Description" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/description.spec.ts" time="0.0000" failures="0">
    <testcase name="Description should return the right json schema" time="0.0000" classname="should return the right json schema">
    </testcase>
  </testsuite>
  <testsuite name="Email" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/email.spec.ts" time="0.0000" failures="0">
    <testcase name="Email should store data" time="0.0000" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="Enum" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/enum.spec.ts" time="0.0000" failures="0">
    <testcase name="Enum should store data" time="0.0000" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="@Example" timestamp="2020-10-09T18:19:46" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/example.spec.ts" time="0.0020" failures="0">
    <testcase name="@Example should declare description on property" time="0.0000" classname="should declare description on property">
    </testcase>
    <testcase name="@Example should declare description on property (with obj)" time="0.0010" classname="should declare description on property (with obj)">
    </testcase>
    <testcase name="@Example should declare description on property (with array)" time="0.0010" classname="should declare description on property (with array)">
    </testcase>
  </testsuite>
  <testsuite name="ExclusiveMaximum" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/exclusiveMaximum.spec.ts" time="0.0020" failures="0">
    <testcase name="ExclusiveMaximum should store data" time="0.0020" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="ExclusiveMinimum" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/exclusiveMinimum.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="without explicit parameter" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/exclusiveMinimum.spec.ts" time="0.0020" failures="0">
    <testcase name="ExclusiveMinimum without explicit parameter should store data" time="0.0020" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="Format" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/format.spec.ts" time="0.0010" failures="0">
    <testcase name="Format should store data" time="0.0010" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="@Ignore" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/ignoreProperty.spec.ts" time="0.0010" failures="0">
    <testcase name="@Ignore should declare prop" time="0.0010" classname="should declare prop">
    </testcase>
  </testsuite>
  <testsuite name="Integer" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/integer.spec.ts" time="0.0010" failures="0">
    <testcase name="Integer should store data" time="0.0010" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="Maximum" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/maximum.spec.ts" time="0.0000" failures="0">
    <testcase name="Maximum should store data" time="0.0000" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="@MaxItems" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/maxItems.spec.ts" time="0.0010" failures="0">
    <testcase name="@MaxItems should declare a prop" time="0.0010" classname="should declare a prop">
    </testcase>
  </testsuite>
  <testsuite name="MaxLength" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/maxLength.spec.ts" time="0.0000" failures="0">
    <testcase name="MaxLength should store data" time="0.0000" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="MaxProperties" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/maxProperties.spec.ts" time="0.0010" failures="0">
    <testcase name="MaxProperties should store data" time="0.0010" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="Minimum" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/minimum.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when it used without exclusive value" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/minimum.spec.ts" time="0.0010" failures="0">
    <testcase name="Minimum when it used without exclusive value should store data" time="0.0010" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="MinItems" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/minItems.spec.ts" time="0.0010" failures="0">
    <testcase name="MinItems should store data" time="0.0010" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="MinLength" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/minLength.spec.ts" time="0.0010" failures="0">
    <testcase name="MinLength should store data" time="0.0010" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="MinProperties" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/minProperties.spec.ts" time="0.0010" failures="0">
    <testcase name="MinProperties should store data" time="0.0010" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="MultipleOf" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/multipleOf.spec.ts" time="0.0010" failures="0">
    <testcase name="MultipleOf should store data" time="0.0010" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="Pattern" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/pattern.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with string pattern" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/pattern.spec.ts" time="0.0000" failures="0">
    <testcase name="Pattern with string pattern should store data" time="0.0000" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="Property()" timestamp="2020-10-09T18:19:46" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/property.spec.ts" time="0.0030" failures="0">
    <testcase name="Property() should create schema from Class" time="0.0010" classname="should create schema from Class">
    </testcase>
    <testcase name="Property() should create a schema" time="0.0020" classname="should create a schema">
    </testcase>
  </testsuite>
  <testsuite name="PropertyFn" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/property.spec.ts" time="0.0010" failures="0">
    <testcase name="PropertyFn should declare property and call returned decorator" time="0.0010" classname="should declare property and call returned decorator">
    </testcase>
  </testsuite>
  <testsuite name="@OnSerialize" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/propertyDeserialize.spec.ts" time="0.0260" failures="0">
    <testcase name="@OnSerialize should use function onDeserialize to Deserialize property" time="0.0260" classname="should use function onDeserialize to Deserialize property">
    </testcase>
  </testsuite>
  <testsuite name="@Name" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/propertyName.spec.ts" time="0.0000" failures="0">
    <testcase name="@Name should create a propertyMetadata" time="0.0000" classname="should create a propertyMetadata">
    </testcase>
  </testsuite>
  <testsuite name="@OnSerialize" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/propertySerialize.spec.ts" time="0.0010" failures="0">
    <testcase name="@OnSerialize should use function to Deserialize property" time="0.0010" classname="should use function to Deserialize property">
    </testcase>
  </testsuite>
  <testsuite name="@CollectionOf" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/propertyType.spec.ts" time="0.0010" failures="0">
    <testcase name="@CollectionOf should create a propertyMetadata" time="0.0010" classname="should create a propertyMetadata">
    </testcase>
  </testsuite>
  <testsuite name="Schema()" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/schema.spec.ts" time="0.0010" failures="0">
    <testcase name="Schema() should store data" time="0.0010" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="Title()" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/title.spec.ts" time="0.0010" failures="0">
    <testcase name="Title() should store data" time="0.0010" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="UniqueItems" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/decorators/uniqueItems.spec.ts" time="0.0010" failures="0">
    <testcase name="UniqueItems should store data" time="0.0010" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="getJsonType()" timestamp="2020-10-09T18:19:46" tests="10" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/jsonschema/utils/getJsonType.spec.ts" time="0.0010" failures="0">
    <testcase name="getJsonType() should return number" time="0.0000" classname="should return number">
    </testcase>
    <testcase name="getJsonType() should return string" time="0.0000" classname="should return string">
    </testcase>
    <testcase name="getJsonType() should return boolean" time="0.0000" classname="should return boolean">
    </testcase>
    <testcase name="getJsonType() should return array" time="0.0000" classname="should return array">
    </testcase>
    <testcase name="getJsonType() should return string when date is given" time="0.0000" classname="should return string when date is given">
    </testcase>
    <testcase name="getJsonType() should return object" time="0.0000" classname="should return object">
    </testcase>
    <testcase name="getJsonType() should return object when class is given" time="0.0010" classname="should return object when class is given">
    </testcase>
    <testcase name="getJsonType() should return [string] when an array is given" time="0.0000" classname="should return [string] when an array is given">
    </testcase>
    <testcase name="getJsonType() should return string when an string is given" time="0.0000" classname="should return string when an string is given">
    </testcase>
    <testcase name="getJsonType() should delete a schema" time="0.0000" classname="should delete a schema">
    </testcase>
  </testsuite>
  <testsuite name="Allow" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/allow.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when decorator is used as param" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/allow.spec.ts" time="0.0020" failures="0">
    <testcase name="Allow when decorator is used as param should called with the correct parameters" time="0.0020" classname="should called with the correct parameters">
    </testcase>
  </testsuite>
  <testsuite name="when decorator is used as property" timestamp="2020-10-09T18:19:46" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/allow.spec.ts" time="0.0030" failures="0">
    <testcase name="Allow when decorator is used as property should called with the correct parameters (string)" time="0.0010" classname="should called with the correct parameters (string)">
    </testcase>
    <testcase name="Allow when decorator is used as property should called with the correct parameters (class)" time="0.0020" classname="should called with the correct parameters (class)">
    </testcase>
  </testsuite>
  <testsuite name="when decorator is used in another way" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/allow.spec.ts" time="0.0010" failures="0">
    <testcase name="Allow when decorator is used in another way should called with the correct parameters" time="0.0010" classname="should called with the correct parameters">
    </testcase>
  </testsuite>
  <testsuite name="@Controller" timestamp="2020-10-09T18:19:46" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/class/controller.spec.ts" time="0.0000" failures="0">
    <testcase name="@Controller should register a controller with his path and Dependency" time="0.0000" classname="should register a controller with his path and Dependency">
    </testcase>
    <testcase name="@Controller should register a controller with customer provider options" time="0.0000" classname="should register a controller with customer provider options">
    </testcase>
  </testsuite>
  <testsuite name="Middleware" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/class/middleware.spec.ts" time="0.0000" failures="0">
    <testcase name="Middleware should use registerMiddleware" time="0.0000" classname="should use registerMiddleware">
    </testcase>
  </testsuite>
  <testsuite name="AcceptMime" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/acceptMime.spec.ts" time="0.0040" failures="0">
    <testcase name="AcceptMime should set metadata" time="0.0040" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="AuthOptions()" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/authOptions.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the decorator is use on a method" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/authOptions.spec.ts" time="0.0020" failures="0">
    <testcase name="AuthOptions() when the decorator is use on a method should add the middleware on the use stack" time="0.0020" classname="should add the middleware on the use stack">
    </testcase>
  </testsuite>
  <testsuite name="when the decorator is use on a class" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/authOptions.spec.ts" time="0.0010" failures="0">
    <testcase name="AuthOptions() when the decorator is use on a class should add the middleware on the use stack" time="0.0010" classname="should add the middleware on the use stack">
    </testcase>
  </testsuite>
  <testsuite name="when the decorator is use on a class and method" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/authOptions.spec.ts" time="0.0010" failures="0">
    <testcase name="AuthOptions() when the decorator is use on a class and method should add the middleware on the use stack" time="0.0010" classname="should add the middleware on the use stack">
    </testcase>
  </testsuite>
  <testsuite name="when the decorator is use in another way" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/authOptions.spec.ts" time="0.0000" failures="0">
    <testcase name="AuthOptions() when the decorator is use in another way should add the middleware on the use stack" time="0.0000" classname="should add the middleware on the use stack">
    </testcase>
  </testsuite>
  <testsuite name="ContentType" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/contentType.spec.ts" time="0.0000" failures="0">
    <testcase name="ContentType should create middleware" time="0.0000" classname="should create middleware">
    </testcase>
  </testsuite>
  <testsuite name="Header" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/header.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when is used as method decorator" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/header.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with one params has object" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/header.spec.ts" time="0.0010" failures="0">
    <testcase name="Header when is used as method decorator with one params has object should set Header" time="0.0010" classname="should set Header">
    </testcase>
  </testsuite>
  <testsuite name="with two params has object" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/header.spec.ts" time="0.0010" failures="0">
    <testcase name="Header when is used as method decorator with two params has object should set Header" time="0.0010" classname="should set Header">
    </testcase>
  </testsuite>
  <testsuite name="with swagger params has object" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/header.spec.ts" time="0.0010" failures="0">
    <testcase name="Header when is used as method decorator with swagger params has object should set Header" time="0.0010" classname="should set Header">
    </testcase>
  </testsuite>
  <testsuite name="Location" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/location.spec.ts" time="0.0000" failures="0">
    <testcase name="Location should create middleware" time="0.0000" classname="should create middleware">
    </testcase>
  </testsuite>
  <testsuite name="Redirect" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/redirect.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with one parameter" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/redirect.spec.ts" time="0.0010" failures="0">
    <testcase name="Redirect with one parameter should store redirect configuration" time="0.0010" classname="should store redirect configuration">
    </testcase>
  </testsuite>
  <testsuite name="with two parameter" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/redirect.spec.ts" time="0.0000" failures="0">
    <testcase name="Redirect with two parameter should store redirect configuration" time="0.0000" classname="should store redirect configuration">
    </testcase>
  </testsuite>
  <testsuite name="ReturnType" timestamp="2020-10-09T18:19:46" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/returnTypes.spec.ts" time="0.0020" failures="0">
    <testcase name="ReturnType should store metadata (when code is given)" time="0.0010" classname="should store metadata (when code is given)">
    </testcase>
    <testcase name="ReturnType should store metadata (when code is not given)" time="0.0010" classname="should store metadata (when code is not given)">
    </testcase>
  </testsuite>
  <testsuite name="Returns" timestamp="2020-10-09T18:19:46" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/returnTypes.spec.ts" time="0.0030" failures="0">
    <testcase name="Returns should store metadata" time="0.0020" classname="should store metadata">
    </testcase>
    <testcase name="Returns Legacy implementation" time="0.0010" classname="Legacy implementation">
    </testcase>
  </testsuite>
  <testsuite name="ReturnArray" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/returnTypes.spec.ts" time="0.0010" failures="0">
    <testcase name="ReturnArray should store metadata" time="0.0010" classname="should store metadata">
    </testcase>
  </testsuite>
  <testsuite name="Route decorators" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/route.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="All" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/route.spec.ts" time="0.0000" failures="0">
    <testcase name="Route decorators All should register route and middleware (1)" time="0.0000" classname="should register route and middleware (1)">
    </testcase>
  </testsuite>
  <testsuite name="Get" timestamp="2020-10-09T18:19:46" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/route.spec.ts" time="0.0010" failures="0">
    <testcase name="Route decorators Get should register route and middleware (1)" time="0.0000" classname="should register route and middleware (1)">
    </testcase>
    <testcase name="Route decorators Get should register route and middleware (2)" time="0.0010" classname="should register route and middleware (2)">
    </testcase>
  </testsuite>
  <testsuite name="Post" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/route.spec.ts" time="0.0010" failures="0">
    <testcase name="Route decorators Post should register route and middleware" time="0.0010" classname="should register route and middleware">
    </testcase>
  </testsuite>
  <testsuite name="Put" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/route.spec.ts" time="0.0010" failures="0">
    <testcase name="Route decorators Put should register route and middleware" time="0.0010" classname="should register route and middleware">
    </testcase>
  </testsuite>
  <testsuite name="Delete" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/route.spec.ts" time="0.0000" failures="0">
    <testcase name="Route decorators Delete should register route and middleware" time="0.0000" classname="should register route and middleware">
    </testcase>
  </testsuite>
  <testsuite name="Head" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/route.spec.ts" time="0.0010" failures="0">
    <testcase name="Route decorators Head should register route and middleware" time="0.0010" classname="should register route and middleware">
    </testcase>
  </testsuite>
  <testsuite name="Patch" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/route.spec.ts" time="0.0000" failures="0">
    <testcase name="Route decorators Patch should register route and middleware" time="0.0000" classname="should register route and middleware">
    </testcase>
  </testsuite>
  <testsuite name="Options" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/route.spec.ts" time="0.0010" failures="0">
    <testcase name="Route decorators Options should register route and middleware" time="0.0010" classname="should register route and middleware">
    </testcase>
  </testsuite>
  <testsuite name="Status" timestamp="2020-10-09T18:19:46" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/status.spec.ts" time="0.0070" failures="0">
    <testcase name="Status should store metadata (200)" time="0.0020" classname="should store metadata (200)">
    </testcase>
    <testcase name="Status should store metadata (204)" time="0.0010" classname="should store metadata (204)">
    </testcase>
    <testcase name="Status should store metadata (201)" time="0.0020" classname="should store metadata (201)">
    </testcase>
    <testcase name="Status should store metadata (404)" time="0.0020" classname="should store metadata (404)">
    </testcase>
  </testsuite>
  <testsuite name="Use()" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/use.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the decorator is use on a method" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/use.spec.ts" time="0.0000" failures="0">
    <testcase name="Use() when the decorator is use on a method should add the middleware on the use stack" time="0.0000" classname="should add the middleware on the use stack">
    </testcase>
  </testsuite>
  <testsuite name="when the decorator is use on a class" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/use.spec.ts" time="0.0000" failures="0">
    <testcase name="Use() when the decorator is use on a class should add the middleware on the use stack" time="0.0000" classname="should add the middleware on the use stack">
    </testcase>
  </testsuite>
  <testsuite name="when the decorator is use on a property" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/use.spec.ts" time="0.0010" failures="0">
    <testcase name="Use() when the decorator is use on a property should throw error" time="0.0010" classname="should throw error">
    </testcase>
  </testsuite>
  <testsuite name="UseAfter()" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/useAfter.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the decorator is use on a class" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/useAfter.spec.ts" time="0.0000" failures="0">
    <testcase name="UseAfter() when the decorator is use on a class should add the middleware on the use stack" time="0.0000" classname="should add the middleware on the use stack">
    </testcase>
  </testsuite>
  <testsuite name="when the decorator is use on a method" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/useAfter.spec.ts" time="0.0000" failures="0">
    <testcase name="UseAfter() when the decorator is use on a method should add the middleware on the use stack" time="0.0000" classname="should add the middleware on the use stack">
    </testcase>
  </testsuite>
  <testsuite name="when the decorator is use in another way" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/useAfter.spec.ts" time="0.0000" failures="0">
    <testcase name="UseAfter() when the decorator is use in another way should add the middleware on the use stack" time="0.0000" classname="should add the middleware on the use stack">
    </testcase>
  </testsuite>
  <testsuite name="UseAuth()" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/useAuth.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the decorator is use on a method" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/useAuth.spec.ts" time="0.0000" failures="0">
    <testcase name="UseAuth() when the decorator is use on a method should add the middleware on the use stack" time="0.0000" classname="should add the middleware on the use stack">
    </testcase>
  </testsuite>
  <testsuite name="when the decorator is use on a class" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/useAuth.spec.ts" time="0.0000" failures="0">
    <testcase name="UseAuth() when the decorator is use on a class should add the middleware on the use stack" time="0.0000" classname="should add the middleware on the use stack">
    </testcase>
  </testsuite>
  <testsuite name="when the decorator is use on a class and method" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/useAuth.spec.ts" time="0.0010" failures="0">
    <testcase name="UseAuth() when the decorator is use on a class and method should add the middleware on the use stack" time="0.0010" classname="should add the middleware on the use stack">
    </testcase>
  </testsuite>
  <testsuite name="when the decorator is use in another way" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/useAuth.spec.ts" time="0.0010" failures="0">
    <testcase name="UseAuth() when the decorator is use in another way should add the middleware on the use stack" time="0.0010" classname="should add the middleware on the use stack">
    </testcase>
  </testsuite>
  <testsuite name="UseBefore()" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/useBefore.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the decorator is use on a class" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/useBefore.spec.ts" time="0.0000" failures="0">
    <testcase name="UseBefore() when the decorator is use on a class should add the middleware on the use stack" time="0.0000" classname="should add the middleware on the use stack">
    </testcase>
  </testsuite>
  <testsuite name="when the decorator is use on a method" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/useBefore.spec.ts" time="0.0010" failures="0">
    <testcase name="UseBefore() when the decorator is use on a method should add the middleware on the use stack" time="0.0010" classname="should add the middleware on the use stack">
    </testcase>
  </testsuite>
  <testsuite name="when the decorator is use in another way" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/useBefore.spec.ts" time="0.0000" failures="0">
    <testcase name="UseBefore() when the decorator is use in another way should add the middleware on the use stack" time="0.0000" classname="should add the middleware on the use stack">
    </testcase>
  </testsuite>
  <testsuite name="UseBeforeEach()" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/useBeforeEach.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the decorator is use on a class" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/useBeforeEach.spec.ts" time="0.0010" failures="0">
    <testcase name="UseBeforeEach() when the decorator is use on a class should add the middleware on the use stack" time="0.0010" classname="should add the middleware on the use stack">
    </testcase>
  </testsuite>
  <testsuite name="when the decorator is use on a method" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/useBeforeEach.spec.ts" time="0.0000" failures="0">
    <testcase name="UseBeforeEach() when the decorator is use on a method should add the middleware on the use stack" time="0.0000" classname="should add the middleware on the use stack">
    </testcase>
  </testsuite>
  <testsuite name="when the decorator is use in another way" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/useBeforeEach.spec.ts" time="0.0010" failures="0">
    <testcase name="UseBeforeEach() when the decorator is use in another way should add the middleware on the use stack" time="0.0010" classname="should add the middleware on the use stack">
    </testcase>
  </testsuite>
  <testsuite name="ResponseView" timestamp="2020-10-09T18:19:46" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/method/view.spec.ts" time="0.0000" failures="0">
    <testcase name="ResponseView should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
    <testcase name="ResponseView should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="@BodyParams" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/params/bodyParams.spec.ts" time="0.0000" failures="0">
    <testcase name="@BodyParams should call useParam method with the correct parameters" time="0.0000" classname="should call useParam method with the correct parameters">
    </testcase>
  </testsuite>
  <testsuite name="@Cookies" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/params/cookies.spec.ts" time="0.0010" failures="0">
    <testcase name="@Cookies should call ParamFilter.useParam method with the correct parameters" time="0.0010" classname="should call ParamFilter.useParam method with the correct parameters">
    </testcase>
  </testsuite>
  <testsuite name="@EndpointInfo" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/params/endpointInfo.spec.ts" time="0.0010" failures="0">
    <testcase name="@EndpointInfo should register a new ParamMetadata instance with the correct property" time="0.0010" classname="should register a new ParamMetadata instance with the correct property">
    </testcase>
  </testsuite>
  <testsuite name="@Err" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/params/error.spec.ts" time="0.0000" failures="0">
    <testcase name="@Err should register a new ParamMetadata instance with the correct property" time="0.0000" classname="should register a new ParamMetadata instance with the correct property">
    </testcase>
  </testsuite>
  <testsuite name="@HeaderParams" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/params/headerParams.spec.ts" time="0.0010" failures="0">
    <testcase name="@HeaderParams should call ParamFilter.useParam method with the correct parameters" time="0.0010" classname="should call ParamFilter.useParam method with the correct parameters">
    </testcase>
  </testsuite>
  <testsuite name="@Locals" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/params/locals.spec.ts" time="0.0000" failures="0">
    <testcase name="@Locals should call ParamFilter.useParam method with the correct parameters" time="0.0000" classname="should call ParamFilter.useParam method with the correct parameters">
    </testcase>
  </testsuite>
  <testsuite name="@Next" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/params/next.spec.ts" time="0.0010" failures="0">
    <testcase name="@Next should register a new ParamMetadata instance with the correct property" time="0.0010" classname="should register a new ParamMetadata instance with the correct property">
    </testcase>
  </testsuite>
  <testsuite name="@PathParams" timestamp="2020-10-09T18:19:46" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/params/pathParams.spec.ts" time="0.0010" failures="0">
    <testcase name="@PathParams should call ParamFilter.useParam method with the correct parameters" time="0.0000" classname="should call ParamFilter.useParam method with the correct parameters">
    </testcase>
    <testcase name="@PathParams should call ParamFilter.useParam method with the correct parameters (raw)" time="0.0010" classname="should call ParamFilter.useParam method with the correct parameters (raw)">
    </testcase>
  </testsuite>
  <testsuite name="@QueryParams" timestamp="2020-10-09T18:19:46" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/params/queryParams.spec.ts" time="0.0000" failures="0">
    <testcase name="@QueryParams should call ParamFilter.useParam method with the correct parameters" time="0.0000" classname="should call ParamFilter.useParam method with the correct parameters">
    </testcase>
    <testcase name="@QueryParams should call ParamFilter.useParam method with the correct parameters (rawQueryParams)" time="0.0000" classname="should call ParamFilter.useParam method with the correct parameters (rawQueryParams)">
    </testcase>
  </testsuite>
  <testsuite name="@Req" timestamp="2020-10-09T18:19:46" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/params/request.spec.ts" time="0.0000" failures="0">
    <testcase name="@Req should register a new ParamMetadata instance with the correct property (RawRequest)" time="0.0000" classname="should register a new ParamMetadata instance with the correct property (RawRequest)">
    </testcase>
    <testcase name="@Req should register a new ParamMetadata instance with the correct property (PlatformRequest)" time="0.0000" classname="should register a new ParamMetadata instance with the correct property (PlatformRequest)">
    </testcase>
    <testcase name="@Req should register a new ParamMetadata instance with the correct property (IncomingMessage)" time="0.0000" classname="should register a new ParamMetadata instance with the correct property (IncomingMessage)">
    </testcase>
  </testsuite>
  <testsuite name="@Res" timestamp="2020-10-09T18:19:46" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/params/response.spec.ts" time="0.0000" failures="0">
    <testcase name="@Res should register a new ParamMetadata instance with the correct property (RawRes)" time="0.0000" classname="should register a new ParamMetadata instance with the correct property (RawRes)">
    </testcase>
    <testcase name="@Res should register a new ParamMetadata instance with the correct property (PlatformResponse)" time="0.0000" classname="should register a new ParamMetadata instance with the correct property (PlatformResponse)">
    </testcase>
    <testcase name="@Res should register a new ParamMetadata instance with the correct property (ServerResponse)" time="0.0000" classname="should register a new ParamMetadata instance with the correct property (ServerResponse)">
    </testcase>
  </testsuite>
  <testsuite name="@ResponseData" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/params/responseData.spec.ts" time="0.0000" failures="0">
    <testcase name="@ResponseData should register a new ParamMetadata instance with the correct property" time="0.0000" classname="should register a new ParamMetadata instance with the correct property">
    </testcase>
  </testsuite>
  <testsuite name="@Session" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/params/session.spec.ts" time="0.0010" failures="0">
    <testcase name="@Session should call ParamFilter.useParam method with the correct parameters" time="0.0010" classname="should call ParamFilter.useParam method with the correct parameters">
    </testcase>
  </testsuite>
  <testsuite name="@UseParam" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/params/useParam.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when use a param" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/params/useParam.spec.ts" time="0.0000" failures="0">
    <testcase name="@UseParam when use a param should create useParam" time="0.0000" classname="should create useParam">
    </testcase>
  </testsuite>
  <testsuite name="when is a Query param with boolean" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/params/useParam.spec.ts" time="0.0020" failures="0">
    <testcase name="@UseParam when is a Query param with boolean should return the right spec" time="0.0020" classname="should return the right spec">
    </testcase>
  </testsuite>
  <testsuite name="Required" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/required.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when decorator is used as param" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/required.spec.ts" time="0.0010" failures="0">
    <testcase name="Required when decorator is used as param should called with the correct parameters" time="0.0010" classname="should called with the correct parameters">
    </testcase>
  </testsuite>
  <testsuite name="when decorator is used as property" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/required.spec.ts" time="0.0010" failures="0">
    <testcase name="Required when decorator is used as property should called with the correct parameters" time="0.0010" classname="should called with the correct parameters">
    </testcase>
  </testsuite>
  <testsuite name="when decorator is used in another way" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/decorators/required.spec.ts" time="0.0000" failures="0">
    <testcase name="Required when decorator is used in another way should called with the correct parameters" time="0.0000" classname="should called with the correct parameters">
    </testcase>
  </testsuite>
  <testsuite name="RequiredValidationError" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/errors/RequiredValidationError.spec.ts" time="0.0010" failures="0">
    <testcase name="RequiredValidationError should have a message" time="0.0010" classname="should have a message">
    </testcase>
  </testsuite>
  <testsuite name="ValidationError" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/errors/ValidationError.spec.ts" time="0.0000" failures="0">
    <testcase name="ValidationError should return error" time="0.0000" classname="should return error">
    </testcase>
  </testsuite>
  <testsuite name="AcceptMimesMiddleware" timestamp="2020-10-09T18:19:46" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/middlewares/AcceptMimesMiddleware.spec.ts" time="0.0040" failures="0">
    <testcase name="AcceptMimesMiddleware should accept type" time="0.0020" classname="should accept type">
    </testcase>
    <testcase name="AcceptMimesMiddleware should refuse type" time="0.0020" classname="should refuse type">
    </testcase>
  </testsuite>
  <testsuite name="EndpointMetadata" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/EndpointMetadata.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="view" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/EndpointMetadata.spec.ts" time="0.0010" failures="0">
    <testcase name="EndpointMetadata view should return view value" time="0.0010" classname="should return view value">
    </testcase>
  </testsuite>
  <testsuite name="redirect" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/EndpointMetadata.spec.ts" time="0.0010" failures="0">
    <testcase name="EndpointMetadata redirect should return redirect value" time="0.0010" classname="should return redirect value">
    </testcase>
  </testsuite>
  <testsuite name="location" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/EndpointMetadata.spec.ts" time="0.0000" failures="0">
    <testcase name="EndpointMetadata location should return location value" time="0.0000" classname="should return location value">
    </testcase>
  </testsuite>
  <testsuite name="endpoint declaration" timestamp="2020-10-09T18:19:46" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/EndpointMetadata.spec.ts" time="0.0030" failures="0">
    <testcase name="EndpointMetadata endpoint declaration should return an endpoint metadata" time="0.0020" classname="should return an endpoint metadata">
    </testcase>
    <testcase name="EndpointMetadata endpoint declaration should add endpoint with path" time="0.0000" classname="should add endpoint with path">
    </testcase>
    <testcase name="EndpointMetadata endpoint declaration should add endpoint with path and method" time="0.0010" classname="should add endpoint with path and method">
    </testcase>
  </testsuite>
  <testsuite name="get()" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/EndpointMetadata.spec.ts" time="0.0000" failures="0">
    <testcase name="EndpointMetadata get() should return the endpoint metadata" time="0.0000" classname="should return the endpoint metadata">
    </testcase>
  </testsuite>
  <testsuite name="clone()" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/EndpointMetadata.spec.ts" time="0.0000" failures="0">
    <testcase name="EndpointMetadata clone() should return the endpoint metadata" time="0.0000" classname="should return the endpoint metadata">
    </testcase>
  </testsuite>
  <testsuite name="getEndpoints()" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/EndpointMetadata.spec.ts" time="0.0010" failures="0">
    <testcase name="EndpointMetadata getEndpoints() should return endpoints" time="0.0010" classname="should return endpoints">
    </testcase>
  </testsuite>
  <testsuite name="JsonEntityStore with EndpointMetadata" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/EndpointMetadata.spec.ts" time="0.0030" failures="0">
    <testcase name="JsonEntityStore with EndpointMetadata should create JsonEntityStore" time="0.0030" classname="should create JsonEntityStore">
    </testcase>
  </testsuite>
  <testsuite name="HandlerMetadata" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/HandlerMetadata.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="from useCtxHandler" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/HandlerMetadata.spec.ts" time="0.0000" failures="0">
    <testcase name="HandlerMetadata from useCtxHandler should create a new handlerMetadata with right metadata" time="0.0000" classname="should create a new handlerMetadata with right metadata">
    </testcase>
  </testsuite>
  <testsuite name="from function" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/HandlerMetadata.spec.ts" time="0.0000" failures="0">
    <testcase name="HandlerMetadata from function should create a new handlerMetadata with right metadata" time="0.0000" classname="should create a new handlerMetadata with right metadata">
    </testcase>
  </testsuite>
  <testsuite name="from function err" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/HandlerMetadata.spec.ts" time="0.0010" failures="0">
    <testcase name="HandlerMetadata from function err should create a new handlerMetadata with right metadata" time="0.0010" classname="should create a new handlerMetadata with right metadata">
    </testcase>
  </testsuite>
  <testsuite name="from function without nextFn" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/HandlerMetadata.spec.ts" time="0.0000" failures="0">
    <testcase name="HandlerMetadata from function without nextFn should create a new handlerMetadata with right metadata" time="0.0000" classname="should create a new handlerMetadata with right metadata">
    </testcase>
  </testsuite>
  <testsuite name="from endpoint/middleware without injection" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/HandlerMetadata.spec.ts" time="0.0010" failures="0">
    <testcase name="HandlerMetadata from endpoint/middleware without injection should create a new handlerMetadata with right metadata" time="0.0010" classname="should create a new handlerMetadata with right metadata">
    </testcase>
  </testsuite>
  <testsuite name="from endpoint/middleware with injection" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/HandlerMetadata.spec.ts" time="0.0000" failures="0">
    <testcase name="HandlerMetadata from endpoint/middleware with injection should create a new handlerMetadata with right metadata" time="0.0000" classname="should create a new handlerMetadata with right metadata">
    </testcase>
  </testsuite>
  <testsuite name="from middleware without injection and error" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/HandlerMetadata.spec.ts" time="0.0000" failures="0">
    <testcase name="HandlerMetadata from middleware without injection and error should create a new handlerMetadata with right metadata" time="0.0000" classname="should create a new handlerMetadata with right metadata">
    </testcase>
  </testsuite>
  <testsuite name="from middleware with injection and error" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/HandlerMetadata.spec.ts" time="0.0000" failures="0">
    <testcase name="HandlerMetadata from middleware with injection and error should create a new handlerMetadata with right metadata" time="0.0000" classname="should create a new handlerMetadata with right metadata">
    </testcase>
  </testsuite>
  <testsuite name="ParamMetadata" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/ParamMetadata.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="props" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/ParamMetadata.spec.ts" time="0.0000" failures="0">
    <testcase name="ParamMetadata props should return the required value" time="0.0000" classname="should return the required value">
    </testcase>
  </testsuite>
  <testsuite name="as a service" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/ParamMetadata.spec.ts" time="0.0010" failures="0">
    <testcase name="ParamMetadata as a service should return the service" time="0.0010" classname="should return the service">
    </testcase>
  </testsuite>
  <testsuite name="getParams" timestamp="2020-10-09T18:19:46" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/ParamMetadata.spec.ts" time="0.0020" failures="0">
    <testcase name="ParamMetadata getParams should returns params (REQ)" time="0.0000" classname="should returns params (REQ)">
    </testcase>
    <testcase name="ParamMetadata getParams should returns params (RES)" time="0.0010" classname="should returns params (RES)">
    </testcase>
    <testcase name="ParamMetadata getParams should returns params from inherited" time="0.0010" classname="should returns params from inherited">
    </testcase>
  </testsuite>
  <testsuite name="PropertyMetadata" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/PropertyMetadata.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="required() and allowRequiredValues" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/PropertyMetadata.spec.ts" time="0.0010" failures="0">
    <testcase name="PropertyMetadata required() and allowRequiredValues should return the required value" time="0.0010" classname="should return the required value">
    </testcase>
  </testsuite>
  <testsuite name="isRequired" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/PropertyMetadata.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when property is required" timestamp="2020-10-09T18:19:46" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/PropertyMetadata.spec.ts" time="0.0010" failures="0">
    <testcase name="PropertyMetadata isRequired when property is required should return false (value 0)" time="0.0000" classname="should return false (value 0)">
    </testcase>
    <testcase name="PropertyMetadata isRequired when property is required should return true (value &apos;&apos;)" time="0.0000" classname="should return true (value &apos;&apos;)">
    </testcase>
    <testcase name="PropertyMetadata isRequired when property is required should return true (value null)" time="0.0010" classname="should return true (value null)">
    </testcase>
    <testcase name="PropertyMetadata isRequired when property is required should return true (value undefined)" time="0.0000" classname="should return true (value undefined)">
    </testcase>
  </testsuite>
  <testsuite name="when property is required and have allowed values" timestamp="2020-10-09T18:19:46" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/PropertyMetadata.spec.ts" time="0.0030" failures="0">
    <testcase name="PropertyMetadata isRequired when property is required and have allowed values should validate the required values" time="0.0010" classname="should validate the required values">
    </testcase>
    <testcase name="PropertyMetadata isRequired when property is required and have allowed values should validate the required values (2)" time="0.0010" classname="should validate the required values (2)">
    </testcase>
    <testcase name="PropertyMetadata isRequired when property is required and have allowed values should validate the required values (3)" time="0.0010" classname="should validate the required values (3)">
    </testcase>
  </testsuite>
  <testsuite name="when property is not required" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/PropertyMetadata.spec.ts" time="0.0000" failures="0">
    <testcase name="PropertyMetadata isRequired when property is not required should validate values" time="0.0000" classname="should validate values">
    </testcase>
  </testsuite>
  <testsuite name="get()" timestamp="2020-10-09T18:19:46" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/PropertyMetadata.spec.ts" time="0.0000" failures="0">
    <testcase name="PropertyMetadata get() should return the propertyMetadata" time="0.0000" classname="should return the propertyMetadata">
    </testcase>
  </testsuite>
  <testsuite name="getProperties()" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/PropertyMetadata.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when is the Children class" timestamp="2020-10-09T18:19:46" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/PropertyMetadata.spec.ts" time="0.0000" failures="0">
    <testcase name="PropertyMetadata getProperties() when is the Children class should have a property id metadata from Children class" time="0.0000" classname="should have a property id metadata from Children class">
    </testcase>
    <testcase name="PropertyMetadata getProperties() when is the Children class should have a property name metadata from Parent class" time="0.0000" classname="should have a property name metadata from Parent class">
    </testcase>
    <testcase name="PropertyMetadata getProperties() when is the Children class should have a property test metadata from Parent class" time="0.0000" classname="should have a property test metadata from Parent class">
    </testcase>
    <testcase name="PropertyMetadata getProperties() when is the Children class should not have a property categoryId metadata from Parent class" time="0.0000" classname="should not have a property categoryId metadata from Parent class">
    </testcase>
  </testsuite>
  <testsuite name="when is the Children2 class" timestamp="2020-10-09T18:19:46" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/PropertyMetadata.spec.ts" time="0.0000" failures="0">
    <testcase name="PropertyMetadata getProperties() when is the Children2 class should have a property id metadata from Children class" time="0.0000" classname="should have a property id metadata from Children class">
    </testcase>
    <testcase name="PropertyMetadata getProperties() when is the Children2 class should have a property name metadata from Parent class" time="0.0000" classname="should have a property name metadata from Parent class">
    </testcase>
    <testcase name="PropertyMetadata getProperties() when is the Children2 class should have a property test metadata from Parent class" time="0.0000" classname="should have a property test metadata from Parent class">
    </testcase>
    <testcase name="PropertyMetadata getProperties() when is the Children2 class should have a property categoryId metadata from Parent class" time="0.0000" classname="should have a property categoryId metadata from Parent class">
    </testcase>
  </testsuite>
  <testsuite name="when is the Parent class" timestamp="2020-10-09T18:19:46" tests="5" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/models/PropertyMetadata.spec.ts" time="0.0010" failures="0">
    <testcase name="PropertyMetadata getProperties() when is the Parent class should have a property name metadata from Parent class" time="0.0000" classname="should have a property name metadata from Parent class">
    </testcase>
    <testcase name="PropertyMetadata getProperties() when is the Parent class should have a property id metadata from Children class" time="0.0000" classname="should have a property id metadata from Children class">
    </testcase>
    <testcase name="PropertyMetadata getProperties() when is the Parent class should have a property name metadata from Parent class" time="0.0000" classname="should have a property name metadata from Parent class">
    </testcase>
    <testcase name="PropertyMetadata getProperties() when is the Parent class should not have a property _id metadata from Parent class (because ignoreProperty is used)" time="0.0010" classname="should not have a property _id metadata from Parent class (because ignoreProperty is used)">
    </testcase>
    <testcase name="PropertyMetadata getProperties() when is the Parent class should not have a property categoryId metadata from Parent class" time="0.0000" classname="should not have a property categoryId metadata from Parent class">
    </testcase>
  </testsuite>
  <testsuite name="DeserializerPipe" timestamp="2020-10-09T18:19:46" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/pipes/DeserializerPipe.spec.ts" time="0.0440" failures="0">
    <testcase name="DeserializerPipe should transform an object to a model" time="0.0220" classname="should transform an object to a model">
    </testcase>
    <testcase name="DeserializerPipe should transform an object to a model (Query)" time="0.0220" classname="should transform an object to a model (Query)">
    </testcase>
  </testsuite>
  <testsuite name="ParseExpressionPipe" timestamp="2020-10-09T18:19:46" tests="7" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/pipes/ParseExpressionPipe.spec.ts" time="0.1440" failures="0">
    <testcase name="ParseExpressionPipe should parse expression" time="0.0270" classname="should parse expression">
    </testcase>
    <testcase name="ParseExpressionPipe should return empty value" time="0.0190" classname="should return empty value">
    </testcase>
    <testcase name="ParseExpressionPipe should parse expression (for HEADER)" time="0.0250" classname="should parse expression (for HEADER)">
    </testcase>
    <testcase name="ParseExpressionPipe should return undefined when value is empty and Boolean (for QUERY)" time="0.0250" classname="should return undefined when value is empty and Boolean (for QUERY)">
    </testcase>
    <testcase name="ParseExpressionPipe should return empty when value is empty and String (for QUERY)" time="0.0170" classname="should return empty when value is empty and String (for QUERY)">
    </testcase>
    <testcase name="ParseExpressionPipe should return undefined when value is empty and Boolean (for PATH)" time="0.0160" classname="should return undefined when value is empty and Boolean (for PATH)">
    </testcase>
    <testcase name="ParseExpressionPipe should return empty when value is empty and String (for PATH)" time="0.0150" classname="should return empty when value is empty and String (for PATH)">
    </testcase>
  </testsuite>
  <testsuite name="ValidationPipe" timestamp="2020-10-09T18:19:46" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/pipes/ValidationPipe.spec.ts" time="0.0040" failures="0">
    <testcase name="ValidationPipe should return value (Body)" time="0.0020" classname="should return value (Body)">
    </testcase>
    <testcase name="ValidationPipe should return value (Query required)" time="0.0010" classname="should return value (Query required)">
    </testcase>
    <testcase name="ValidationPipe should throw an error (Query required)" time="0.0010" classname="should throw an error (Query required)">
    </testcase>
  </testsuite>
  <testsuite name="ConverterService" timestamp="2020-10-09T18:19:46" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/services/ConverterService.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="deserialize()" timestamp="2020-10-09T18:19:46" tests="6" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/services/ConverterService.spec.ts" time="0.0060" failures="0">
    <testcase name="ConverterService deserialize() should deserialize Foo model" time="0.0010" classname="should deserialize Foo model">
    </testcase>
    <testcase name="ConverterService deserialize() should deserialize Map, Array and Set" time="0.0020" classname="should deserialize Map, Array and Set">
    </testcase>
    <testcase name="ConverterService deserialize() should emit a BadRequest when the number parsing failed" time="0.0000" classname="should emit a BadRequest when the number parsing failed">
    </testcase>
    <testcase name="ConverterService deserialize() should convert model with model annotation" time="0.0010" classname="should convert model with model annotation">
    </testcase>
    <testcase name="ConverterService deserialize() should convert model with model annotation (legacy signature)" time="0.0010" classname="should convert model with model annotation (legacy signature)">
    </testcase>
    <testcase name="ConverterService deserialize() should convert object" time="0.0010" classname="should convert object">
    </testcase>
  </testsuite>
  <testsuite name="primitive" timestamp="2020-10-09T18:19:46" tests="12" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/services/ConverterService.spec.ts" time="0.0040" failures="0">
    <testcase name="ConverterService deserialize() primitive should convert boolean to Boolean" time="0.0000" classname="should convert boolean to Boolean">
    </testcase>
    <testcase name="ConverterService deserialize() primitive should convert boolean string to Boolean" time="0.0010" classname="should convert boolean string to Boolean">
    </testcase>
    <testcase name="ConverterService deserialize() primitive should convert empty string to Boolean" time="0.0000" classname="should convert empty string to Boolean">
    </testcase>
    <testcase name="ConverterService deserialize() primitive should convert string to Boolean" time="0.0010" classname="should convert string to Boolean">
    </testcase>
    <testcase name="ConverterService deserialize() primitive should convert number to Boolean" time="0.0000" classname="should convert number to Boolean">
    </testcase>
    <testcase name="ConverterService deserialize() primitive should convert null to Boolean" time="0.0000" classname="should convert null to Boolean">
    </testcase>
    <testcase name="ConverterService deserialize() primitive should convert undefined to Boolean" time="0.0000" classname="should convert undefined to Boolean">
    </testcase>
    <testcase name="ConverterService deserialize() primitive should convert a string to Number" time="0.0000" classname="should convert a string to Number">
    </testcase>
    <testcase name="ConverterService deserialize() primitive should convert number to Number" time="0.0000" classname="should convert number to Number">
    </testcase>
    <testcase name="ConverterService deserialize() primitive should convert a string to String" time="0.0010" classname="should convert a string to String">
    </testcase>
    <testcase name="ConverterService deserialize() primitive should convert number to String" time="0.0010" classname="should convert number to String">
    </testcase>
    <testcase name="ConverterService deserialize() primitive should convert a null/undefined to null/undefined" time="0.0000" classname="should convert a null/undefined to null/undefined">
    </testcase>
  </testsuite>
  <testsuite name="object" timestamp="2020-10-09T18:19:47" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/services/ConverterService.spec.ts" time="0.0010" failures="0">
    <testcase name="ConverterService deserialize() object should convert object" time="0.0000" classname="should convert object">
    </testcase>
    <testcase name="ConverterService deserialize() object should convert a date" time="0.0010" classname="should convert a date">
    </testcase>
  </testsuite>
  <testsuite name="serialize()" timestamp="2020-10-09T18:19:47" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/services/ConverterService.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="primitive" timestamp="2020-10-09T18:19:47" tests="5" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/services/ConverterService.spec.ts" time="0.0000" failures="0">
    <testcase name="ConverterService serialize() primitive should convert empty string to string" time="0.0000" classname="should convert empty string to string">
    </testcase>
    <testcase name="ConverterService serialize() primitive should convert undefined to undefined" time="0.0000" classname="should convert undefined to undefined">
    </testcase>
    <testcase name="ConverterService serialize() primitive should convert boolean to a boolean" time="0.0000" classname="should convert boolean to a boolean">
    </testcase>
    <testcase name="ConverterService serialize() primitive should convert number to a number" time="0.0000" classname="should convert number to a number">
    </testcase>
    <testcase name="ConverterService serialize() primitive should convert string to a string" time="0.0000" classname="should convert string to a string">
    </testcase>
  </testsuite>
  <testsuite name="object" timestamp="2020-10-09T18:19:47" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/services/ConverterService.spec.ts" time="0.0010" failures="0">
    <testcase name="ConverterService serialize() object should convert object to an object" time="0.0010" classname="should convert object to an object">
    </testcase>
    <testcase name="ConverterService serialize() object should convert date to a string" time="0.0000" classname="should convert date to a string">
    </testcase>
  </testsuite>
  <testsuite name="array" timestamp="2020-10-09T18:19:47" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/services/ConverterService.spec.ts" time="0.0000" failures="0">
    <testcase name="ConverterService serialize() array should convert array to an array (1)" time="0.0000" classname="should convert array to an array (1)">
    </testcase>
    <testcase name="ConverterService serialize() array should convert array to an array (2)" time="0.0000" classname="should convert array to an array (2)">
    </testcase>
    <testcase name="ConverterService serialize() array should convert array to an array (3)" time="0.0000" classname="should convert array to an array (3)">
    </testcase>
  </testsuite>
  <testsuite name="class Foo2" timestamp="2020-10-09T18:19:47" tests="9" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/services/ConverterService.spec.ts" time="0.0010" failures="0">
    <testcase name="ConverterService serialize() class Foo2 should have an attribut with date type" time="0.0010" classname="should have an attribut with date type">
    </testcase>
    <testcase name="ConverterService serialize() class Foo2 should have an attribut Name (because metadata said Name instead of name)" time="0.0000" classname="should have an attribut Name (because metadata said Name instead of name)">
    </testcase>
    <testcase name="ConverterService serialize() class Foo2 should haven&apos;t an attribut name (because metadata said Name instead of name)" time="0.0000" classname="should haven&apos;t an attribut name (because metadata said Name instead of name)">
    </testcase>
    <testcase name="ConverterService serialize() class Foo2 should have an attribut with array type" time="0.0000" classname="should have an attribut with array type">
    </testcase>
    <testcase name="ConverterService serialize() class Foo2 should have an attribut with array type and an item serialized" time="0.0000" classname="should have an attribut with array type and an item serialized">
    </testcase>
    <testcase name="ConverterService serialize() class Foo2 should have an attribut with Map type" time="0.0000" classname="should have an attribut with Map type">
    </testcase>
    <testcase name="ConverterService serialize() class Foo2 should have an attribut with Map type and an item serialized" time="0.0000" classname="should have an attribut with Map type and an item serialized">
    </testcase>
    <testcase name="ConverterService serialize() class Foo2 should have an attribut with Set type" time="0.0000" classname="should have an attribut with Set type">
    </testcase>
    <testcase name="ConverterService serialize() class Foo2 should have an attribut with Set type and an item serialized" time="0.0000" classname="should have an attribut with Set type and an item serialized">
    </testcase>
  </testsuite>
  <testsuite name="class Foo3" timestamp="2020-10-09T18:19:47" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/services/ConverterService.spec.ts" time="0.0000" failures="0">
    <testcase name="ConverterService serialize() class Foo3 should use toJSON method" time="0.0000" classname="should use toJSON method">
    </testcase>
  </testsuite>
  <testsuite name="serializeClass()" timestamp="2020-10-09T18:19:47" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/services/ConverterService.spec.ts" time="0.0000" failures="0">
    <testcase name="ConverterService serializeClass() should transform class" time="0.0000" classname="should transform class">
    </testcase>
  </testsuite>
  <testsuite name="mapAllowedRequiredValues" timestamp="2020-10-09T18:19:47" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/utils/mapAllowedRequiredValues.spec.ts" time="0.0000" failures="0">
    <testcase name="mapAllowedRequiredValues should return allowedRequiredValues" time="0.0000" classname="should return allowedRequiredValues">
    </testcase>
  </testsuite>
  <testsuite name="mapParamsOptions" timestamp="2020-10-09T18:19:47" tests="5" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/utils/mapParamsOptions.spec.ts" time="0.0000" failures="0">
    <testcase name="mapParamsOptions should return default params when params is empty" time="0.0000" classname="should return default params when params is empty">
    </testcase>
    <testcase name="mapParamsOptions should return default params when params have an expression" time="0.0000" classname="should return default params when params have an expression">
    </testcase>
    <testcase name="mapParamsOptions should return default params when params have an expression and usetype" time="0.0000" classname="should return default params when params have an expression and usetype">
    </testcase>
    <testcase name="mapParamsOptions should return default params when params have an useType" time="0.0000" classname="should return default params when params have an useType">
    </testcase>
    <testcase name="mapParamsOptions should return default params when params have an object" time="0.0000" classname="should return default params when params have an object">
    </testcase>
  </testsuite>
  <testsuite name="mapReturnedResponse" timestamp="2020-10-09T18:19:47" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/mvc/utils/mapReturnedResponse.spec.ts" time="0.0010" failures="0">
    <testcase name="mapReturnedResponse should map the response (1)" time="0.0010" classname="should map the response (1)">
    </testcase>
    <testcase name="mapReturnedResponse should map the response (2)" time="0.0000" classname="should map the response (2)">
    </testcase>
  </testsuite>
  <testsuite name="PlatformBuilder" timestamp="2020-10-09T18:19:47" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-builder/builder/PlatformBuilder.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="bootstrap()" timestamp="2020-10-09T18:19:47" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-builder/builder/PlatformBuilder.spec.ts" time="0.0350" failures="0">
    <testcase name="PlatformBuilder bootstrap() should bootstrap platform" time="0.0350" classname="should bootstrap platform">
    </testcase>
  </testsuite>
  <testsuite name="addComponents" timestamp="2020-10-09T18:19:47" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-builder/builder/PlatformBuilder.spec.ts" time="0.0240" failures="0">
    <testcase name="PlatformBuilder addComponents should add components" time="0.0240" classname="should add components">
    </testcase>
  </testsuite>
  <testsuite name="addControllers" timestamp="2020-10-09T18:19:47" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-builder/builder/PlatformBuilder.spec.ts" time="0.0240" failures="0">
    <testcase name="PlatformBuilder addControllers should add controllers" time="0.0240" classname="should add controllers">
    </testcase>
  </testsuite>
  <testsuite name="HttpServer" timestamp="2020-10-09T18:19:47" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-builder/decorators/httpServer.spec.ts" time="0.0010" failures="0">
    <testcase name="HttpServer should inject HttpServer" time="0.0010" classname="should inject HttpServer">
    </testcase>
  </testsuite>
  <testsuite name="HttpServer" timestamp="2020-10-09T18:19:47" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-builder/decorators/httpsServer.spec.ts" time="0.0000" failures="0">
    <testcase name="HttpServer should inject HttpServer" time="0.0000" classname="should inject HttpServer">
    </testcase>
  </testsuite>
  <testsuite name="cleanGlobPatterns()" timestamp="2020-10-09T18:19:47" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-builder/utils/cleanGlobPatterns.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when haven&apos;t typescript compiler" timestamp="2020-10-09T18:19:47" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-builder/utils/cleanGlobPatterns.spec.ts" time="0.0010" failures="0">
    <testcase name="cleanGlobPatterns() when haven&apos;t typescript compiler should return file.js" time="0.0010" classname="should return file.js">
    </testcase>
    <testcase name="cleanGlobPatterns() when haven&apos;t typescript compiler should return file.ts.js and manipulate only the file extension" time="0.0000" classname="should return file.ts.js and manipulate only the file extension">
    </testcase>
  </testsuite>
  <testsuite name="when using ts-jest" timestamp="2020-10-09T18:19:47" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-builder/utils/cleanGlobPatterns.spec.ts" time="0.0000" failures="0">
    <testcase name="cleanGlobPatterns() when haven&apos;t typescript compiler when using ts-jest should return file.ts" time="0.0000" classname="should return file.ts">
    </testcase>
    <testcase name="cleanGlobPatterns() when haven&apos;t typescript compiler when using ts-jest should return file.js" time="0.0000" classname="should return file.js">
    </testcase>
  </testsuite>
  <testsuite name="when have typescript compiler" timestamp="2020-10-09T18:19:47" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-builder/utils/cleanGlobPatterns.spec.ts" time="0.0000" failures="0">
    <testcase name="cleanGlobPatterns() when have typescript compiler should return file.ts" time="0.0000" classname="should return file.ts">
    </testcase>
  </testsuite>
  <testsuite name="createContainer" timestamp="2020-10-09T18:19:47" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-builder/utils/createContainer.spec.ts" time="0.0010" failures="0">
    <testcase name="createContainer should createContainer" time="0.0010" classname="should createContainer">
    </testcase>
    <testcase name="createContainer should createContainer without rootModule" time="0.0000" classname="should createContainer without rootModule">
    </testcase>
  </testsuite>
  <testsuite name="createHttpServer" timestamp="2020-10-09T18:19:47" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-builder/utils/createHttpServer.spec.ts" time="0.0040" failures="0">
    <testcase name="createHttpServer should fork the create http server" time="0.0010" classname="should fork the create http server">
    </testcase>
    <testcase name="createHttpServer should listen the server" time="0.0010" classname="should listen the server">
    </testcase>
    <testcase name="createHttpServer should listen the server with port 0" time="0.0010" classname="should listen the server with port 0">
    </testcase>
    <testcase name="createHttpServer should not listen the server when it&apos;s false" time="0.0010" classname="should not listen the server when it&apos;s false">
    </testcase>
  </testsuite>
  <testsuite name="createHttpsServer" timestamp="2020-10-09T18:19:47" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-builder/utils/createHttpsServer.spec.ts" time="0.0060" failures="0">
    <testcase name="createHttpsServer should fork the create http server" time="0.0010" classname="should fork the create http server">
    </testcase>
    <testcase name="createHttpsServer should listen the server" time="0.0010" classname="should listen the server">
    </testcase>
    <testcase name="createHttpsServer should listen the server with port 0" time="0.0030" classname="should listen the server with port 0">
    </testcase>
    <testcase name="createHttpsServer should not listen the server when it&apos;s false" time="0.0010" classname="should not listen the server when it&apos;s false">
    </testcase>
  </testsuite>
  <testsuite name="createInjector" timestamp="2020-10-09T18:19:47" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-builder/utils/createInjector.spec.ts" time="0.0020" failures="0">
    <testcase name="createInjector should create injector and stop logger in env Test" time="0.0010" classname="should create injector and stop logger in env Test">
    </testcase>
    <testcase name="createInjector should create injector" time="0.0010" classname="should create injector">
    </testcase>
  </testsuite>
  <testsuite name="createPlatformApplication" timestamp="2020-10-09T18:19:47" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-builder/utils/createPlatformApplication.spec.ts" time="0.0010" failures="0">
    <testcase name="createPlatformApplication should fork the platformApplication" time="0.0010" classname="should fork the platformApplication">
    </testcase>
  </testsuite>
  <testsuite name="getConfiguration" timestamp="2020-10-09T18:19:47" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-builder/utils/getConfiguration.spec.ts" time="0.0000" failures="0">
    <testcase name="getConfiguration should return configuration" time="0.0000" classname="should return configuration">
    </testcase>
    <testcase name="getConfiguration should return configuration (2)" time="0.0000" classname="should return configuration (2)">
    </testcase>
  </testsuite>
  <testsuite name="importComponents" timestamp="2020-10-09T18:19:47" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-builder/utils/importComponents.spec.ts" time="0.0040" failures="0">
    <testcase name="importComponents should import symbols" time="0.0030" classname="should import symbols">
    </testcase>
    <testcase name="importComponents should import symbols with endpoints" time="0.0010" classname="should import symbols with endpoints">
    </testcase>
  </testsuite>
  <testsuite name="importFiles" timestamp="2020-10-09T18:19:47" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-builder/utils/importFiles.spec.ts" time="0.0020" failures="0">
    <testcase name="importFiles should import symbols" time="0.0010" classname="should import symbols">
    </testcase>
    <testcase name="importFiles should import symbols without excluded files" time="0.0010" classname="should import symbols without excluded files">
    </testcase>
  </testsuite>
  <testsuite name="loadInjector" timestamp="2020-10-09T18:19:47" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-builder/utils/loadInjector.spec.ts" time="0.0030" failures="0">
    <testcase name="loadInjector should load injector" time="0.0030" classname="should load injector">
    </testcase>
  </testsuite>
  <testsuite name="printRoutes()" timestamp="2020-10-09T18:19:47" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-builder/utils/printRoutes.spec.ts" time="0.0250" failures="0">
    <testcase name="printRoutes() should return routes" time="0.0250" classname="should return routes">
    </testcase>
  </testsuite>
  <testsuite name="PlatformExceptions" timestamp="2020-10-09T18:19:47" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-exceptions/services/PlatformExceptions.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Env.TEST" timestamp="2020-10-09T18:19:47" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-exceptions/services/PlatformExceptions.spec.ts" time="0.0050" failures="0">
    <testcase name="PlatformExceptions Env.TEST should map string error" time="0.0010" classname="should map string error">
    </testcase>
    <testcase name="PlatformExceptions Env.TEST should map exception" time="0.0030" classname="should map exception">
    </testcase>
    <testcase name="PlatformExceptions Env.TEST should map error" time="0.0010" classname="should map error">
    </testcase>
  </testsuite>
  <testsuite name="Env.PROD" timestamp="2020-10-09T18:19:47" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-exceptions/services/PlatformExceptions.spec.ts" time="0.0010" failures="0">
    <testcase name="PlatformExceptions Env.PROD should map error return internal error in prod profile" time="0.0010" classname="should map error return internal error in prod profile">
    </testcase>
  </testsuite>
  <testsuite name="PlatformTest" timestamp="2020-10-09T18:19:47" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-test/components/PlatformTest.spec.ts" time="0.0000" failures="0">
    <testcase name="PlatformTest should get symbol from injector" time="0.0000" classname="should get symbol from injector">
    </testcase>
  </testsuite>
  <testsuite name="createRequestContext" timestamp="2020-10-09T18:19:47" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-test/components/PlatformTest.spec.ts" time="0.0000" failures="0">
    <testcase name="PlatformTest createRequestContext should return request context" time="0.0000" classname="should return request context">
    </testcase>
  </testsuite>
  <testsuite name="invoke" timestamp="2020-10-09T18:19:47" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform-test/components/PlatformTest.spec.ts" time="0.0000" failures="0">
    <testcase name="PlatformTest invoke should return request context" time="0.0000" classname="should return request context">
    </testcase>
  </testsuite>
  <testsuite name="PlatformControllerBuilder" timestamp="2020-10-09T18:19:47" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/builder/PlatformControllerBuilder.spec.ts" time="0.0050" failures="0">
    <testcase name="PlatformControllerBuilder should build controller with single endpoint" time="0.0020" classname="should build controller with single endpoint">
    </testcase>
    <testcase name="PlatformControllerBuilder should build controller with only route configured" time="0.0010" classname="should build controller with only route configured">
    </testcase>
    <testcase name="PlatformControllerBuilder should build controller without route and method" time="0.0010" classname="should build controller without route and method">
    </testcase>
    <testcase name="PlatformControllerBuilder should build controller with a all endpoint and get endpoint" time="0.0010" classname="should build controller with a all endpoint and get endpoint">
    </testcase>
  </testsuite>
  <testsuite name="@Context " timestamp="2020-10-09T18:19:47" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/decorators/context.spec.ts" time="0.0000" failures="0">
    <testcase name="@Context  should call ParamFilter.useParam method with the correct parameters" time="0.0000" classname="should call ParamFilter.useParam method with the correct parameters">
    </testcase>
  </testsuite>
  <testsuite name="MulterFileSize" timestamp="2020-10-09T18:19:47" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/decorators/multer/multerFileSize.spec.ts" time="0.0000" failures="0">
    <testcase name="MulterFileSize should set the file size" time="0.0000" classname="should set the file size">
    </testcase>
  </testsuite>
  <testsuite name="@MulterOptions()" timestamp="2020-10-09T18:19:47" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/decorators/multer/multerOptions.spec.ts" time="0.0000" failures="0">
    <testcase name="@MulterOptions() should store metadata" time="0.0000" classname="should store metadata">
    </testcase>
  </testsuite>
  <testsuite name="@MultipartFile()" timestamp="2020-10-09T18:19:47" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/decorators/multer/multipartFile.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="one file" timestamp="2020-10-09T18:19:47" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/decorators/multer/multipartFile.spec.ts" time="0.0010" failures="0">
    <testcase name="@MultipartFile() one file should set endpoint metadata" time="0.0010" classname="should set endpoint metadata">
    </testcase>
  </testsuite>
  <testsuite name="multiple files" timestamp="2020-10-09T18:19:47" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/decorators/multer/multipartFile.spec.ts" time="0.0000" failures="0">
    <testcase name="@MultipartFile() multiple files should set endpoint metadata" time="0.0000" classname="should set endpoint metadata">
    </testcase>
    <testcase name="@MultipartFile() multiple files should set params metadata" time="0.0000" classname="should set params metadata">
    </testcase>
  </testsuite>
  <testsuite name="ControllerProvider" timestamp="2020-10-09T18:19:47" tests="16" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/domain/ControllerProvider.spec.ts" time="0.0020" failures="0">
    <testcase name="ControllerProvider should return all keys available for serialisation" time="0.0000" classname="should return all keys available for serialisation">
    </testcase>
    <testcase name="ControllerProvider should have type field to equals to controller" time="0.0000" classname="should have type field to equals to controller">
    </testcase>
    <testcase name="ControllerProvider should get path" time="0.0010" classname="should get path">
    </testcase>
    <testcase name="ControllerProvider should get endpoints" time="0.0000" classname="should get endpoints">
    </testcase>
    <testcase name="ControllerProvider should get children" time="0.0000" classname="should get children">
    </testcase>
    <testcase name="ControllerProvider should have a dependency witch have $parentCtrl attributs" time="0.0000" classname="should have a dependency witch have $parentCtrl attributs">
    </testcase>
    <testcase name="ControllerProvider should get a scope" time="0.0000" classname="should get a scope">
    </testcase>
    <testcase name="ControllerProvider should get routerOptions" time="0.0000" classname="should get routerOptions">
    </testcase>
    <testcase name="ControllerProvider should get endpoint Url without parameters" time="0.0000" classname="should get endpoint Url without parameters">
    </testcase>
    <testcase name="ControllerProvider should get endpoint Url with parameters" time="0.0000" classname="should get endpoint Url with parameters">
    </testcase>
    <testcase name="ControllerProvider should get endpoint Url with parameters" time="0.0000" classname="should get endpoint Url with parameters">
    </testcase>
    <testcase name="ControllerProvider should have endpoint url" time="0.0000" classname="should have endpoint url">
    </testcase>
    <testcase name="ControllerProvider should have children" time="0.0000" classname="should have children">
    </testcase>
    <testcase name="ControllerProvider should get parent" time="0.0000" classname="should get parent">
    </testcase>
    <testcase name="ControllerProvider should have parent" time="0.0000" classname="should have parent">
    </testcase>
    <testcase name="ControllerProvider should have a middlewares" time="0.0010" classname="should have a middlewares">
    </testcase>
  </testsuite>
  <testsuite name="HandlerContext" timestamp="2020-10-09T18:19:47" tests="12" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/domain/HandlerContext.spec.ts" time="0.0430" failures="0">
    <testcase name="HandlerContext should declare a new HandlerContext and return value" time="0.0050" classname="should declare a new HandlerContext and return value">
    </testcase>
    <testcase name="HandlerContext should call handler inside native middleware" time="0.0030" classname="should call handler inside native middleware">
    </testcase>
    <testcase name="HandlerContext should declare a new HandlerContext and catch error" time="0.0040" classname="should declare a new HandlerContext and catch error">
    </testcase>
    <testcase name="HandlerContext should return the value from PROMISE" time="0.0050" classname="should return the value from PROMISE">
    </testcase>
    <testcase name="HandlerContext should return the value from BUFFER" time="0.0030" classname="should return the value from BUFFER">
    </testcase>
    <testcase name="HandlerContext should return the value from STREAM" time="0.0040" classname="should return the value from STREAM">
    </testcase>
    <testcase name="HandlerContext should proxy axios/custom response" time="0.0030" classname="should proxy axios/custom response">
    </testcase>
    <testcase name="HandlerContext should return the value from OBSERVABLE" time="0.0040" classname="should return the value from OBSERVABLE">
    </testcase>
    <testcase name="HandlerContext should return the value from FUNCTION" time="0.0030" classname="should return the value from FUNCTION">
    </testcase>
    <testcase name="HandlerContext should call next immediately" time="0.0030" classname="should call next immediately">
    </testcase>
    <testcase name="HandlerContext should do nothing when response is returned" time="0.0030" classname="should do nothing when response is returned">
    </testcase>
    <testcase name="HandlerContext should do nothing when response has already sent headers" time="0.0030" classname="should do nothing when response has already sent headers">
    </testcase>
  </testsuite>
  <testsuite name="PlatformContext" timestamp="2020-10-09T18:19:48" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/domain/PlatformContext.spec.ts" time="0.0010" failures="0">
    <testcase name="PlatformContext should create a new Context" time="0.0010" classname="should create a new Context">
    </testcase>
  </testsuite>
  <testsuite name="RequestLogger" timestamp="2020-10-09T18:19:48" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/domain/RequestLogger.spec.ts" time="0.0060" failures="0">
    <testcase name="RequestLogger should create a new Context and log all" time="0.0030" classname="should create a new Context and log all">
    </testcase>
    <testcase name="RequestLogger should create a new Context and log all (with minimalRequestPicker)" time="0.0010" classname="should create a new Context and log all (with minimalRequestPicker)">
    </testcase>
    <testcase name="RequestLogger should create a new Context and log nothing when pattern match with url" time="0.0010" classname="should create a new Context and log nothing when pattern match with url">
    </testcase>
    <testcase name="RequestLogger should create a new Context and flush log when maxStackSize is reached" time="0.0010" classname="should create a new Context and flush log when maxStackSize is reached">
    </testcase>
  </testsuite>
  <testsuite name="ParseExpressionError" timestamp="2020-10-09T18:19:48" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/errors/ParamValidationError.spec.ts" time="0.0020" failures="0">
    <testcase name="ParseExpressionError should return error without transformation" time="0.0000" classname="should return error without transformation">
    </testcase>
    <testcase name="ParseExpressionError should return error" time="0.0010" classname="should return error">
    </testcase>
    <testcase name="ParseExpressionError should throw error from origin error (RequiredValidationError)" time="0.0000" classname="should throw error from origin error (RequiredValidationError)">
    </testcase>
    <testcase name="ParseExpressionError should throw error from origin error (ValidationError)" time="0.0010" classname="should throw error from origin error (ValidationError)">
    </testcase>
  </testsuite>
  <testsuite name="TemplateRenderingError" timestamp="2020-10-09T18:19:48" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/errors/TemplateRenderError.spec.ts" time="0.0000" failures="0">
    <testcase name="TemplateRenderingError should have a message" time="0.0000" classname="should have a message">
    </testcase>
  </testsuite>
  <testsuite name="bindEndpointMiddleware" timestamp="2020-10-09T18:19:48" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/middlewares/bindEndpointMiddleware.spec.ts" time="0.0020" failures="0">
    <testcase name="bindEndpointMiddleware should bind endpoint to the request" time="0.0020" classname="should bind endpoint to the request">
    </testcase>
  </testsuite>
  <testsuite name="GlobalAcceptMimesMiddleware" timestamp="2020-10-09T18:19:48" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/middlewares/GlobalAcceptMimesMiddleware.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="accept" timestamp="2020-10-09T18:19:48" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/middlewares/GlobalAcceptMimesMiddleware.spec.ts" time="0.0010" failures="0">
    <testcase name="GlobalAcceptMimesMiddleware accept should return nothing" time="0.0010" classname="should return nothing">
    </testcase>
  </testsuite>
  <testsuite name="not accept" timestamp="2020-10-09T18:19:48" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/middlewares/GlobalAcceptMimesMiddleware.spec.ts" time="0.0020" failures="0">
    <testcase name="GlobalAcceptMimesMiddleware not accept should throws NotAcceptable" time="0.0020" classname="should throws NotAcceptable">
    </testcase>
  </testsuite>
  <testsuite name="PlatformLogMiddleware" timestamp="2020-10-09T18:19:48" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/middlewares/PlatformLogMiddleware.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="use()" timestamp="2020-10-09T18:19:48" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/middlewares/PlatformLogMiddleware.spec.ts" time="0.0080" failures="0">
    <testcase name="PlatformLogMiddleware use() should configure request and create context logger (no debug, logRequest)" time="0.0030" classname="should configure request and create context logger (no debug, logRequest)">
    </testcase>
    <testcase name="PlatformLogMiddleware use() should configure request and create context logger (debug, logRequest)" time="0.0020" classname="should configure request and create context logger (debug, logRequest)">
    </testcase>
    <testcase name="PlatformLogMiddleware use() should configure request and create context logger (no debug, logRequest, logEnd)" time="0.0010" classname="should configure request and create context logger (no debug, logRequest, logEnd)">
    </testcase>
    <testcase name="PlatformLogMiddleware use() should configure request and create context logger (no debug, logRequest, logStart)" time="0.0020" classname="should configure request and create context logger (no debug, logRequest, logStart)">
    </testcase>
  </testsuite>
  <testsuite name="PlatformMulterMiddleware" timestamp="2020-10-09T18:19:48" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/middlewares/PlatformMulterMiddleware.spec.ts" time="0.0120" failures="0">
    <testcase name="PlatformMulterMiddleware should create middleware" time="0.0050" classname="should create middleware">
    </testcase>
    <testcase name="PlatformMulterMiddleware should catch error with code" time="0.0040" classname="should catch error with code">
    </testcase>
    <testcase name="PlatformMulterMiddleware should throw error without code" time="0.0030" classname="should throw error without code">
    </testcase>
  </testsuite>
  <testsuite name="ControllerRegistry" timestamp="2020-10-09T18:19:48" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/registries/ControllerRegistry.spec.ts" time="0.0010" failures="0">
    <testcase name="ControllerRegistry should create registry with the right parameters" time="0.0010" classname="should create registry with the right parameters">
    </testcase>
  </testsuite>
  <testsuite name="Platform" timestamp="2020-10-09T18:19:48" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/Platform.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="createRouter" timestamp="2020-10-09T18:19:48" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/Platform.spec.ts" time="0.0010" failures="0">
    <testcase name="Platform createRouter should create a router" time="0.0010" classname="should create a router">
    </testcase>
  </testsuite>
  <testsuite name="addRoute" timestamp="2020-10-09T18:19:48" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/Platform.spec.ts" time="0.0010" failures="0">
    <testcase name="Platform addRoute should add a route" time="0.0010" classname="should add a route">
    </testcase>
  </testsuite>
  <testsuite name="getRoutes" timestamp="2020-10-09T18:19:48" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/Platform.spec.ts" time="0.0010" failures="0">
    <testcase name="Platform getRoutes should add a route" time="0.0010" classname="should add a route">
    </testcase>
  </testsuite>
  <testsuite name="PlatformApplication" timestamp="2020-10-09T18:19:48" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformApplication.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="getApp()" timestamp="2020-10-09T18:19:48" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformApplication.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformApplication getApp() should return app" time="0.0020" classname="should return app">
    </testcase>
  </testsuite>
  <testsuite name="getRouter()" timestamp="2020-10-09T18:19:48" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformApplication.spec.ts" time="0.0010" failures="0">
    <testcase name="PlatformApplication getRouter() should return app" time="0.0010" classname="should return app">
    </testcase>
  </testsuite>
  <testsuite name="useContext()" timestamp="2020-10-09T18:19:48" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformApplication.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformApplication useContext() should create context" time="0.0040" classname="should create context">
    </testcase>
  </testsuite>
  <testsuite name="use()" timestamp="2020-10-09T18:19:48" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformApplication.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformApplication use() should create a PlatformApplication and add handler" time="0.0020" classname="should create a PlatformApplication and add handler">
    </testcase>
    <testcase name="PlatformApplication use() should add router to app" time="0.0020" classname="should add router to app">
    </testcase>
  </testsuite>
  <testsuite name="get()" timestamp="2020-10-09T18:19:48" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformApplication.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformApplication get() should create a PlatformApplication and add handler" time="0.0020" classname="should create a PlatformApplication and add handler">
    </testcase>
  </testsuite>
  <testsuite name="all()" timestamp="2020-10-09T18:19:48" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformApplication.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformApplication all() should create a PlatformApplication and add handler" time="0.0020" classname="should create a PlatformApplication and add handler">
    </testcase>
  </testsuite>
  <testsuite name="post()" timestamp="2020-10-09T18:19:48" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformApplication.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformApplication post() should create a PlatformApplication and add handler" time="0.0020" classname="should create a PlatformApplication and add handler">
    </testcase>
  </testsuite>
  <testsuite name="put()" timestamp="2020-10-09T18:19:48" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformApplication.spec.ts" time="0.0010" failures="0">
    <testcase name="PlatformApplication put() should create a PlatformApplication and add handler" time="0.0010" classname="should create a PlatformApplication and add handler">
    </testcase>
  </testsuite>
  <testsuite name="patch()" timestamp="2020-10-09T18:19:48" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformApplication.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformApplication patch() should create a PlatformApplication and add handler" time="0.0020" classname="should create a PlatformApplication and add handler">
    </testcase>
  </testsuite>
  <testsuite name="head()" timestamp="2020-10-09T18:19:48" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformApplication.spec.ts" time="0.0010" failures="0">
    <testcase name="PlatformApplication head() should create a PlatformApplication and add handler" time="0.0010" classname="should create a PlatformApplication and add handler">
    </testcase>
  </testsuite>
  <testsuite name="delete()" timestamp="2020-10-09T18:19:48" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformApplication.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformApplication delete() should create a PlatformApplication and add handler" time="0.0020" classname="should create a PlatformApplication and add handler">
    </testcase>
  </testsuite>
  <testsuite name="options()" timestamp="2020-10-09T18:19:48" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformApplication.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformApplication options() should create a PlatformApplication and add handler" time="0.0020" classname="should create a PlatformApplication and add handler">
    </testcase>
  </testsuite>
  <testsuite name="statics()" timestamp="2020-10-09T18:19:48" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformApplication.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformApplication statics() should call statics" time="0.0020" classname="should call statics">
    </testcase>
  </testsuite>
  <testsuite name="PlatformHandler" timestamp="2020-10-09T18:19:48" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformHandler.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="createHandler" timestamp="2020-10-09T18:19:48" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformHandler.spec.ts" time="0.0130" failures="0">
    <testcase name="PlatformHandler createHandler should return a native handler (success middleware)" time="0.0010" classname="should return a native handler (success middleware)">
    </testcase>
    <testcase name="PlatformHandler createHandler should return a native metadata (from native metadata)" time="0.0000" classname="should return a native metadata (from native metadata)">
    </testcase>
    <testcase name="PlatformHandler createHandler should do nothing when request is aborted" time="0.0090" classname="should do nothing when request is aborted">
    </testcase>
    <testcase name="PlatformHandler createHandler should call returned function" time="0.0030" classname="should call returned function">
    </testcase>
  </testsuite>
  <testsuite name="getArg()" timestamp="2020-10-09T18:19:48" tests="19" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformHandler.spec.ts" time="0.0510" failures="0">
    <testcase name="PlatformHandler getArg() should return REQUEST (node)" time="0.0030" classname="should return REQUEST (node)">
    </testcase>
    <testcase name="PlatformHandler getArg() should return REQUEST (framework)" time="0.0030" classname="should return REQUEST (framework)">
    </testcase>
    <testcase name="PlatformHandler getArg() should return REQUEST (platform)" time="0.0030" classname="should return REQUEST (platform)">
    </testcase>
    <testcase name="PlatformHandler getArg() should return RESPONSE (node)" time="0.0030" classname="should return RESPONSE (node)">
    </testcase>
    <testcase name="PlatformHandler getArg() should return RESPONSE (framework)" time="0.0030" classname="should return RESPONSE (framework)">
    </testcase>
    <testcase name="PlatformHandler getArg() should return RESPONSE (platform)" time="0.0030" classname="should return RESPONSE (platform)">
    </testcase>
    <testcase name="PlatformHandler getArg() should return NEXT" time="0.0030" classname="should return NEXT">
    </testcase>
    <testcase name="PlatformHandler getArg() should return ERR" time="0.0030" classname="should return ERR">
    </testcase>
    <testcase name="PlatformHandler getArg() should return $CTX" time="0.0030" classname="should return $CTX">
    </testcase>
    <testcase name="PlatformHandler getArg() should return RESPONSE_DATA" time="0.0020" classname="should return RESPONSE_DATA">
    </testcase>
    <testcase name="PlatformHandler getArg() should return ENDPOINT_INFO" time="0.0030" classname="should return ENDPOINT_INFO">
    </testcase>
    <testcase name="PlatformHandler getArg() should return BODY" time="0.0030" classname="should return BODY">
    </testcase>
    <testcase name="PlatformHandler getArg() should return PATH" time="0.0020" classname="should return PATH">
    </testcase>
    <testcase name="PlatformHandler getArg() should return QUERY" time="0.0030" classname="should return QUERY">
    </testcase>
    <testcase name="PlatformHandler getArg() should return HEADER" time="0.0020" classname="should return HEADER">
    </testcase>
    <testcase name="PlatformHandler getArg() should return COOKIES" time="0.0020" classname="should return COOKIES">
    </testcase>
    <testcase name="PlatformHandler getArg() should return SESSION" time="0.0020" classname="should return SESSION">
    </testcase>
    <testcase name="PlatformHandler getArg() should return LOCALS" time="0.0020" classname="should return LOCALS">
    </testcase>
    <testcase name="PlatformHandler getArg() should return request by default" time="0.0030" classname="should return request by default">
    </testcase>
  </testsuite>
  <testsuite name="PlatformRequest" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformRequest.spec.ts" time="0.0010" failures="0">
    <testcase name="PlatformRequest should create a PlatformRequest instance" time="0.0010" classname="should create a PlatformRequest instance">
    </testcase>
  </testsuite>
  <testsuite name="accepts()" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformRequest.spec.ts" time="0.0000" failures="0">
    <testcase name="PlatformRequest accepts() should set status code" time="0.0000" classname="should set status code">
    </testcase>
  </testsuite>
  <testsuite name="getters" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformRequest.spec.ts" time="0.0010" failures="0">
    <testcase name="PlatformRequest getters should return the expected data" time="0.0010" classname="should return the expected data">
    </testcase>
  </testsuite>
  <testsuite name="PlatformResponse" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformResponse.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformResponse should create a PlatformResponse instance" time="0.0020" classname="should create a PlatformResponse instance">
    </testcase>
  </testsuite>
  <testsuite name="statusCode" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformResponse.spec.ts" time="0.0010" failures="0">
    <testcase name="PlatformResponse statusCode should return status code" time="0.0010" classname="should return status code">
    </testcase>
  </testsuite>
  <testsuite name="status()" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformResponse.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformResponse status() should set status code" time="0.0020" classname="should set status code">
    </testcase>
  </testsuite>
  <testsuite name="setHeaders()" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformResponse.spec.ts" time="0.0010" failures="0">
    <testcase name="PlatformResponse setHeaders() should set headers" time="0.0010" classname="should set headers">
    </testcase>
  </testsuite>
  <testsuite name="contentType()" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformResponse.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformResponse contentType() should set content Type" time="0.0020" classname="should set content Type">
    </testcase>
  </testsuite>
  <testsuite name="redirect()" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformResponse.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformResponse redirect() should set redirect" time="0.0020" classname="should set redirect">
    </testcase>
  </testsuite>
  <testsuite name="render()" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformResponse.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformResponse render() should return a string" time="0.0020" classname="should return a string">
    </testcase>
  </testsuite>
  <testsuite name="location()" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformResponse.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformResponse location() should set location" time="0.0020" classname="should set location">
    </testcase>
  </testsuite>
  <testsuite name="body()" timestamp="2020-10-09T18:19:49" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformResponse.spec.ts" time="0.0100" failures="0">
    <testcase name="PlatformResponse body() should call body with undefined" time="0.0020" classname="should call body with undefined">
    </testcase>
    <testcase name="PlatformResponse body() should call body with string" time="0.0020" classname="should call body with string">
    </testcase>
    <testcase name="PlatformResponse body() should call body with stream" time="0.0030" classname="should call body with stream">
    </testcase>
    <testcase name="PlatformResponse body() should call body with {}" time="0.0030" classname="should call body with {}">
    </testcase>
  </testsuite>
  <testsuite name="destroy()" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformResponse.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformResponse destroy() should destroy response" time="0.0020" classname="should destroy response">
    </testcase>
  </testsuite>
  <testsuite name="PlatformRouter" timestamp="2020-10-09T18:19:49" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformRouter.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="create()" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformRouter.spec.ts" time="0.0000" failures="0">
    <testcase name="PlatformRouter create() should create a new router" time="0.0000" classname="should create a new router">
    </testcase>
  </testsuite>
  <testsuite name="PlatformViews" timestamp="2020-10-09T18:19:49" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformViews.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="render()" timestamp="2020-10-09T18:19:49" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/services/PlatformViews.spec.ts" time="0.0030" failures="0">
    <testcase name="PlatformViews render() should render a template with given extension" time="0.0010" classname="should render a template with given extension">
    </testcase>
    <testcase name="PlatformViews render() should render a template without extension" time="0.0010" classname="should render a template without extension">
    </testcase>
    <testcase name="PlatformViews render() should render a template without extension" time="0.0010" classname="should render a template without extension">
    </testcase>
  </testsuite>
  <testsuite name="createContext" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/utils/createContext.spec.ts" time="0.0030" failures="0">
    <testcase name="createContext should create context and attach it to the request" time="0.0030" classname="should create context and attach it to the request">
    </testcase>
  </testsuite>
  <testsuite name="createHandlerMetadata" timestamp="2020-10-09T18:19:49" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/utils/createHandlerMetadata.spec.ts" time="0.0020" failures="0">
    <testcase name="createHandlerMetadata should return metadata from Endpoint" time="0.0010" classname="should return metadata from Endpoint">
    </testcase>
    <testcase name="createHandlerMetadata should return metadata from Middleware" time="0.0000" classname="should return metadata from Middleware">
    </testcase>
    <testcase name="createHandlerMetadata should return metadata from Function" time="0.0010" classname="should return metadata from Function">
    </testcase>
    <testcase name="createHandlerMetadata should return metadata from useCtxHandler" time="0.0000" classname="should return metadata from useCtxHandler">
    </testcase>
  </testsuite>
  <testsuite name="renderView" timestamp="2020-10-09T18:19:49" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/utils/renderView.spec.ts" time="0.0060" failures="0">
    <testcase name="renderView should render content" time="0.0020" classname="should render content">
    </testcase>
    <testcase name="renderView should throw an error" time="0.0040" classname="should throw an error">
    </testcase>
  </testsuite>
  <testsuite name="setResponseContentType" timestamp="2020-10-09T18:19:49" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/utils/setResponseContentType.spec.ts" time="0.0070" failures="0">
    <testcase name="setResponseContentType should set the appropriate content type" time="0.0030" classname="should set the appropriate content type">
    </testcase>
    <testcase name="setResponseContentType should set the json content-type" time="0.0020" classname="should set the json content-type">
    </testcase>
    <testcase name="setResponseContentType should not set the json content-type" time="0.0020" classname="should not set the json content-type">
    </testcase>
  </testsuite>
  <testsuite name="setResponseHeaders" timestamp="2020-10-09T18:19:49" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/common/src/platform/utils/setResponseHeaders.spec.ts" time="0.0110" failures="0">
    <testcase name="setResponseHeaders should set headers, status and contentType" time="0.0030" classname="should set headers, status and contentType">
    </testcase>
    <testcase name="setResponseHeaders should redirect" time="0.0020" classname="should redirect">
    </testcase>
    <testcase name="setResponseHeaders should call location" time="0.0020" classname="should call location">
    </testcase>
    <testcase name="setResponseHeaders should do nothing when headers is already sent" time="0.0040" classname="should do nothing when headers is already sent">
    </testcase>
  </testsuite>
  <testsuite name="EntityDescription" timestamp="2020-10-09T18:19:49" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Entity.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="getter / setter" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Entity.spec.ts" time="0.0000" failures="0">
    <testcase name="EntityDescription getter / setter should create entity" time="0.0000" classname="should create entity">
    </testcase>
  </testsuite>
  <testsuite name="Hooks" timestamp="2020-10-09T18:19:49" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Hooks.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="emit" timestamp="2020-10-09T18:19:49" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Hooks.spec.ts" time="0.0000" failures="0">
    <testcase name="Hooks emit should listen a hook and calls listener" time="0.0000" classname="should listen a hook and calls listener">
    </testcase>
    <testcase name="Hooks emit should async listen a hook and calls listener" time="0.0000" classname="should async listen a hook and calls listener">
    </testcase>
  </testsuite>
  <testsuite name="alter" timestamp="2020-10-09T18:19:49" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Hooks.spec.ts" time="0.0000" failures="0">
    <testcase name="Hooks alter should listen a hook and calls listener" time="0.0000" classname="should listen a hook and calls listener">
    </testcase>
    <testcase name="Hooks alter should async listen a hook and calls listener" time="0.0000" classname="should async listen a hook and calls listener">
    </testcase>
  </testsuite>
  <testsuite name="Metadata" timestamp="2020-10-09T18:19:49" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Metadata.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="has" timestamp="2020-10-09T18:19:49" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Metadata.spec.ts" time="0.0000" failures="0">
    <testcase name="Metadata has should return false (String)" time="0.0000" classname="should return false (String)">
    </testcase>
    <testcase name="Metadata has should return false (bad target)" time="0.0000" classname="should return false (bad target)">
    </testcase>
  </testsuite>
  <testsuite name="set" timestamp="2020-10-09T18:19:49" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Metadata.spec.ts" time="0.0010" failures="0">
    <testcase name="Metadata set should set meta on a class" time="0.0010" classname="should set meta on a class">
    </testcase>
    <testcase name="Metadata set should set meta on instance" time="0.0000" classname="should set meta on instance">
    </testcase>
    <testcase name="Metadata set should set meta on a method" time="0.0000" classname="should set meta on a method">
    </testcase>
  </testsuite>
  <testsuite name="get" timestamp="2020-10-09T18:19:49" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Metadata.spec.ts" time="0.0000" failures="0">
    <testcase name="Metadata get should get meta on a class" time="0.0000" classname="should get meta on a class">
    </testcase>
    <testcase name="Metadata get should get meta on a method" time="0.0000" classname="should get meta on a method">
    </testcase>
  </testsuite>
  <testsuite name="getOwn" timestamp="2020-10-09T18:19:49" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Metadata.spec.ts" time="0.0000" failures="0">
    <testcase name="Metadata getOwn should get meta on a class" time="0.0000" classname="should get meta on a class">
    </testcase>
    <testcase name="Metadata getOwn should get meta on a method" time="0.0000" classname="should get meta on a method">
    </testcase>
  </testsuite>
  <testsuite name="delete" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Metadata.spec.ts" time="0.0010" failures="0">
    <testcase name="Metadata delete should remove meta on a class" time="0.0010" classname="should remove meta on a class">
    </testcase>
  </testsuite>
  <testsuite name="getType" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Metadata.spec.ts" time="0.0000" failures="0">
    <testcase name="Metadata getType should return attribut type" time="0.0000" classname="should return attribut type">
    </testcase>
  </testsuite>
  <testsuite name="getOwnType" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Metadata.spec.ts" time="0.0010" failures="0">
    <testcase name="Metadata getOwnType should return attribut type" time="0.0010" classname="should return attribut type">
    </testcase>
  </testsuite>
  <testsuite name="getParamTypes" timestamp="2020-10-09T18:19:49" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Metadata.spec.ts" time="0.0010" failures="0">
    <testcase name="Metadata getParamTypes should return types on constructor" time="0.0000" classname="should return types on constructor">
    </testcase>
    <testcase name="Metadata getParamTypes should return types on method" time="0.0010" classname="should return types on method">
    </testcase>
  </testsuite>
  <testsuite name="getOwnParamTypes" timestamp="2020-10-09T18:19:49" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Metadata.spec.ts" time="0.0000" failures="0">
    <testcase name="Metadata getOwnParamTypes should return types on constructor" time="0.0000" classname="should return types on constructor">
    </testcase>
    <testcase name="Metadata getOwnParamTypes should return types on method" time="0.0000" classname="should return types on method">
    </testcase>
  </testsuite>
  <testsuite name="getReturnType" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Metadata.spec.ts" time="0.0010" failures="0">
    <testcase name="Metadata getReturnType should return types on method" time="0.0010" classname="should return types on method">
    </testcase>
  </testsuite>
  <testsuite name="getOwnReturnType" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Metadata.spec.ts" time="0.0000" failures="0">
    <testcase name="Metadata getOwnReturnType should return types on method" time="0.0000" classname="should return types on method">
    </testcase>
  </testsuite>
  <testsuite name="list" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Metadata.spec.ts" time="0.0000" failures="0">
    <testcase name="Metadata list should return unique provide from property key" time="0.0000" classname="should return unique provide from property key">
    </testcase>
  </testsuite>
  <testsuite name="Registry" timestamp="2020-10-09T18:19:49" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Registry.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="constructor()" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Registry.spec.ts" time="0.0010" failures="0">
    <testcase name="Registry constructor() should create new registry from class" time="0.0010" classname="should create new registry from class">
    </testcase>
  </testsuite>
  <testsuite name="set()" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Registry.spec.ts" time="0.0000" failures="0">
    <testcase name="Registry set() should add a metadata" time="0.0000" classname="should add a metadata">
    </testcase>
  </testsuite>
  <testsuite name="has()" timestamp="2020-10-09T18:19:49" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Registry.spec.ts" time="0.0010" failures="0">
    <testcase name="Registry has() should add a metadata" time="0.0000" classname="should add a metadata">
    </testcase>
    <testcase name="Registry has() should return true if class is known" time="0.0000" classname="should return true if class is known">
    </testcase>
    <testcase name="Registry has() should return false if class is unknown" time="0.0010" classname="should return false if class is unknown">
    </testcase>
  </testsuite>
  <testsuite name="get()" timestamp="2020-10-09T18:19:49" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Registry.spec.ts" time="0.0000" failures="0">
    <testcase name="Registry get() should add a metadata" time="0.0000" classname="should add a metadata">
    </testcase>
    <testcase name="Registry get() should get metadata" time="0.0000" classname="should get metadata">
    </testcase>
  </testsuite>
  <testsuite name="entries()" timestamp="2020-10-09T18:19:49" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Registry.spec.ts" time="0.0000" failures="0">
    <testcase name="Registry entries() should add a metadata" time="0.0000" classname="should add a metadata">
    </testcase>
    <testcase name="Registry entries() should return entries" time="0.0000" classname="should return entries">
    </testcase>
  </testsuite>
  <testsuite name="keys()" timestamp="2020-10-09T18:19:49" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Registry.spec.ts" time="0.0000" failures="0">
    <testcase name="Registry keys() should add a metadata" time="0.0000" classname="should add a metadata">
    </testcase>
    <testcase name="Registry keys() should return the keys" time="0.0000" classname="should return the keys">
    </testcase>
  </testsuite>
  <testsuite name="clear()" timestamp="2020-10-09T18:19:49" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Registry.spec.ts" time="0.0000" failures="0">
    <testcase name="Registry clear() should add a metadata" time="0.0000" classname="should add a metadata">
    </testcase>
    <testcase name="Registry clear() should remove all keys" time="0.0000" classname="should remove all keys">
    </testcase>
  </testsuite>
  <testsuite name="delete()" timestamp="2020-10-09T18:19:49" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Registry.spec.ts" time="0.0000" failures="0">
    <testcase name="Registry delete() should add a metadata" time="0.0000" classname="should add a metadata">
    </testcase>
    <testcase name="Registry delete() should remove all keys" time="0.0000" classname="should remove all keys">
    </testcase>
  </testsuite>
  <testsuite name="forEach()" timestamp="2020-10-09T18:19:49" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Registry.spec.ts" time="0.0010" failures="0">
    <testcase name="Registry forEach() should add a metadata" time="0.0000" classname="should add a metadata">
    </testcase>
    <testcase name="Registry forEach() should loop for each item stored in registry" time="0.0010" classname="should loop for each item stored in registry">
    </testcase>
  </testsuite>
  <testsuite name="values()" timestamp="2020-10-09T18:19:49" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Registry.spec.ts" time="0.0000" failures="0">
    <testcase name="Registry values() should add a metadata" time="0.0000" classname="should add a metadata">
    </testcase>
    <testcase name="Registry values() should return the values" time="0.0000" classname="should return the values">
    </testcase>
  </testsuite>
  <testsuite name="merge()" timestamp="2020-10-09T18:19:49" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Registry.spec.ts" time="0.0010" failures="0">
    <testcase name="Registry merge() should create new metadata" time="0.0010" classname="should create new metadata">
    </testcase>
    <testcase name="Registry merge() should merge metadata" time="0.0000" classname="should merge metadata">
    </testcase>
  </testsuite>
  <testsuite name="createIfNotExists()" timestamp="2020-10-09T18:19:49" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Registry.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when Registry is not configured with hook options" timestamp="2020-10-09T18:19:49" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Registry.spec.ts" time="0.0010" failures="0">
    <testcase name="Registry createIfNotExists() when Registry is not configured with hook options should call Registry.has()" time="0.0000" classname="should call Registry.has()">
    </testcase>
    <testcase name="Registry createIfNotExists() when Registry is not configured with hook options should call Registry.set()" time="0.0000" classname="should call Registry.set()">
    </testcase>
    <testcase name="Registry createIfNotExists() when Registry is not configured with hook options should call Registry.get()" time="0.0000" classname="should call Registry.get()">
    </testcase>
    <testcase name="Registry createIfNotExists() when Registry is not configured with hook options should return an instance of FakeMetadata" time="0.0010" classname="should return an instance of FakeMetadata">
    </testcase>
  </testsuite>
  <testsuite name="when Registry is configured with hook options" timestamp="2020-10-09T18:19:49" tests="5" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Registry.spec.ts" time="0.0000" failures="0">
    <testcase name="Registry createIfNotExists() when Registry is configured with hook options should call Registry.has()" time="0.0000" classname="should call Registry.has()">
    </testcase>
    <testcase name="Registry createIfNotExists() when Registry is configured with hook options should call Registry.set()" time="0.0000" classname="should call Registry.set()">
    </testcase>
    <testcase name="Registry createIfNotExists() when Registry is configured with hook options should call Registry.get()" time="0.0000" classname="should call Registry.get()">
    </testcase>
    <testcase name="Registry createIfNotExists() when Registry is configured with hook options should return an instance of FakeMetadata" time="0.0000" classname="should return an instance of FakeMetadata">
    </testcase>
    <testcase name="Registry createIfNotExists() when Registry is configured with hook options should call the onCreate hook" time="0.0000" classname="should call the onCreate hook">
    </testcase>
  </testsuite>
  <testsuite name="Store" timestamp="2020-10-09T18:19:49" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="constructor" timestamp="2020-10-09T18:19:49" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when metadata should be store on class" timestamp="2020-10-09T18:19:49" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0000" failures="0">
    <testcase name="Store constructor when metadata should be store on class should have been called the Metadata.get()" time="0.0000" classname="should have been called the Metadata.get()">
    </testcase>
    <testcase name="Store constructor when metadata should be store on class should share the same StoreMap when the signature is equals" time="0.0000" classname="should share the same StoreMap when the signature is equals">
    </testcase>
    <testcase name="Store constructor when metadata should be store on class should not share the same StoreMap when the signature is not equals" time="0.0000" classname="should not share the same StoreMap when the signature is not equals">
    </testcase>
  </testsuite>
  <testsuite name="when metadata should be store on method" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0000" failures="0">
    <testcase name="Store constructor when metadata should be store on method should have been called the Metadata.get()" time="0.0000" classname="should have been called the Metadata.get()">
    </testcase>
  </testsuite>
  <testsuite name="when metadata should be store on property (1)" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0000" failures="0">
    <testcase name="Store constructor when metadata should be store on property (1) should have been called the Metadata.get()" time="0.0000" classname="should have been called the Metadata.get()">
    </testcase>
  </testsuite>
  <testsuite name="when metadata should be store on property (2)" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0000" failures="0">
    <testcase name="Store constructor when metadata should be store on property (2) should have been called the Metadata.get()" time="0.0000" classname="should have been called the Metadata.get()">
    </testcase>
  </testsuite>
  <testsuite name="when metadata should be store on property (3)" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0000" failures="0">
    <testcase name="Store constructor when metadata should be store on property (3) should have been called the Metadata.get()" time="0.0000" classname="should have been called the Metadata.get()">
    </testcase>
  </testsuite>
  <testsuite name="when metadata should be store on parameters" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0000" failures="0">
    <testcase name="Store constructor when metadata should be store on parameters should have been called the Metadata.get()" time="0.0000" classname="should have been called the Metadata.get()">
    </testcase>
  </testsuite>
  <testsuite name="set()" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0000" failures="0">
    <testcase name="Store set() should add a metadata" time="0.0000" classname="should add a metadata">
    </testcase>
  </testsuite>
  <testsuite name="has()" timestamp="2020-10-09T18:19:49" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0010" failures="0">
    <testcase name="Store has() should add a metadata" time="0.0010" classname="should add a metadata">
    </testcase>
    <testcase name="Store has() should return true if class is known" time="0.0000" classname="should return true if class is known">
    </testcase>
    <testcase name="Store has() should return false if class is unknown" time="0.0000" classname="should return false if class is unknown">
    </testcase>
  </testsuite>
  <testsuite name="get()" timestamp="2020-10-09T18:19:49" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0000" failures="0">
    <testcase name="Store get() should add a metadata" time="0.0000" classname="should add a metadata">
    </testcase>
    <testcase name="Store get() should get metadata" time="0.0000" classname="should get metadata">
    </testcase>
  </testsuite>
  <testsuite name="entries()" timestamp="2020-10-09T18:19:49" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0000" failures="0">
    <testcase name="Store entries() should add a metadata" time="0.0000" classname="should add a metadata">
    </testcase>
    <testcase name="Store entries() should return entries" time="0.0000" classname="should return entries">
    </testcase>
  </testsuite>
  <testsuite name="keys()" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0000" failures="0">
    <testcase name="Store keys() should return the keys" time="0.0000" classname="should return the keys">
    </testcase>
  </testsuite>
  <testsuite name="clear()" timestamp="2020-10-09T18:19:49" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0010" failures="0">
    <testcase name="Store clear() should remove all keys" time="0.0010" classname="should remove all keys">
    </testcase>
  </testsuite>
  <testsuite name="delete()" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0000" failures="0">
    <testcase name="Store delete() should add a metadata" time="0.0000" classname="should add a metadata">
    </testcase>
    <testcase name="Store delete() should remove all keys" time="0.0000" classname="should remove all keys">
    </testcase>
  </testsuite>
  <testsuite name="forEach()" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0000" failures="0">
    <testcase name="Store forEach() should add a metadata" time="0.0000" classname="should add a metadata">
    </testcase>
    <testcase name="Store forEach() should loop for each item stored in registry" time="0.0000" classname="should loop for each item stored in registry">
    </testcase>
  </testsuite>
  <testsuite name="values()" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0000" failures="0">
    <testcase name="Store values() should add a metadata" time="0.0000" classname="should add a metadata">
    </testcase>
    <testcase name="Store values() should return the values" time="0.0000" classname="should return the values">
    </testcase>
  </testsuite>
  <testsuite name="merge()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0000" failures="0">
    <testcase name="Store merge() should merge metadata" time="0.0000" classname="should merge metadata">
    </testcase>
  </testsuite>
  <testsuite name="storeValues()" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0000" failures="0">
    <testcase name="Store storeValues() should store data" time="0.0000" classname="should store data">
    </testcase>
    <testcase name="Store storeValues() should store data" time="0.0000" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="inheritance" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0000" failures="0">
    <testcase name="Store inheritance should haven&apos;t the same sc" time="0.0000" classname="should haven&apos;t the same sc">
    </testcase>
  </testsuite>
  <testsuite name="from()" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="from Symbol" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/class/Store.spec.ts" time="0.0000" failures="0">
    <testcase name="Store from() from Symbol should create a store from Symbol" time="0.0000" classname="should create a store from Symbol">
    </testcase>
  </testsuite>
  <testsuite name="Configurable" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/decorators/configurable.spec.ts" time="0.0000" failures="0">
    <testcase name="Configurable should set attribut as configurable" time="0.0000" classname="should set attribut as configurable">
    </testcase>
    <testcase name="Configurable should set attribut as not configurable" time="0.0000" classname="should set attribut as not configurable">
    </testcase>
  </testsuite>
  <testsuite name="Deprecated" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/decorators/deprecated.spec.ts" time="0.0000" failures="0">
    <testcase name="Deprecated should wrap method as deprecated" time="0.0000" classname="should wrap method as deprecated">
    </testcase>
  </testsuite>
  <testsuite name="Enumerable" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/decorators/enumerable.spec.ts" time="0.0010" failures="0">
    <testcase name="Enumerable should have some keys with Test1" time="0.0010" classname="should have some keys with Test1">
    </testcase>
    <testcase name="Enumerable should have some keys with Test2" time="0.0000" classname="should have some keys with Test2">
    </testcase>
  </testsuite>
  <testsuite name="Writable" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/decorators/writable.spec.ts" time="0.0010" failures="0">
    <testcase name="Writable should set attribut as writable" time="0.0000" classname="should set attribut as writable">
    </testcase>
    <testcase name="Writable should set attribut as readonly" time="0.0010" classname="should set attribut as readonly">
    </testcase>
  </testsuite>
  <testsuite name="applyBefore" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/applyBefore.spec.ts" time="0.0000" failures="0">
    <testcase name="applyBefore should override the original method" time="0.0000" classname="should override the original method">
    </testcase>
  </testsuite>
  <testsuite name="DecoratorUtils" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/DecoratorUtils.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="getDecoratorType()" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/DecoratorUtils.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when short type" timestamp="2020-10-09T18:19:50" tests="10" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/DecoratorUtils.spec.ts" time="0.0000" failures="0">
    <testcase name="DecoratorUtils getDecoratorType() when short type should return class" time="0.0000" classname="should return class">
    </testcase>
    <testcase name="DecoratorUtils getDecoratorType() when short type should return property (static)" time="0.0000" classname="should return property (static)">
    </testcase>
    <testcase name="DecoratorUtils getDecoratorType() when short type should return property (instance)" time="0.0000" classname="should return property (instance)">
    </testcase>
    <testcase name="DecoratorUtils getDecoratorType() when short type should return method (instance, getter)" time="0.0000" classname="should return method (instance, getter)">
    </testcase>
    <testcase name="DecoratorUtils getDecoratorType() when short type should return method (instance, setter)" time="0.0000" classname="should return method (instance, setter)">
    </testcase>
    <testcase name="DecoratorUtils getDecoratorType() when short type should return method (static)" time="0.0000" classname="should return method (static)">
    </testcase>
    <testcase name="DecoratorUtils getDecoratorType() when short type should return method (instance)" time="0.0000" classname="should return method (instance)">
    </testcase>
    <testcase name="DecoratorUtils getDecoratorType() when short type should return params (static)" time="0.0000" classname="should return params (static)">
    </testcase>
    <testcase name="DecoratorUtils getDecoratorType() when short type should return params (instance)" time="0.0000" classname="should return params (instance)">
    </testcase>
    <testcase name="DecoratorUtils getDecoratorType() when short type should return params (constructor)" time="0.0000" classname="should return params (constructor)">
    </testcase>
  </testsuite>
  <testsuite name="when long type" timestamp="2020-10-09T18:19:50" tests="10" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/DecoratorUtils.spec.ts" time="0.0010" failures="0">
    <testcase name="DecoratorUtils getDecoratorType() when long type should return class" time="0.0000" classname="should return class">
    </testcase>
    <testcase name="DecoratorUtils getDecoratorType() when long type should return property (static)" time="0.0000" classname="should return property (static)">
    </testcase>
    <testcase name="DecoratorUtils getDecoratorType() when long type should return property (instance)" time="0.0000" classname="should return property (instance)">
    </testcase>
    <testcase name="DecoratorUtils getDecoratorType() when long type should return method (instance, getter)" time="0.0000" classname="should return method (instance, getter)">
    </testcase>
    <testcase name="DecoratorUtils getDecoratorType() when long type should return method (instance, setter)" time="0.0000" classname="should return method (instance, setter)">
    </testcase>
    <testcase name="DecoratorUtils getDecoratorType() when long type should return method (static)" time="0.0000" classname="should return method (static)">
    </testcase>
    <testcase name="DecoratorUtils getDecoratorType() when long type should return method (instance)" time="0.0000" classname="should return method (instance)">
    </testcase>
    <testcase name="DecoratorUtils getDecoratorType() when long type should return params (static)" time="0.0010" classname="should return params (static)">
    </testcase>
    <testcase name="DecoratorUtils getDecoratorType() when long type should return params (instance)" time="0.0000" classname="should return params (instance)">
    </testcase>
    <testcase name="DecoratorUtils getDecoratorType() when long type should return params (constructor)" time="0.0000" classname="should return params (constructor)">
    </testcase>
  </testsuite>
  <testsuite name="UnsupportedDecoratorType" timestamp="2020-10-09T18:19:50" tests="10" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/DecoratorUtils.spec.ts" time="0.0020" failures="0">
    <testcase name="DecoratorUtils UnsupportedDecoratorType should return class" time="0.0000" classname="should return class">
    </testcase>
    <testcase name="DecoratorUtils UnsupportedDecoratorType should return property (static)" time="0.0000" classname="should return property (static)">
    </testcase>
    <testcase name="DecoratorUtils UnsupportedDecoratorType should return property (instance)" time="0.0000" classname="should return property (instance)">
    </testcase>
    <testcase name="DecoratorUtils UnsupportedDecoratorType should return method (instance, getter)" time="0.0010" classname="should return method (instance, getter)">
    </testcase>
    <testcase name="DecoratorUtils UnsupportedDecoratorType should return method (instance, setter)" time="0.0000" classname="should return method (instance, setter)">
    </testcase>
    <testcase name="DecoratorUtils UnsupportedDecoratorType should return method (static)" time="0.0000" classname="should return method (static)">
    </testcase>
    <testcase name="DecoratorUtils UnsupportedDecoratorType should return method (instance)" time="0.0000" classname="should return method (instance)">
    </testcase>
    <testcase name="DecoratorUtils UnsupportedDecoratorType should return params (static)" time="0.0000" classname="should return params (static)">
    </testcase>
    <testcase name="DecoratorUtils UnsupportedDecoratorType should return params (instance)" time="0.0010" classname="should return params (instance)">
    </testcase>
    <testcase name="DecoratorUtils UnsupportedDecoratorType should return params (constructor)" time="0.0000" classname="should return params (constructor)">
    </testcase>
  </testsuite>
  <testsuite name="decorateMethodsOf" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/DecoratorUtils.spec.ts" time="0.0000" failures="0">
    <testcase name="DecoratorUtils decorateMethodsOf should decorate all methods" time="0.0000" classname="should decorate all methods">
    </testcase>
  </testsuite>
  <testsuite name="applyDecorators" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/DecoratorUtils.spec.ts" time="0.0000" failures="0">
    <testcase name="DecoratorUtils applyDecorators should apply all decorators" time="0.0000" classname="should apply all decorators">
    </testcase>
  </testsuite>
  <testsuite name="useDecorators" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/DecoratorUtils.spec.ts" time="0.0000" failures="0">
    <testcase name="DecoratorUtils useDecorators should apply all decorators" time="0.0000" classname="should apply all decorators">
    </testcase>
  </testsuite>
  <testsuite name="useMethodDecorators" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/DecoratorUtils.spec.ts" time="0.0000" failures="0">
    <testcase name="DecoratorUtils useMethodDecorators should apply all decorators" time="0.0000" classname="should apply all decorators">
    </testcase>
  </testsuite>
  <testsuite name="deepClone" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/deepClone.spec.ts" time="0.0010" failures="0">
    <testcase name="deepClone should clone object" time="0.0010" classname="should clone object">
    </testcase>
  </testsuite>
  <testsuite name="deepExtends" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/deepExtends.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="without reducers" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/deepExtends.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when is an object" timestamp="2020-10-09T18:19:50" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/deepExtends.spec.ts" time="0.0010" failures="0">
    <testcase name="deepExtends without reducers when is an object should merge data (1)" time="0.0000" classname="should merge data (1)">
    </testcase>
    <testcase name="deepExtends without reducers when is an object should merge data (2)" time="0.0010" classname="should merge data (2)">
    </testcase>
    <testcase name="deepExtends without reducers when is an object should merge data (3)" time="0.0000" classname="should merge data (3)">
    </testcase>
  </testsuite>
  <testsuite name="when is an array" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/deepExtends.spec.ts" time="0.0000" failures="0">
    <testcase name="deepExtends without reducers when is an array should merge data (1)" time="0.0000" classname="should merge data (1)">
    </testcase>
    <testcase name="deepExtends without reducers when is an array should merge data (2)" time="0.0000" classname="should merge data (2)">
    </testcase>
  </testsuite>
  <testsuite name="with reducers" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/deepExtends.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when is an object" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/deepExtends.spec.ts" time="0.0000" failures="0">
    <testcase name="deepExtends with reducers when is an object should merge data" time="0.0000" classname="should merge data">
    </testcase>
    <testcase name="deepExtends with reducers when is an object should merge data" time="0.0000" classname="should merge data">
    </testcase>
  </testsuite>
  <testsuite name="when is an array" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/deepExtends.spec.ts" time="0.0000" failures="0">
    <testcase name="deepExtends with reducers when is an array should merge data" time="0.0000" classname="should merge data">
    </testcase>
    <testcase name="deepExtends with reducers when is an array should merge data" time="0.0000" classname="should merge data">
    </testcase>
  </testsuite>
  <testsuite name="deepMerge" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/deepMerge.spec.ts" time="0.0010" failures="0">
    <testcase name="deepMerge should deep merge object" time="0.0010" classname="should deep merge object">
    </testcase>
  </testsuite>
  <testsuite name="getValue()" timestamp="2020-10-09T18:19:50" tests="9" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/getValue.spec.ts" time="0.0010" failures="0">
    <testcase name="getValue() should return given value when expression is undefined" time="0.0000" classname="should return given value when expression is undefined">
    </testcase>
    <testcase name="getValue() should return given value when expression is undefined 2" time="0.0000" classname="should return given value when expression is undefined 2">
    </testcase>
    <testcase name="getValue() should return given undefined when expression is given but scope doesn&apos;t have value" time="0.0000" classname="should return given undefined when expression is given but scope doesn&apos;t have value">
    </testcase>
    <testcase name="getValue() should return given value when expression is given and scope have value" time="0.0000" classname="should return given value when expression is given and scope have value">
    </testcase>
    <testcase name="getValue() should return given value when expression is given but scope have value (2)" time="0.0000" classname="should return given value when expression is given but scope have value (2)">
    </testcase>
    <testcase name="getValue() should return given value when expression is given but scope have value (3)" time="0.0000" classname="should return given value when expression is given but scope have value (3)">
    </testcase>
    <testcase name="getValue() should return given value when expression is given but scope have value (3)" time="0.0000" classname="should return given value when expression is given but scope have value (3)">
    </testcase>
    <testcase name="getValue() should return from an object with get method" time="0.0010" classname="should return from an object with get method">
    </testcase>
    <testcase name="getValue() should return undefined" time="0.0000" classname="should return undefined">
    </testcase>
  </testsuite>
  <testsuite name="ObjectUtils" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/ObjectUtils.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="getConstructor()" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/ObjectUtils.spec.ts" time="0.0000" failures="0">
    <testcase name="ObjectUtils getConstructor() should return the constructor when class is given" time="0.0000" classname="should return the constructor when class is given">
    </testcase>
    <testcase name="ObjectUtils getConstructor() should return the constructor when instance is given" time="0.0000" classname="should return the constructor when instance is given">
    </testcase>
  </testsuite>
  <testsuite name="getClass()" timestamp="2020-10-09T18:19:50" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/ObjectUtils.spec.ts" time="0.0000" failures="0">
    <testcase name="ObjectUtils getClass() should return the class when class is given" time="0.0000" classname="should return the class when class is given">
    </testcase>
    <testcase name="ObjectUtils getClass() should return the class when instance is given" time="0.0000" classname="should return the class when instance is given">
    </testcase>
    <testcase name="ObjectUtils getClass() should return the class when prototype is given" time="0.0000" classname="should return the class when prototype is given">
    </testcase>
  </testsuite>
  <testsuite name="getClassOrSymbol()" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/ObjectUtils.spec.ts" time="0.0000" failures="0">
    <testcase name="ObjectUtils getClassOrSymbol() should return the class when class is given" time="0.0000" classname="should return the class when class is given">
    </testcase>
    <testcase name="ObjectUtils getClassOrSymbol() should return the class when class is symbol" time="0.0000" classname="should return the class when class is symbol">
    </testcase>
  </testsuite>
  <testsuite name="isPrimitiveOrPrimitiveClass()" timestamp="2020-10-09T18:19:50" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/ObjectUtils.spec.ts" time="0.0000" failures="0">
    <testcase name="ObjectUtils isPrimitiveOrPrimitiveClass() should return true when a primitive is given" time="0.0000" classname="should return true when a primitive is given">
    </testcase>
    <testcase name="ObjectUtils isPrimitiveOrPrimitiveClass() should return true when a PrimitiveClass is given" time="0.0000" classname="should return true when a PrimitiveClass is given">
    </testcase>
    <testcase name="ObjectUtils isPrimitiveOrPrimitiveClass() should return false when a class is given" time="0.0000" classname="should return false when a class is given">
    </testcase>
  </testsuite>
  <testsuite name="isArrayOrArrayClass()" timestamp="2020-10-09T18:19:50" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/ObjectUtils.spec.ts" time="0.0000" failures="0">
    <testcase name="ObjectUtils isArrayOrArrayClass() should return true when Array is given" time="0.0000" classname="should return true when Array is given">
    </testcase>
    <testcase name="ObjectUtils isArrayOrArrayClass() should return true when Array is given" time="0.0000" classname="should return true when Array is given">
    </testcase>
    <testcase name="ObjectUtils isArrayOrArrayClass() should return true when [] is given" time="0.0000" classname="should return true when [] is given">
    </testcase>
    <testcase name="ObjectUtils isArrayOrArrayClass() should return false when {} is given" time="0.0000" classname="should return false when {} is given">
    </testcase>
  </testsuite>
  <testsuite name="isCollection()" timestamp="2020-10-09T18:19:50" tests="8" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/ObjectUtils.spec.ts" time="0.0000" failures="0">
    <testcase name="ObjectUtils isCollection() should return true when Array is given" time="0.0000" classname="should return true when Array is given">
    </testcase>
    <testcase name="ObjectUtils isCollection() should return true when Array is given" time="0.0000" classname="should return true when Array is given">
    </testcase>
    <testcase name="ObjectUtils isCollection() should return true when [] is given" time="0.0000" classname="should return true when [] is given">
    </testcase>
    <testcase name="ObjectUtils isCollection() should return true when Map is given" time="0.0000" classname="should return true when Map is given">
    </testcase>
    <testcase name="ObjectUtils isCollection() should return true when Set is given" time="0.0000" classname="should return true when Set is given">
    </testcase>
    <testcase name="ObjectUtils isCollection() should return true when WeakMap is given" time="0.0000" classname="should return true when WeakMap is given">
    </testcase>
    <testcase name="ObjectUtils isCollection() should return true when WeakSet is given" time="0.0000" classname="should return true when WeakSet is given">
    </testcase>
    <testcase name="ObjectUtils isCollection() should return false when {} is given" time="0.0000" classname="should return false when {} is given">
    </testcase>
  </testsuite>
  <testsuite name="isEmpty()" timestamp="2020-10-09T18:19:50" tests="6" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/ObjectUtils.spec.ts" time="0.0000" failures="0">
    <testcase name="ObjectUtils isEmpty() should return true when empty string is given" time="0.0000" classname="should return true when empty string is given">
    </testcase>
    <testcase name="ObjectUtils isEmpty() should return true when null is given" time="0.0000" classname="should return true when null is given">
    </testcase>
    <testcase name="ObjectUtils isEmpty() should return true when empty string is given" time="0.0000" classname="should return true when empty string is given">
    </testcase>
    <testcase name="ObjectUtils isEmpty() should return false when {} is given" time="0.0000" classname="should return false when {} is given">
    </testcase>
    <testcase name="ObjectUtils isEmpty() should return false when [] is given" time="0.0000" classname="should return false when [] is given">
    </testcase>
    <testcase name="ObjectUtils isEmpty() should return false when false is given" time="0.0000" classname="should return false when false is given">
    </testcase>
  </testsuite>
  <testsuite name="isClass()" timestamp="2020-10-09T18:19:50" tests="7" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/ObjectUtils.spec.ts" time="0.0000" failures="0">
    <testcase name="ObjectUtils isClass() should return true" time="0.0000" classname="should return true">
    </testcase>
    <testcase name="ObjectUtils isClass() should return true" time="0.0000" classname="should return true">
    </testcase>
    <testcase name="ObjectUtils isClass() should return false (arrow function)" time="0.0000" classname="should return false (arrow function)">
    </testcase>
    <testcase name="ObjectUtils isClass() should return false (date)" time="0.0000" classname="should return false (date)">
    </testcase>
    <testcase name="ObjectUtils isClass() should return false (number)" time="0.0000" classname="should return false (number)">
    </testcase>
    <testcase name="ObjectUtils isClass() should return false (obj)" time="0.0000" classname="should return false (obj)">
    </testcase>
    <testcase name="ObjectUtils isClass() should return false (promise)" time="0.0000" classname="should return false (promise)">
    </testcase>
  </testsuite>
  <testsuite name="isPromise()" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/ObjectUtils.spec.ts" time="0.0000" failures="0">
    <testcase name="ObjectUtils isPromise() should return true" time="0.0000" classname="should return true">
    </testcase>
    <testcase name="ObjectUtils isPromise() should return true" time="0.0000" classname="should return true">
    </testcase>
  </testsuite>
  <testsuite name="nameOf" timestamp="2020-10-09T18:19:50" tests="7" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/ObjectUtils.spec.ts" time="0.0000" failures="0">
    <testcase name="ObjectUtils nameOf should return name when class is given" time="0.0000" classname="should return name when class is given">
    </testcase>
    <testcase name="ObjectUtils nameOf should return name when symbol is given" time="0.0000" classname="should return name when symbol is given">
    </testcase>
    <testcase name="ObjectUtils nameOf should return name when string is given" time="0.0000" classname="should return name when string is given">
    </testcase>
    <testcase name="ObjectUtils nameOf should return name when string is given" time="0.0000" classname="should return name when string is given">
    </testcase>
    <testcase name="ObjectUtils nameOf should return name when string is given" time="0.0000" classname="should return name when string is given">
    </testcase>
    <testcase name="ObjectUtils nameOf should return name when null is given" time="0.0000" classname="should return name when null is given">
    </testcase>
    <testcase name="ObjectUtils nameOf should return name when undefined is given" time="0.0000" classname="should return name when undefined is given">
    </testcase>
  </testsuite>
  <testsuite name="nameOfClass" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/ObjectUtils.spec.ts" time="0.0000" failures="0">
    <testcase name="ObjectUtils nameOfClass should return name when class is given" time="0.0000" classname="should return name when class is given">
    </testcase>
    <testcase name="ObjectUtils nameOfClass should return name when instance is given" time="0.0000" classname="should return name when instance is given">
    </testcase>
  </testsuite>
  <testsuite name="primitiveOf" timestamp="2020-10-09T18:19:50" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/ObjectUtils.spec.ts" time="0.0000" failures="0">
    <testcase name="ObjectUtils primitiveOf should return string" time="0.0000" classname="should return string">
    </testcase>
    <testcase name="ObjectUtils primitiveOf should return number" time="0.0000" classname="should return number">
    </testcase>
    <testcase name="ObjectUtils primitiveOf should return boolean" time="0.0000" classname="should return boolean">
    </testcase>
    <testcase name="ObjectUtils primitiveOf should return any" time="0.0000" classname="should return any">
    </testcase>
  </testsuite>
  <testsuite name="constructorOf()" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/ObjectUtils.spec.ts" time="0.0000" failures="0">
    <testcase name="ObjectUtils constructorOf() should return the constructor when class is given" time="0.0000" classname="should return the constructor when class is given">
    </testcase>
    <testcase name="ObjectUtils constructorOf() should return the constructor when instance is given" time="0.0000" classname="should return the constructor when instance is given">
    </testcase>
  </testsuite>
  <testsuite name="classOf()" timestamp="2020-10-09T18:19:50" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/ObjectUtils.spec.ts" time="0.0000" failures="0">
    <testcase name="ObjectUtils classOf() should return the class when class is given" time="0.0000" classname="should return the class when class is given">
    </testcase>
    <testcase name="ObjectUtils classOf() should return the class when instance is given" time="0.0000" classname="should return the class when instance is given">
    </testcase>
    <testcase name="ObjectUtils classOf() should return the class when prototype is given" time="0.0000" classname="should return the class when prototype is given">
    </testcase>
  </testsuite>
  <testsuite name="ancestorsOf()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/ObjectUtils.spec.ts" time="0.0000" failures="0">
    <testcase name="ObjectUtils ancestorsOf() should returns ancestors" time="0.0000" classname="should returns ancestors">
    </testcase>
  </testsuite>
  <testsuite name="methodsOf" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/ObjectUtils.spec.ts" time="0.0000" failures="0">
    <testcase name="ObjectUtils methodsOf should return all methods" time="0.0000" classname="should return all methods">
    </testcase>
  </testsuite>
  <testsuite name="isInheritedFrom" timestamp="2020-10-09T18:19:50" tests="5" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/ObjectUtils.spec.ts" time="0.0010" failures="0">
    <testcase name="ObjectUtils isInheritedFrom should return true when class inherit from another" time="0.0010" classname="should return true when class inherit from another">
    </testcase>
    <testcase name="ObjectUtils isInheritedFrom should return false when deep is down" time="0.0000" classname="should return false when deep is down">
    </testcase>
    <testcase name="ObjectUtils isInheritedFrom should return true when deep is not down" time="0.0000" classname="should return true when deep is not down">
    </testcase>
    <testcase name="ObjectUtils isInheritedFrom should return false when class isn&apos;t inherit from another" time="0.0000" classname="should return false when class isn&apos;t inherit from another">
    </testcase>
    <testcase name="ObjectUtils isInheritedFrom should return false when undefined is given" time="0.0000" classname="should return false when undefined is given">
    </testcase>
  </testsuite>
  <testsuite name="proxyDelegation" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/proxyDelegation.spec.ts" time="0.0010" failures="0">
    <testcase name="proxyDelegation should create proxy delegation with internal map" time="0.0010" classname="should create proxy delegation with internal map">
    </testcase>
  </testsuite>
  <testsuite name="setValue()" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/setValue.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when map" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/setValue.spec.ts" time="0.0000" failures="0">
    <testcase name="setValue() when map should set value" time="0.0000" classname="should set value">
    </testcase>
  </testsuite>
  <testsuite name="when map with dep" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/setValue.spec.ts" time="0.0000" failures="0">
    <testcase name="setValue() when map with dep should set value" time="0.0000" classname="should set value">
    </testcase>
  </testsuite>
  <testsuite name="when map with dep (without defined value)" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/setValue.spec.ts" time="0.0000" failures="0">
    <testcase name="setValue() when map with dep (without defined value) should set value" time="0.0000" classname="should set value">
    </testcase>
  </testsuite>
  <testsuite name="when object with dep (without defined value)" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/core/src/utils/setValue.spec.ts" time="0.0000" failures="0">
    <testcase name="setValue() when object with dep (without defined value) should set value" time="0.0000" classname="should set value">
    </testcase>
  </testsuite>
  <testsuite name="Container" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/class/Container.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="getProvider()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/class/Container.spec.ts" time="0.0010" failures="0">
    <testcase name="Container getProvider() should return a provider" time="0.0010" classname="should return a provider">
    </testcase>
  </testsuite>
  <testsuite name="getProviders()" timestamp="2020-10-09T18:19:50" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/class/Container.spec.ts" time="0.0000" failures="0">
    <testcase name="Container getProviders() should return middlewares only" time="0.0000" classname="should return middlewares only">
    </testcase>
    <testcase name="Container getProviders() should return controllers only" time="0.0000" classname="should return controllers only">
    </testcase>
    <testcase name="Container getProviders() should return all providers" time="0.0000" classname="should return all providers">
    </testcase>
  </testsuite>
  <testsuite name="addProviders()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/class/Container.spec.ts" time="0.0010" failures="0">
    <testcase name="Container addProviders() should add providers" time="0.0010" classname="should add providers">
    </testcase>
  </testsuite>
  <testsuite name="LocalsContainer" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/class/LocalsContainer.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="destroy()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/class/LocalsContainer.spec.ts" time="0.0010" failures="0">
    <testcase name="LocalsContainer destroy() should destroy container" time="0.0010" classname="should destroy container">
    </testcase>
  </testsuite>
  <testsuite name="Provider" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/class/Provider.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when is a class" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/class/Provider.spec.ts" time="0.0010" failures="0">
    <testcase name="Provider when is a class should wrap the token provided" time="0.0010" classname="should wrap the token provided">
    </testcase>
  </testsuite>
  <testsuite name="when is a symbol" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/class/Provider.spec.ts" time="0.0000" failures="0">
    <testcase name="Provider when is a symbol should wrap the token provided" time="0.0000" classname="should wrap the token provided">
    </testcase>
  </testsuite>
  <testsuite name="when is a string" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/class/Provider.spec.ts" time="0.0000" failures="0">
    <testcase name="Provider when is a string should wrap the token provided" time="0.0000" classname="should wrap the token provided">
    </testcase>
  </testsuite>
  <testsuite name="clone()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/class/Provider.spec.ts" time="0.0000" failures="0">
    <testcase name="Provider clone() should clone a provider" time="0.0000" classname="should clone a provider">
    </testcase>
  </testsuite>
  <testsuite name="className" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/class/Provider.spec.ts" time="0.0000" failures="0">
    <testcase name="Provider className should return the class name" time="0.0000" classname="should return the class name">
    </testcase>
    <testcase name="Provider className should return the symbol name" time="0.0000" classname="should return the symbol name">
    </testcase>
  </testsuite>
  <testsuite name="name" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/class/Provider.spec.ts" time="0.0000" failures="0">
    <testcase name="Provider name should return the class name" time="0.0000" classname="should return the class name">
    </testcase>
  </testsuite>
  <testsuite name="toString()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/class/Provider.spec.ts" time="0.0000" failures="0">
    <testcase name="Provider toString() should return the class name" time="0.0000" classname="should return the class name">
    </testcase>
  </testsuite>
  <testsuite name="isAsync()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/class/Provider.spec.ts" time="0.0010" failures="0">
    <testcase name="Provider isAsync() should return true" time="0.0010" classname="should return true">
    </testcase>
  </testsuite>
  <testsuite name="@Configuration" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/decorators/configuration.spec.ts" time="0.0010" failures="0">
    <testcase name="@Configuration should declare a new provider with custom configuration" time="0.0000" classname="should declare a new provider with custom configuration">
    </testcase>
    <testcase name="@Configuration should inject configuration" time="0.0010" classname="should inject configuration">
    </testcase>
  </testsuite>
  <testsuite name="@Constant()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/decorators/constant.spec.ts" time="0.0000" failures="0">
    <testcase name="@Constant() should store metadata" time="0.0000" classname="should store metadata">
    </testcase>
  </testsuite>
  <testsuite name="@Inject()" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/decorators/inject.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="used on unsupported decorator type" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/decorators/inject.spec.ts" time="0.0000" failures="0">
    <testcase name="@Inject() used on unsupported decorator type should store metadata" time="0.0000" classname="should store metadata">
    </testcase>
  </testsuite>
  <testsuite name="used on method" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/decorators/inject.spec.ts" time="0.0000" failures="0">
    <testcase name="@Inject() used on method should store metadata" time="0.0000" classname="should store metadata">
    </testcase>
  </testsuite>
  <testsuite name="used on property" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/decorators/inject.spec.ts" time="0.0000" failures="0">
    <testcase name="@Inject() used on property should store metadata" time="0.0000" classname="should store metadata">
    </testcase>
  </testsuite>
  <testsuite name="used on constructor/params" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/decorators/inject.spec.ts" time="0.0010" failures="0">
    <testcase name="@Inject() used on constructor/params should call Metadata.getParamTypes()" time="0.0010" classname="should call Metadata.getParamTypes()">
    </testcase>
  </testsuite>
  <testsuite name="used on method/params" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/decorators/inject.spec.ts" time="0.0000" failures="0">
    <testcase name="@Inject() used on method/params should call Metadata.getParamTypes()" time="0.0000" classname="should call Metadata.getParamTypes()">
    </testcase>
  </testsuite>
  <testsuite name="@Injectable()" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/decorators/injectable.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with options" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/decorators/injectable.spec.ts" time="0.0000" failures="0">
    <testcase name="@Injectable() with options should called registerProvider" time="0.0000" classname="should called registerProvider">
    </testcase>
  </testsuite>
  <testsuite name="without options" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/decorators/injectable.spec.ts" time="0.0010" failures="0">
    <testcase name="@Injectable() without options should called registerProvider" time="0.0010" classname="should called registerProvider">
    </testcase>
  </testsuite>
  <testsuite name="@Intercept" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/decorators/intercept.spec.ts" time="0.0000" failures="0">
    <testcase name="@Intercept should store metadata" time="0.0000" classname="should store metadata">
    </testcase>
  </testsuite>
  <testsuite name="@Interceptor" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/decorators/Interceptor.spec.ts" time="0.0010" failures="0">
    <testcase name="@Interceptor should set metadata" time="0.0010" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="OverrideProvider" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/decorators/overrideProvider.spec.ts" time="0.0010" failures="0">
    <testcase name="OverrideProvider should use OverrideProvider" time="0.0010" classname="should use OverrideProvider">
    </testcase>
  </testsuite>
  <testsuite name="Scope" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/decorators/scope.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when parameters is given" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/decorators/scope.spec.ts" time="0.0000" failures="0">
    <testcase name="Scope when parameters is given should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="when parameters is not given" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/decorators/scope.spec.ts" time="0.0000" failures="0">
    <testcase name="Scope when parameters is not given should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="Service" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/decorators/service.spec.ts" time="0.0000" failures="0">
    <testcase name="Service should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="UseOpts" timestamp="2020-10-09T18:19:50" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/decorators/useOpts.spec.ts" time="0.0030" failures="0">
    <testcase name="UseOpts should inject provider with options" time="0.0020" classname="should inject provider with options">
    </testcase>
    <testcase name="UseOpts should invoke a service which use a configurable provider" time="0.0000" classname="should invoke a service which use a configurable provider">
    </testcase>
    <testcase name="UseOpts should store metadata" time="0.0010" classname="should store metadata">
    </testcase>
  </testsuite>
  <testsuite name="@Value()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/decorators/value.spec.ts" time="0.0000" failures="0">
    <testcase name="@Value() should store metadata" time="0.0000" classname="should store metadata">
    </testcase>
  </testsuite>
  <testsuite name="InjectionError" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/errors/InjectionError.spec.ts" time="0.0020" failures="0">
    <testcase name="InjectionError should create new instance of InjectionError (1)" time="0.0010" classname="should create new instance of InjectionError (1)">
    </testcase>
    <testcase name="InjectionError should create new instance of InjectionError (2)" time="0.0010" classname="should create new instance of InjectionError (2)">
    </testcase>
  </testsuite>
  <testsuite name="GlobalProviderRegistry" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/registries/GlobalProviders.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="createRegistry()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/registries/GlobalProviders.spec.ts" time="0.0000" failures="0">
    <testcase name="GlobalProviderRegistry createRegistry() should create registry" time="0.0000" classname="should create registry">
    </testcase>
  </testsuite>
  <testsuite name="getRegistrySettings()" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/registries/GlobalProviders.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when type is a string" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/registries/GlobalProviders.spec.ts" time="0.0010" failures="0">
    <testcase name="GlobalProviderRegistry getRegistrySettings() when type is a string should return registry settings" time="0.0010" classname="should return registry settings">
    </testcase>
  </testsuite>
  <testsuite name="when type is a Type" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/registries/GlobalProviders.spec.ts" time="0.0000" failures="0">
    <testcase name="GlobalProviderRegistry getRegistrySettings() when type is a Type should return registry settings" time="0.0000" classname="should return registry settings">
    </testcase>
  </testsuite>
  <testsuite name="when type is a string but is unknow" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/registries/GlobalProviders.spec.ts" time="0.0010" failures="0">
    <testcase name="GlobalProviderRegistry getRegistrySettings() when type is a string but is unknow should not call providers.get" time="0.0010" classname="should not call providers.get">
    </testcase>
  </testsuite>
  <testsuite name="createRegisterFn()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/registries/GlobalProviders.spec.ts" time="0.0030" failures="0">
    <testcase name="GlobalProviderRegistry createRegisterFn() should create a register function" time="0.0030" classname="should create a register function">
    </testcase>
  </testsuite>
  <testsuite name="getRegistry()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/registries/GlobalProviders.spec.ts" time="0.0000" failures="0">
    <testcase name="GlobalProviderRegistry getRegistry() should call getRegistrySettings and return the registry" time="0.0000" classname="should call getRegistrySettings and return the registry">
    </testcase>
  </testsuite>
  <testsuite name="ProviderRegistry" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/registries/ProviderRegistry.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="registerProvider()" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/registries/ProviderRegistry.spec.ts" time="0.0010" failures="0">
    <testcase name="ProviderRegistry registerProvider() should throw an error when provide field is not given " time="0.0000" classname="should throw an error when provide field is not given ">
    </testcase>
    <testcase name="ProviderRegistry registerProvider() should add provider" time="0.0010" classname="should add provider">
    </testcase>
  </testsuite>
  <testsuite name="registerValue()" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/registries/ProviderRegistry.spec.ts" time="0.0000" failures="0">
    <testcase name="ProviderRegistry registerValue() should add provider (1)" time="0.0000" classname="should add provider (1)">
    </testcase>
    <testcase name="ProviderRegistry registerValue() should add provider" time="0.0000" classname="should add provider">
    </testcase>
  </testsuite>
  <testsuite name="registerFactory()" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/registries/ProviderRegistry.spec.ts" time="0.0000" failures="0">
    <testcase name="ProviderRegistry registerFactory() should add provider (1)" time="0.0000" classname="should add provider (1)">
    </testcase>
    <testcase name="ProviderRegistry registerFactory() should add provider (2)" time="0.0000" classname="should add provider (2)">
    </testcase>
  </testsuite>
  <testsuite name="DIConfiguration" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/DIConfiguration.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="merge()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/DIConfiguration.spec.ts" time="0.0000" failures="0">
    <testcase name="DIConfiguration merge() should merge object" time="0.0000" classname="should merge object">
    </testcase>
  </testsuite>
  <testsuite name="scopes()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/DIConfiguration.spec.ts" time="0.0000" failures="0">
    <testcase name="DIConfiguration scopes() should get scopes" time="0.0000" classname="should get scopes">
    </testcase>
  </testsuite>
  <testsuite name="imports()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/DIConfiguration.spec.ts" time="0.0000" failures="0">
    <testcase name="DIConfiguration imports() should get imports" time="0.0000" classname="should get imports">
    </testcase>
  </testsuite>
  <testsuite name="resolvers()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/DIConfiguration.spec.ts" time="0.0000" failures="0">
    <testcase name="DIConfiguration resolvers() should get resolvers" time="0.0000" classname="should get resolvers">
    </testcase>
  </testsuite>
  <testsuite name="proxy" timestamp="2020-10-09T18:19:50" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/DIConfiguration.spec.ts" time="0.0010" failures="0">
    <testcase name="DIConfiguration proxy should set and get data" time="0.0000" classname="should set and get data">
    </testcase>
    <testcase name="DIConfiguration proxy ownKeys" time="0.0000" classname="ownKeys">
    </testcase>
    <testcase name="DIConfiguration proxy defineProperty" time="0.0010" classname="defineProperty">
    </testcase>
  </testsuite>
  <testsuite name="InjectorService" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="has()" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0000" failures="0">
    <testcase name="InjectorService has() should return true" time="0.0000" classname="should return true">
    </testcase>
    <testcase name="InjectorService has() should return false" time="0.0000" classname="should return false">
    </testcase>
  </testsuite>
  <testsuite name="get()" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0000" failures="0">
    <testcase name="InjectorService get() should return element" time="0.0000" classname="should return element">
    </testcase>
    <testcase name="InjectorService get() should return undefined" time="0.0000" classname="should return undefined">
    </testcase>
  </testsuite>
  <testsuite name="toArray()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0010" failures="0">
    <testcase name="InjectorService toArray() should return instances" time="0.0010" classname="should return instances">
    </testcase>
  </testsuite>
  <testsuite name="forkProvider()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0000" failures="0">
    <testcase name="InjectorService forkProvider() should return a provider" time="0.0000" classname="should return a provider">
    </testcase>
  </testsuite>
  <testsuite name="invoke()" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when we call invoke with rebuild options (SINGLETON)" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0020" failures="0">
    <testcase name="InjectorService invoke() when we call invoke with rebuild options (SINGLETON) should invoke the provider from container" time="0.0020" classname="should invoke the provider from container">
    </testcase>
  </testsuite>
  <testsuite name="when provider is a SINGLETON" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0010" failures="0">
    <testcase name="InjectorService invoke() when provider is a SINGLETON should invoke the provider from container" time="0.0010" classname="should invoke the provider from container">
    </testcase>
  </testsuite>
  <testsuite name="when provider is a REQUEST" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0010" failures="0">
    <testcase name="InjectorService invoke() when provider is a REQUEST should invoke a request from local container" time="0.0010" classname="should invoke a request from local container">
    </testcase>
  </testsuite>
  <testsuite name="when provider is a INSTANCE" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0010" failures="0">
    <testcase name="InjectorService invoke() when provider is a INSTANCE should invoke a new instance" time="0.0010" classname="should invoke a new instance">
    </testcase>
  </testsuite>
  <testsuite name="when provider is a SINGLETON" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0010" failures="0">
    <testcase name="InjectorService invoke() when provider is a SINGLETON should invoke the provider from container" time="0.0010" classname="should invoke the provider from container">
    </testcase>
  </testsuite>
  <testsuite name="when provider is a Value (useValue)" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0000" failures="0">
    <testcase name="InjectorService invoke() when provider is a Value (useValue) should invoke the provider from container (1)" time="0.0000" classname="should invoke the provider from container (1)">
    </testcase>
    <testcase name="InjectorService invoke() when provider is a Value (useValue) should invoke the provider from container (2)" time="0.0000" classname="should invoke the provider from container (2)">
    </testcase>
  </testsuite>
  <testsuite name="when provider is a Factory (useFactory)" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0010" failures="0">
    <testcase name="InjectorService invoke() when provider is a Factory (useFactory) should invoke the provider from container" time="0.0010" classname="should invoke the provider from container">
    </testcase>
  </testsuite>
  <testsuite name="when provider is an AsyncFactory (useAsyncFactory)" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0010" failures="0">
    <testcase name="InjectorService invoke() when provider is an AsyncFactory (useAsyncFactory) should invoke the provider from container" time="0.0010" classname="should invoke the provider from container">
    </testcase>
  </testsuite>
  <testsuite name="when provider is an unknow provider" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0000" failures="0">
    <testcase name="InjectorService invoke() when provider is an unknow provider should invoke the class from given parameter" time="0.0000" classname="should invoke the class from given parameter">
    </testcase>
  </testsuite>
  <testsuite name="when one of dependencies isn&apos;t injectable" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0240" failures="0">
    <testcase name="InjectorService invoke() when one of dependencies isn&apos;t injectable should throw InjectionError" time="0.0240" classname="should throw InjectionError">
    </testcase>
  </testsuite>
  <testsuite name="when one of dependencies is undefined" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0030" failures="0">
    <testcase name="InjectorService invoke() when one of dependencies is undefined should throw InjectionError &gt; UndefinedTokenError" time="0.0010" classname="should throw InjectionError &gt; UndefinedTokenError">
    </testcase>
    <testcase name="InjectorService invoke() when one of dependencies is undefined should throw InjectionError &gt; Object" time="0.0020" classname="should throw InjectionError &gt; Object">
    </testcase>
  </testsuite>
  <testsuite name="when error occur" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0010" failures="0">
    <testcase name="InjectorService invoke() when error occur should throw InjectionError" time="0.0010" classname="should throw InjectionError">
    </testcase>
  </testsuite>
  <testsuite name="when provider has Provider as dependencies" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0000" failures="0">
    <testcase name="InjectorService invoke() when provider has Provider as dependencies should inject Provider" time="0.0000" classname="should inject Provider">
    </testcase>
  </testsuite>
  <testsuite name="when provider has Configuration as dependencies" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0010" failures="0">
    <testcase name="InjectorService invoke() when provider has Configuration as dependencies should inject Provider" time="0.0010" classname="should inject Provider">
    </testcase>
  </testsuite>
  <testsuite name="bindInjectableProperties()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0010" failures="0">
    <testcase name="InjectorService bindInjectableProperties() should bind all properties" time="0.0010" classname="should bind all properties">
    </testcase>
  </testsuite>
  <testsuite name="bindMethod()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0010" failures="0">
    <testcase name="InjectorService bindMethod() should bind the method" time="0.0010" classname="should bind the method">
    </testcase>
  </testsuite>
  <testsuite name="bindProperty()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0000" failures="0">
    <testcase name="InjectorService bindProperty() should bind the method" time="0.0000" classname="should bind the method">
    </testcase>
  </testsuite>
  <testsuite name="bindValue()" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0000" failures="0">
    <testcase name="InjectorService bindValue() should bind a property with a value (1)" time="0.0000" classname="should bind a property with a value (1)">
    </testcase>
    <testcase name="InjectorService bindValue() should bind a property with a value (2)" time="0.0000" classname="should bind a property with a value (2)">
    </testcase>
  </testsuite>
  <testsuite name="bindConstant()" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0010" failures="0">
    <testcase name="InjectorService bindConstant() should bind a property with a value (1)" time="0.0010" classname="should bind a property with a value (1)">
    </testcase>
    <testcase name="InjectorService bindConstant() should bind a property with a value (2)" time="0.0000" classname="should bind a property with a value (2)">
    </testcase>
  </testsuite>
  <testsuite name="bindInterceptor()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0010" failures="0">
    <testcase name="InjectorService bindInterceptor() should bind the method with intercept" time="0.0010" classname="should bind the method with intercept">
    </testcase>
  </testsuite>
  <testsuite name="resolveConfiguration()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0010" failures="0">
    <testcase name="InjectorService resolveConfiguration() should load configuration from each providers" time="0.0010" classname="should load configuration from each providers">
    </testcase>
  </testsuite>
  <testsuite name="resolvers" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/src/services/InjectorService.spec.ts" time="0.0010" failures="0">
    <testcase name="InjectorService resolvers should load all providers with the SINGLETON scope only" time="0.0010" classname="should load all providers with the SINGLETON scope only">
    </testcase>
  </testsuite>
  <testsuite name="DI" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/test/integration/configuration.spec.ts" time="0.0010" failures="0">
    <testcase name="DI should merge DI configuration" time="0.0010" classname="should merge DI configuration">
    </testcase>
  </testsuite>
  <testsuite name="DI" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/test/integration/di.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="create new injector" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/test/integration/di.spec.ts" time="0.0010" failures="0">
    <testcase name="DI create new injector should load all providers with the SINGLETON scope only" time="0.0010" classname="should load all providers with the SINGLETON scope only">
    </testcase>
  </testsuite>
  <testsuite name="it should invoke service with abstract class" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/test/integration/di.spec.ts" time="0.0010" failures="0">
    <testcase name="DI it should invoke service with abstract class should inject the expected class" time="0.0010" classname="should inject the expected class">
    </testcase>
  </testsuite>
  <testsuite name="DI Interceptor" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/test/integration/interceptor.spec.ts" time="0.0010" failures="0">
    <testcase name="DI Interceptor should intercept the method" time="0.0000" classname="should intercept the method">
    </testcase>
    <testcase name="DI Interceptor should intercept the method and throw error" time="0.0010" classname="should intercept the method and throw error">
    </testcase>
  </testsuite>
  <testsuite name="DI Request" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/test/integration/request.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when invoke a service declared as REQUEST" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/test/integration/request.spec.ts" time="0.0010" failures="0">
    <testcase name="DI Request when invoke a service declared as REQUEST should get a new instance of ServiceRequest" time="0.0010" classname="should get a new instance of ServiceRequest">
    </testcase>
  </testsuite>
  <testsuite name="DI Resolvers" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/test/integration/resolvers.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="create new injector" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/test/integration/resolvers.spec.ts" time="0.0010" failures="0">
    <testcase name="DI Resolvers create new injector should load all providers with the SINGLETON scope only" time="0.0010" classname="should load all providers with the SINGLETON scope only">
    </testcase>
  </testsuite>
  <testsuite name="DI Singleton" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/test/integration/singleton.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when it has a SINGLETON dependency" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/test/integration/singleton.spec.ts" time="0.0010" failures="0">
    <testcase name="DI Singleton when it has a SINGLETON dependency should get the service instance" time="0.0010" classname="should get the service instance">
    </testcase>
  </testsuite>
  <testsuite name="when it has a REQUEST dependency" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/test/integration/singleton.spec.ts" time="0.0000" failures="0">
    <testcase name="DI Singleton when it has a REQUEST dependency should get the instance and REQUEST dependency should be considered as local SINGLETON" time="0.0000" classname="should get the instance and REQUEST dependency should be considered as local SINGLETON">
    </testcase>
  </testsuite>
  <testsuite name="when it has a INSTANCE dependency" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/di/test/integration/singleton.spec.ts" time="0.0000" failures="0">
    <testcase name="DI Singleton when it has a INSTANCE dependency should get the service instance" time="0.0000" classname="should get the service instance">
    </testcase>
  </testsuite>
  <testsuite name="Exception" timestamp="2020-10-09T18:19:50" tests="5" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/src/core/Exception.spec.ts" time="0.0000" failures="0">
    <testcase name="Exception should use origin" time="0.0000" classname="should use origin">
    </testcase>
    <testcase name="Exception should use origin" time="0.0000" classname="should use origin">
    </testcase>
    <testcase name="Exception should use origin as string" time="0.0000" classname="should use origin as string">
    </testcase>
    <testcase name="Exception should use origin as string" time="0.0000" classname="should use origin as string">
    </testcase>
    <testcase name="Exception should return empty message when message parameters is undefined" time="0.0000" classname="should return empty message when message parameters is undefined">
    </testcase>
  </testsuite>
  <testsuite name="ClientErrors" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="BadMapping" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors BadMapping should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="BadRequest" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors BadRequest should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="Conflict" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors Conflict should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="ExpectationFailed" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors ExpectationFailed should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="Forbidden" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors Forbidden should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="Gone" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors Gone should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="ImATeapot" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors ImATeapot should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="LengthRequired" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors LengthRequired should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="MethodNotAllowed" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors MethodNotAllowed should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="MisdirectedRequest" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0010" failures="0">
    <testcase name="ClientErrors MisdirectedRequest should emit an exception" time="0.0010" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="NotAcceptable" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors NotAcceptable should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="LengthRequired" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors LengthRequired should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="PaymentRequired" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0010" failures="0">
    <testcase name="ClientErrors PaymentRequired should emit an exception" time="0.0010" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="PreconditionFailed" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors PreconditionFailed should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="PreconditionRequired" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors PreconditionRequired should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="ProxyAuthentificationRequired" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors ProxyAuthentificationRequired should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="RequestedRangeUnsatisfiable" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors RequestedRangeUnsatisfiable should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="RequestEntityTooLarge" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors RequestEntityTooLarge should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="RequestHeaderFieldsTooLarge" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors RequestHeaderFieldsTooLarge should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="RequestTimeout" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors RequestTimeout should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="RequestURITooLong" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors RequestURITooLong should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="TooManyRequests" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors TooManyRequests should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="Unauthorized" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0010" failures="0">
    <testcase name="ClientErrors Unauthorized should emit an exception" time="0.0010" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="UnavailabledForLegalReasons" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors UnavailabledForLegalReasons should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="UnusupportedMediaType" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors UnusupportedMediaType should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="UpgradeRequired" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors UpgradeRequired should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="UnprocessableEntity" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/clientErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ClientErrors UnprocessableEntity should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="Redirections" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/redirections.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="MovedPermanently" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/redirections.spec.ts" time="0.0000" failures="0">
    <testcase name="Redirections MovedPermanently should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="MovedTemporarily" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/redirections.spec.ts" time="0.0000" failures="0">
    <testcase name="Redirections MovedTemporarily should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="MultipleChoices" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/redirections.spec.ts" time="0.0000" failures="0">
    <testcase name="Redirections MultipleChoices should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="NotModified" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/redirections.spec.ts" time="0.0000" failures="0">
    <testcase name="Redirections NotModified should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="PermanentRedirect" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/redirections.spec.ts" time="0.0000" failures="0">
    <testcase name="Redirections PermanentRedirect should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="SeeOther" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/redirections.spec.ts" time="0.0010" failures="0">
    <testcase name="Redirections SeeOther should emit an exception" time="0.0010" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="TemporaryRedirect" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/redirections.spec.ts" time="0.0000" failures="0">
    <testcase name="Redirections TemporaryRedirect should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="TooManyRedirect" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/redirections.spec.ts" time="0.0000" failures="0">
    <testcase name="Redirections TooManyRedirect should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="UseProxy" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/redirections.spec.ts" time="0.0000" failures="0">
    <testcase name="Redirections UseProxy should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="ServerErrors" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/serverErrors.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="BadGateway" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/serverErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ServerErrors BadGateway should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="BandwidthLimitExceeded" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/serverErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ServerErrors BandwidthLimitExceeded should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="GatewayTimeout" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/serverErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ServerErrors GatewayTimeout should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="InternalServerError" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/serverErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ServerErrors InternalServerError should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="NetworkAuthentificationRequired" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/serverErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ServerErrors NetworkAuthentificationRequired should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="NotExtended" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/serverErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ServerErrors NotExtended should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="NotImplemented" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/serverErrors.spec.ts" time="0.0010" failures="0">
    <testcase name="ServerErrors NotImplemented should emit an exception" time="0.0010" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="ProxyError" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/serverErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ServerErrors ProxyError should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="ServiceUnvailable" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/serverErrors.spec.ts" time="0.0000" failures="0">
    <testcase name="ServerErrors ServiceUnvailable should emit an exception" time="0.0000" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="VariantAlsoNegotiates" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/exceptions/test/serverErrors.spec.ts" time="0.0010" failures="0">
    <testcase name="ServerErrors VariantAlsoNegotiates should emit an exception" time="0.0010" classname="should emit an exception">
    </testcase>
  </testsuite>
  <testsuite name="GraphQLService" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/graphql/src/services/GraphQLService.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="createServer()" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/graphql/src/services/GraphQLService.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when server options isn&apos;t given" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/graphql/src/services/GraphQLService.spec.ts" time="0.0010" failures="0">
    <testcase name="GraphQLService createServer() when server options isn&apos;t given should create a server" time="0.0010" classname="should create a server">
    </testcase>
  </testsuite>
  <testsuite name="when server options is given" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/graphql/src/services/GraphQLService.spec.ts" time="0.0010" failures="0">
    <testcase name="GraphQLService createServer() when server options is given should create a custom server" time="0.0010" classname="should create a custom server">
    </testcase>
  </testsuite>
  <testsuite name="getSchema()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/graphql/src/services/GraphQLService.spec.ts" time="0.0010" failures="0">
    <testcase name="GraphQLService getSchema() should create a server" time="0.0010" classname="should create a server">
    </testcase>
  </testsuite>
  <testsuite name="createDataSources" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/graphql/src/services/GraphQLService.spec.ts" time="0.0220" failures="0">
    <testcase name="GraphQLService createDataSources should return a function with all dataSources" time="0.0220" classname="should return a function with all dataSources">
    </testcase>
    <testcase name="GraphQLService createDataSources should do nothing" time="0.0000" classname="should do nothing">
    </testcase>
  </testsuite>
  <testsuite name="getDataSources" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/graphql/src/services/GraphQLService.spec.ts" time="0.0000" failures="0">
    <testcase name="GraphQLService getDataSources should return a function with all dataSources" time="0.0000" classname="should return a function with all dataSources">
    </testcase>
  </testsuite>
  <testsuite name="GraphQL" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/graphql/test/graphql.spec.ts" time="0.0050" failures="0">
    <testcase name="GraphQL should get recipes" time="0.0050" classname="should get recipes">
    </testcase>
  </testsuite>
  <testsuite name="ArrayMapper" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/components/ArrayMapper.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="deserialize()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/components/ArrayMapper.spec.ts" time="0.0000" failures="0">
    <testcase name="ArrayMapper deserialize() should return value" time="0.0000" classname="should return value">
    </testcase>
  </testsuite>
  <testsuite name="serialize()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/components/ArrayMapper.spec.ts" time="0.0000" failures="0">
    <testcase name="ArrayMapper serialize() should return value" time="0.0000" classname="should return value">
    </testcase>
  </testsuite>
  <testsuite name="DateMapper" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/components/DateMapper.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="deserialize()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/components/DateMapper.spec.ts" time="0.0000" failures="0">
    <testcase name="DateMapper deserialize() should return value" time="0.0000" classname="should return value">
    </testcase>
  </testsuite>
  <testsuite name="serialize()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/components/DateMapper.spec.ts" time="0.0000" failures="0">
    <testcase name="DateMapper serialize() should return value" time="0.0000" classname="should return value">
    </testcase>
  </testsuite>
  <testsuite name="MapMapper" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/components/MapMapper.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="deserialize()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/components/MapMapper.spec.ts" time="0.0000" failures="0">
    <testcase name="MapMapper deserialize() should return value" time="0.0000" classname="should return value">
    </testcase>
  </testsuite>
  <testsuite name="serialize()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/components/MapMapper.spec.ts" time="0.0000" failures="0">
    <testcase name="MapMapper serialize() should return value" time="0.0000" classname="should return value">
    </testcase>
  </testsuite>
  <testsuite name="PrimitiveMapper" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/components/PrimitiveMapper.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="deserialize()" timestamp="2020-10-09T18:19:50" tests="10" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/components/PrimitiveMapper.spec.ts" time="0.0010" failures="0">
    <testcase name="PrimitiveMapper deserialize() should return value (number =&gt; string)" time="0.0000" classname="should return value (number =&gt; string)">
    </testcase>
    <testcase name="PrimitiveMapper deserialize() should return value (string =&gt; string)" time="0.0000" classname="should return value (string =&gt; string)">
    </testcase>
    <testcase name="PrimitiveMapper deserialize() should return value (null =&gt; number)" time="0.0000" classname="should return value (null =&gt; number)">
    </testcase>
    <testcase name="PrimitiveMapper deserialize() should return value (&apos;null&apos; =&gt; number)" time="0.0000" classname="should return value (&apos;null&apos; =&gt; number)">
    </testcase>
    <testcase name="PrimitiveMapper deserialize() should return value (string =&gt; number)" time="0.0000" classname="should return value (string =&gt; number)">
    </testcase>
    <testcase name="PrimitiveMapper deserialize() should return value (number =&gt; number)" time="0.0000" classname="should return value (number =&gt; number)">
    </testcase>
    <testcase name="PrimitiveMapper deserialize() should return value (wrong number =&gt; number)" time="0.0000" classname="should return value (wrong number =&gt; number)">
    </testcase>
    <testcase name="PrimitiveMapper deserialize() should return value (truthy =&gt; boolean)" time="0.0000" classname="should return value (truthy =&gt; boolean)">
    </testcase>
    <testcase name="PrimitiveMapper deserialize() should return value (falsy =&gt; boolean)" time="0.0010" classname="should return value (falsy =&gt; boolean)">
    </testcase>
    <testcase name="PrimitiveMapper deserialize() should return value (null =&gt; boolean)" time="0.0000" classname="should return value (null =&gt; boolean)">
    </testcase>
  </testsuite>
  <testsuite name="serialize()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/components/PrimitiveMapper.spec.ts" time="0.0000" failures="0">
    <testcase name="PrimitiveMapper serialize() should return value" time="0.0000" classname="should return value">
    </testcase>
  </testsuite>
  <testsuite name="SetMapper" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/components/SetMapper.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="deserialize()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/components/SetMapper.spec.ts" time="0.0010" failures="0">
    <testcase name="SetMapper deserialize() should return value" time="0.0010" classname="should return value">
    </testcase>
  </testsuite>
  <testsuite name="serialize()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/components/SetMapper.spec.ts" time="0.0000" failures="0">
    <testcase name="SetMapper serialize() should return value" time="0.0000" classname="should return value">
    </testcase>
  </testsuite>
  <testsuite name="SymbolMapper" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/components/SymbolMapper.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="deserialize()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/components/SymbolMapper.spec.ts" time="0.0010" failures="0">
    <testcase name="SymbolMapper deserialize() should return value" time="0.0010" classname="should return value">
    </testcase>
  </testsuite>
  <testsuite name="serialize()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/components/SymbolMapper.spec.ts" time="0.0000" failures="0">
    <testcase name="SymbolMapper serialize() should return value" time="0.0000" classname="should return value">
    </testcase>
  </testsuite>
  <testsuite name="deserialize()" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/utils/deserialize.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Primitive" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/utils/deserialize.spec.ts" time="0.0010" failures="0">
    <testcase name="deserialize() Primitive should convert value" time="0.0010" classname="should convert value">
    </testcase>
  </testsuite>
  <testsuite name="Array&lt;primitive&gt;" timestamp="2020-10-09T18:19:50" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/utils/deserialize.spec.ts" time="0.0000" failures="0">
    <testcase name="deserialize() Array&lt;primitive&gt; should transform value" time="0.0000" classname="should transform value">
    </testcase>
    <testcase name="deserialize() Array&lt;primitive&gt; should cast object to array" time="0.0000" classname="should cast object to array">
    </testcase>
    <testcase name="deserialize() Array&lt;primitive&gt; should deserialize with custom options" time="0.0000" classname="should deserialize with custom options">
    </testcase>
  </testsuite>
  <testsuite name="Map&lt;string, primitive&gt;" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/utils/deserialize.spec.ts" time="0.0010" failures="0">
    <testcase name="deserialize() Map&lt;string, primitive&gt; should transform value" time="0.0010" classname="should transform value">
    </testcase>
  </testsuite>
  <testsuite name="Set&lt;string, primitive&gt;" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/utils/deserialize.spec.ts" time="0.0010" failures="0">
    <testcase name="deserialize() Set&lt;string, primitive&gt; should transform value" time="0.0010" classname="should transform value">
    </testcase>
  </testsuite>
  <testsuite name="Unsupported collection" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/utils/deserialize.spec.ts" time="0.0000" failures="0">
    <testcase name="deserialize() Unsupported collection should transform value" time="0.0000" classname="should transform value">
    </testcase>
  </testsuite>
  <testsuite name="Model" timestamp="2020-10-09T18:19:50" tests="5" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/utils/deserialize.spec.ts" time="0.0050" failures="0">
    <testcase name="deserialize() Model should do nothing when a prop is undefined" time="0.0010" classname="should do nothing when a prop is undefined">
    </testcase>
    <testcase name="deserialize() Model should transform object to class (additionalProperties = false)" time="0.0010" classname="should transform object to class (additionalProperties = false)">
    </testcase>
    <testcase name="deserialize() Model should transform object to class (additionalProperties = true)" time="0.0020" classname="should transform object to class (additionalProperties = true)">
    </testcase>
    <testcase name="deserialize() Model should transform object to class (inherited class)" time="0.0010" classname="should transform object to class (inherited class)">
    </testcase>
    <testcase name="deserialize() Model should transform object to class (recursive class)" time="0.0000" classname="should transform object to class (recursive class)">
    </testcase>
  </testsuite>
  <testsuite name="Array&lt;Model&gt;" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/utils/deserialize.spec.ts" time="0.0010" failures="0">
    <testcase name="deserialize() Array&lt;Model&gt; should transform object to class (additionalProperties = false)" time="0.0010" classname="should transform object to class (additionalProperties = false)">
    </testcase>
    <testcase name="deserialize() Array&lt;Model&gt; should transform object to class (array parameter)" time="0.0000" classname="should transform object to class (array parameter)">
    </testcase>
  </testsuite>
  <testsuite name="Generics" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/utils/deserialize.spec.ts" time="0.0030" failures="0">
    <testcase name="deserialize() Generics should transform object to class (generics parameter)" time="0.0020" classname="should transform object to class (generics parameter)">
    </testcase>
    <testcase name="deserialize() Generics should transform object to class (generics property)" time="0.0010" classname="should transform object to class (generics property)">
    </testcase>
  </testsuite>
  <testsuite name="plainObjectToClass" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/utils/deserialize.spec.ts" time="0.0000" failures="0">
    <testcase name="deserialize() plainObjectToClass should return undefined" time="0.0000" classname="should return undefined">
    </testcase>
  </testsuite>
  <testsuite name="serialize()" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/utils/serialize.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Primitives" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/utils/serialize.spec.ts" time="0.0000" failures="0">
    <testcase name="serialize() Primitives should serialize values" time="0.0000" classname="should serialize values">
    </testcase>
  </testsuite>
  <testsuite name="Array&lt;primitive&gt;" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/utils/serialize.spec.ts" time="0.0000" failures="0">
    <testcase name="serialize() Array&lt;primitive&gt; should serialize values" time="0.0000" classname="should serialize values">
    </testcase>
  </testsuite>
  <testsuite name="Map&lt;primitive&gt;" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/utils/serialize.spec.ts" time="0.0010" failures="0">
    <testcase name="serialize() Map&lt;primitive&gt; should serialize values" time="0.0010" classname="should serialize values">
    </testcase>
  </testsuite>
  <testsuite name="toJson()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/utils/serialize.spec.ts" time="0.0000" failures="0">
    <testcase name="serialize() toJson() should serialize obj from toJSON" time="0.0000" classname="should serialize obj from toJSON">
    </testcase>
  </testsuite>
  <testsuite name="Plain Object" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/utils/serialize.spec.ts" time="0.0000" failures="0">
    <testcase name="serialize() Plain Object should serialize plain object (1)" time="0.0000" classname="should serialize plain object (1)">
    </testcase>
    <testcase name="serialize() Plain Object should serialize plain object (2)" time="0.0000" classname="should serialize plain object (2)">
    </testcase>
  </testsuite>
  <testsuite name="Class" timestamp="2020-10-09T18:19:50" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/utils/serialize.spec.ts" time="0.0040" failures="0">
    <testcase name="serialize() Class should serialize model" time="0.0010" classname="should serialize model">
    </testcase>
    <testcase name="serialize() Class should serialize model Array" time="0.0010" classname="should serialize model Array">
    </testcase>
    <testcase name="serialize() Class should serialize model (inherited class)" time="0.0010" classname="should serialize model (inherited class)">
    </testcase>
    <testcase name="serialize() Class should serialize model (recursive class)" time="0.0010" classname="should serialize model (recursive class)">
    </testcase>
  </testsuite>
  <testsuite name="Mongoose class" timestamp="2020-10-09T18:19:50" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/utils/serialize.spec.ts" time="0.0030" failures="0">
    <testcase name="serialize() Mongoose class should serialize model" time="0.0010" classname="should serialize model">
    </testcase>
    <testcase name="serialize() Mongoose class should serialize model Array" time="0.0010" classname="should serialize model Array">
    </testcase>
    <testcase name="serialize() Mongoose class should serialize model (inherited class)" time="0.0010" classname="should serialize model (inherited class)">
    </testcase>
    <testcase name="serialize() Mongoose class should serialize model (recursive class)" time="0.0000" classname="should serialize model (recursive class)">
    </testcase>
  </testsuite>
  <testsuite name="Legacy serialize method" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/json-mapper/src/utils/serialize.spec.ts" time="0.0010" failures="0">
    <testcase name="serialize() Legacy serialize method should use serialize method" time="0.0010" classname="should use serialize method">
    </testcase>
  </testsuite>
  <testsuite name="@DynamicRef()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/dynamicRef.spec.ts" time="0.0000" failures="0">
    <testcase name="@DynamicRef() should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="@Indexed()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/indexed.spec.ts" time="0.0000" failures="0">
    <testcase name="@Indexed() should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="@MongooseIndex()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/mongooseIndex.spec.ts" time="0.0000" failures="0">
    <testcase name="@MongooseIndex() should store options" time="0.0000" classname="should store options">
    </testcase>
  </testsuite>
  <testsuite name="@MongoosePlugin()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/mongoosePlugin.spec.ts" time="0.0000" failures="0">
    <testcase name="@MongoosePlugin() should store options" time="0.0000" classname="should store options">
    </testcase>
  </testsuite>
  <testsuite name="ObjectID" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/objectID.spec.ts" time="0.0010" failures="0">
    <testcase name="ObjectID should declare an ObjectID field" time="0.0010" classname="should declare an ObjectID field">
    </testcase>
  </testsuite>
  <testsuite name="@PostHook()" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/postHook.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when decorator is used as class decorator" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/postHook.spec.ts" time="0.0000" failures="0">
    <testcase name="@PostHook() when decorator is used as class decorator should call applySchemaOptions" time="0.0000" classname="should call applySchemaOptions">
    </testcase>
  </testsuite>
  <testsuite name="when decorator is used as method decorator" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/postHook.spec.ts" time="0.0010" failures="0">
    <testcase name="@PostHook() when decorator is used as method decorator should call applySchemaOptions" time="0.0010" classname="should call applySchemaOptions">
    </testcase>
  </testsuite>
  <testsuite name="@PreHook()" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/preHook.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when decorator is used as class decorator" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/preHook.spec.ts" time="0.0000" failures="0">
    <testcase name="@PreHook() when decorator is used as class decorator should call applySchemaOptions" time="0.0000" classname="should call applySchemaOptions">
    </testcase>
  </testsuite>
  <testsuite name="when decorator is used as method decorator" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/preHook.spec.ts" time="0.0010" failures="0">
    <testcase name="@PreHook() when decorator is used as method decorator should call applySchemaOptions" time="0.0010" classname="should call applySchemaOptions">
    </testcase>
  </testsuite>
  <testsuite name="@Ref()" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/ref.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="type is a class" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/ref.spec.ts" time="0.0000" failures="0">
    <testcase name="@Ref() type is a class should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="type is a string" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/ref.spec.ts" time="0.0000" failures="0">
    <testcase name="@Ref() type is a string should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="@SchemaIgnore()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/schemaIgnore.spec.ts" time="0.0000" failures="0">
    <testcase name="@SchemaIgnore() should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="@Select()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/select.spec.ts" time="0.0000" failures="0">
    <testcase name="@Select() should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="@Trim()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/trim.spec.ts" time="0.0000" failures="0">
    <testcase name="@Trim() should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="@Unique()" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/unique.spec.ts" time="0.0000" failures="0">
    <testcase name="@Unique() should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="@VirtualRef()" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/virtualRef.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when type and foreign value are given" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/virtualRef.spec.ts" time="0.0010" failures="0">
    <testcase name="@VirtualRef() when type and foreign value are given should set metadata" time="0.0010" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="when options is given with minimal fields" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/virtualRef.spec.ts" time="0.0010" failures="0">
    <testcase name="@VirtualRef() when options is given with minimal fields should set metadata" time="0.0010" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="when options is given with all fields" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/virtualRef.spec.ts" time="0.0000" failures="0">
    <testcase name="@VirtualRef() when options is given with all fields should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="with a given model" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/decorators/virtualRef.spec.ts" time="0.0020" failures="0">
    <testcase name="@VirtualRef() with a given model should set metadata" time="0.0020" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="ValidationErrorMiddleware" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/middlewares/ValidationErrorMiddleware.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when success" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/middlewares/ValidationErrorMiddleware.spec.ts" time="0.0010" failures="0">
    <testcase name="ValidationErrorMiddleware when success should cast error" time="0.0010" classname="should cast error">
    </testcase>
  </testsuite>
  <testsuite name="when error" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/middlewares/ValidationErrorMiddleware.spec.ts" time="0.0000" failures="0">
    <testcase name="ValidationErrorMiddleware when error should cast error" time="0.0000" classname="should cast error">
    </testcase>
  </testsuite>
  <testsuite name="MongooseConnections" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/services/MongooseConnection.spec.ts" time="0.0020" failures="0">
    <testcase name="MongooseConnections should init connection with url" time="0.0010" classname="should init connection with url">
    </testcase>
    <testcase name="MongooseConnections should init with a list of connection" time="0.0010" classname="should init with a list of connection">
    </testcase>
  </testsuite>
  <testsuite name="Mongoose" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/services/MongooseService.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="MongooseService" timestamp="2020-10-09T18:19:50" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/services/MongooseService.spec.ts" time="0.0010" failures="0">
    <testcase name="Mongoose MongooseService should call mongoose.connect" time="0.0010" classname="should call mongoose.connect">
    </testcase>
    <testcase name="Mongoose MongooseService should close connection (1)" time="0.0000" classname="should close connection (1)">
    </testcase>
    <testcase name="Mongoose MongooseService should close connection (2)" time="0.0000" classname="should close connection (2)">
    </testcase>
  </testsuite>
  <testsuite name="buildMongooseSchema" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/utils/buildMongooseSchema.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when mongoose schema hasn&apos;t ref" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/utils/buildMongooseSchema.spec.ts" time="0.0000" failures="0">
    <testcase name="buildMongooseSchema when mongoose schema hasn&apos;t ref should return schema" time="0.0000" classname="should return schema">
    </testcase>
  </testsuite>
  <testsuite name="when mongoose schema has virtual ref" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/utils/buildMongooseSchema.spec.ts" time="0.0000" failures="0">
    <testcase name="buildMongooseSchema when mongoose schema has virtual ref should return schema" time="0.0000" classname="should return schema">
    </testcase>
  </testsuite>
  <testsuite name="createModel()" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/utils/createModel.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the model name is given" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/utils/createModel.spec.ts" time="0.0000" failures="0">
    <testcase name="createModel() when the model name is given should call mongoose.model" time="0.0000" classname="should call mongoose.model">
    </testcase>
  </testsuite>
  <testsuite name="when the model name is not given" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/utils/createModel.spec.ts" time="0.0000" failures="0">
    <testcase name="createModel() when the model name is not given should call mongoose.model" time="0.0000" classname="should call mongoose.model">
    </testcase>
  </testsuite>
  <testsuite name="createSchema" timestamp="2020-10-09T18:19:50" tests="11" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/utils/createSchema.spec.ts" time="0.0160" failures="0">
    <testcase name="createSchema should create schema" time="0.0020" classname="should create schema">
    </testcase>
    <testcase name="createSchema should create schema with required property" time="0.0010" classname="should create schema with required property">
    </testcase>
    <testcase name="createSchema should create schema with subdocument" time="0.0020" classname="should create schema with subdocument">
    </testcase>
    <testcase name="createSchema should create schema with ref" time="0.0020" classname="should create schema with ref">
    </testcase>
    <testcase name="createSchema should create schema with virtual ref" time="0.0020" classname="should create schema with virtual ref">
    </testcase>
    <testcase name="createSchema should create schema with collection (Array of subdocument)" time="0.0010" classname="should create schema with collection (Array of subdocument)">
    </testcase>
    <testcase name="createSchema should create schema with collection (Array of ref)" time="0.0010" classname="should create schema with collection (Array of ref)">
    </testcase>
    <testcase name="createSchema should create schema with collection (Array of virtual ref" time="0.0020" classname="should create schema with collection (Array of virtual ref">
    </testcase>
    <testcase name="createSchema should create schema with collection (Map of subdocument)" time="0.0010" classname="should create schema with collection (Map of subdocument)">
    </testcase>
    <testcase name="createSchema should throw error with collection (Set of subdocument)" time="0.0010" classname="should throw error with collection (Set of subdocument)">
    </testcase>
    <testcase name="createSchema should not create schema property for ignored field" time="0.0010" classname="should not create schema property for ignored field">
    </testcase>
  </testsuite>
  <testsuite name="registerModel()" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/utils/registerModel.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when a class is given" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/utils/registerModel.spec.ts" time="0.0000" failures="0">
    <testcase name="registerModel() when a class is given should call ProviderRegistry.merge()" time="0.0000" classname="should call ProviderRegistry.merge()">
    </testcase>
  </testsuite>
  <testsuite name="when a config is given" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/utils/registerModel.spec.ts" time="0.0000" failures="0">
    <testcase name="registerModel() when a config is given should call ProviderRegistry.merge()" time="0.0000" classname="should call ProviderRegistry.merge()">
    </testcase>
  </testsuite>
  <testsuite name="resolveRefType" timestamp="2020-10-09T18:19:50" tests="5" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/utils/resolveRefType.spec.ts" time="0.0000" failures="0">
    <testcase name="resolveRefType should return type as string (from string)" time="0.0000" classname="should return type as string (from string)">
    </testcase>
    <testcase name="resolveRefType should return type as string (from class)" time="0.0000" classname="should return type as string (from class)">
    </testcase>
    <testcase name="resolveRefType should return type as string (from class)" time="0.0000" classname="should return type as string (from class)">
    </testcase>
    <testcase name="resolveRefType should return type as string (from class without store)" time="0.0000" classname="should return type as string (from class without store)">
    </testcase>
    <testcase name="resolveRefType should return type as string (from arrow resolver)" time="0.0000" classname="should return type as string (from arrow resolver)">
    </testcase>
  </testsuite>
  <testsuite name="schemaOptions" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/utils/schemaOptions.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="schemaOptions()" timestamp="2020-10-09T18:19:50" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/utils/schemaOptions.spec.ts" time="0.0000" failures="0">
    <testcase name="schemaOptions schemaOptions() should return schema options (1)" time="0.0000" classname="should return schema options (1)">
    </testcase>
    <testcase name="schemaOptions schemaOptions() should return schema options (2)" time="0.0000" classname="should return schema options (2)">
    </testcase>
    <testcase name="schemaOptions schemaOptions() should return schema options (3)" time="0.0000" classname="should return schema options (3)">
    </testcase>
  </testsuite>
  <testsuite name="buildPreHook()" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/utils/schemaOptions.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the function has 1 parameter" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/utils/schemaOptions.spec.ts" time="0.0010" failures="0">
    <testcase name="schemaOptions buildPreHook() when the function has 1 parameter should call the fn with the right parameters" time="0.0010" classname="should call the fn with the right parameters">
    </testcase>
  </testsuite>
  <testsuite name="when the function has 2 parameters" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/utils/schemaOptions.spec.ts" time="0.0000" failures="0">
    <testcase name="schemaOptions buildPreHook() when the function has 2 parameters should call the fn with the right parameters" time="0.0000" classname="should call the fn with the right parameters">
    </testcase>
  </testsuite>
  <testsuite name="applySchemaOptions()" timestamp="2020-10-09T18:19:50" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/src/utils/schemaOptions.spec.ts" time="0.0000" failures="0">
    <testcase name="schemaOptions applySchemaOptions() should call schema.pre" time="0.0000" classname="should call schema.pre">
    </testcase>
    <testcase name="schemaOptions applySchemaOptions() should call schema.post" time="0.0000" classname="should call schema.post">
    </testcase>
    <testcase name="schemaOptions applySchemaOptions() should call schema.plugin" time="0.0000" classname="should call schema.plugin">
    </testcase>
    <testcase name="schemaOptions applySchemaOptions() should call schema.index" time="0.0000" classname="should call schema.index">
    </testcase>
  </testsuite>
  <testsuite name="Mongoose" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/test/array.integration.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Array models" timestamp="2020-10-09T18:19:50" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/test/array.integration.spec.ts" time="0.0370" failures="0">
    <testcase name="Mongoose Array models should run pre and post hook" time="0.0370" classname="should run pre and post hook">
    </testcase>
  </testsuite>
  <testsuite name="Mongoose" timestamp="2020-10-09T18:19:50" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/test/multiple-connection.integration.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="MultipleConnection" timestamp="2020-10-09T18:19:50" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/test/multiple-connection.integration.spec.ts" time="0.0000" failures="0">
    <testcase name="Mongoose MultipleConnection should create connection and set models with the right connection" time="0.0000" classname="should create connection and set models with the right connection">
    </testcase>
    <testcase name="Mongoose MultipleConnection should create connection and set models with the right connection (2)" time="0.0000" classname="should create connection and set models with the right connection (2)">
    </testcase>
  </testsuite>
  <testsuite name="Mongoose" timestamp="2020-10-09T18:19:51" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/test/user.integration.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="UserModel" timestamp="2020-10-09T18:19:51" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/test/user.integration.spec.ts" time="0.0130" failures="0">
    <testcase name="Mongoose UserModel should run pre and post hook" time="0.0130" classname="should run pre and post hook">
    </testcase>
  </testsuite>
  <testsuite name="UserModel" timestamp="2020-10-09T18:19:51" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/mongoose/test/user.integration.spec.ts" time="0.0130" failures="0">
    <testcase name="Mongoose UserModel should run pre and post hook" time="0.0130" classname="should run pre and post hook">
    </testcase>
  </testsuite>
  <testsuite name="@Args" timestamp="2020-10-09T18:19:51" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/passport/src/decorators/args.spec.ts" time="0.0010" failures="0">
    <testcase name="@Args should register a new ParamMetadata instance with the correct property" time="0.0010" classname="should register a new ParamMetadata instance with the correct property">
    </testcase>
  </testsuite>
  <testsuite name="@Arg" timestamp="2020-10-09T18:19:51" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/passport/src/decorators/args.spec.ts" time="0.0000" failures="0">
    <testcase name="@Arg should register a new ParamMetadata instance with the correct property" time="0.0000" classname="should register a new ParamMetadata instance with the correct property">
    </testcase>
  </testsuite>
  <testsuite name="@Authenticate" timestamp="2020-10-09T18:19:51" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/passport/src/decorators/authenticate.spec.ts" time="0.0010" failures="0">
    <testcase name="@Authenticate should store data" time="0.0000" classname="should store data">
    </testcase>
    <testcase name="@Authenticate should store data (without originalUrl)" time="0.0010" classname="should store data (without originalUrl)">
    </testcase>
  </testsuite>
  <testsuite name="@Authorize" timestamp="2020-10-09T18:19:51" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/passport/src/decorators/authorize.spec.ts" time="0.0010" failures="0">
    <testcase name="@Authorize should store data" time="0.0010" classname="should store data">
    </testcase>
    <testcase name="@Authorize should store data (without originalUrl)" time="0.0000" classname="should store data (without originalUrl)">
    </testcase>
  </testsuite>
  <testsuite name="PassportMiddleware" timestamp="2020-10-09T18:19:51" tests="5" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/passport/src/middlewares/PassportMiddleware.spec.ts" time="0.0030" failures="0">
    <testcase name="PassportMiddleware should call passport with local" time="0.0010" classname="should call passport with local">
    </testcase>
    <testcase name="PassportMiddleware should skip auth when user is authenticated" time="0.0010" classname="should skip auth when user is authenticated">
    </testcase>
    <testcase name="PassportMiddleware should call passport with defaults protocols" time="0.0010" classname="should call passport with defaults protocols">
    </testcase>
    <testcase name="PassportMiddleware should call passport with :protocol" time="0.0000" classname="should call passport with :protocol">
    </testcase>
    <testcase name="PassportMiddleware should throw errors" time="0.0000" classname="should throw errors">
    </testcase>
  </testsuite>
  <testsuite name="PassportSerializerService" timestamp="2020-10-09T18:19:51" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/passport/src/services/PassportSerializerService.spec.ts" time="0.0040" failures="0">
    <testcase name="PassportSerializerService should serialize model" time="0.0010" classname="should serialize model">
    </testcase>
    <testcase name="PassportSerializerService should catch error when serializing model" time="0.0000" classname="should catch error when serializing model">
    </testcase>
    <testcase name="PassportSerializerService should deserialize model" time="0.0010" classname="should deserialize model">
    </testcase>
    <testcase name="PassportSerializerService should catch error when serializing model" time="0.0020" classname="should catch error when serializing model">
    </testcase>
  </testsuite>
  <testsuite name="ProtocolsService" timestamp="2020-10-09T18:19:51" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/passport/src/services/ProtocolsService.spec.ts" time="0.0070" failures="0">
    <testcase name="ProtocolsService should create a protocol" time="0.0000" classname="should create a protocol">
    </testcase>
    <testcase name="ProtocolsService should call metadata" time="0.0040" classname="should call metadata">
    </testcase>
    <testcase name="ProtocolsService should call metadata and catch error" time="0.0030" classname="should call metadata and catch error">
    </testcase>
  </testsuite>
  <testsuite name="getProtocolsFromRequest" timestamp="2020-10-09T18:19:51" tests="9" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/passport/src/utils/getProtocolsFromRequest.spec.ts" time="0.0010" failures="0">
    <testcase name="getProtocolsFromRequest should allow all protocol (from default protocols)" time="0.0000" classname="should allow all protocol (from default protocols)">
    </testcase>
    <testcase name="getProtocolsFromRequest should allow all protocol (from default protocols - array)" time="0.0000" classname="should allow all protocol (from default protocols - array)">
    </testcase>
    <testcase name="getProtocolsFromRequest should return providers" time="0.0010" classname="should return providers">
    </testcase>
    <testcase name="getProtocolsFromRequest should get protocol from request (params)" time="0.0000" classname="should get protocol from request (params)">
    </testcase>
    <testcase name="getProtocolsFromRequest should not get protocol from request" time="0.0000" classname="should not get protocol from request">
    </testcase>
    <testcase name="getProtocolsFromRequest should get protocol from request (query)" time="0.0000" classname="should get protocol from request (query)">
    </testcase>
    <testcase name="getProtocolsFromRequest should get protocol from request (body)" time="0.0000" classname="should get protocol from request (body)">
    </testcase>
    <testcase name="getProtocolsFromRequest should return basic protocol" time="0.0000" classname="should return basic protocol">
    </testcase>
    <testcase name="getProtocolsFromRequest should not return protocol when protocol doesn&apos;t match" time="0.0000" classname="should not return protocol when protocol doesn&apos;t match">
    </testcase>
  </testsuite>
  <testsuite name="PlatformAws" timestamp="2020-10-09T18:19:51" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-aws/src/components/PlatformAws.spec.ts" time="0.0250" failures="0">
    <testcase name="PlatformAws should create aws server" time="0.0250" classname="should create aws server">
    </testcase>
  </testsuite>
  <testsuite name="AwsContext" timestamp="2020-10-09T18:19:51" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-aws/src/decorators/awsContext.spec.ts" time="0.0020" failures="0">
    <testcase name="AwsContext should get event object" time="0.0010" classname="should get event object">
    </testcase>
    <testcase name="AwsContext should generate the right spec" time="0.0010" classname="should generate the right spec">
    </testcase>
  </testsuite>
  <testsuite name="AwsEvent" timestamp="2020-10-09T18:19:51" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-aws/src/decorators/awsEvent.spec.ts" time="0.0020" failures="0">
    <testcase name="AwsEvent should get event object" time="0.0010" classname="should get event object">
    </testcase>
    <testcase name="AwsEvent should generate the right spec" time="0.0010" classname="should generate the right spec">
    </testcase>
  </testsuite>
  <testsuite name="ParseApiGatewayPipe" timestamp="2020-10-09T18:19:51" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-aws/src/pipes/ParseApiGatewayPipe.spec.ts" time="0.0000" failures="0">
    <testcase name="ParseApiGatewayPipe should parse json" time="0.0000" classname="should parse json">
    </testcase>
  </testsuite>
  <testsuite name="Aws" timestamp="2020-10-09T18:19:51" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-aws/test/aws.integration.spec.ts" time="0.0150" failures="0">
    <testcase name="Aws should return aws headers" time="0.0150" classname="should return aws headers">
    </testcase>
  </testsuite>
  <testsuite name="PlatformExpress" timestamp="2020-10-09T18:19:51" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/src/components/PlatformExpress.spec.ts" time="0.0010" failures="0">
    <testcase name="PlatformExpress should create the platform" time="0.0010" classname="should create the platform">
    </testcase>
  </testsuite>
  <testsuite name="RouterSettings" timestamp="2020-10-09T18:19:51" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/src/decorators/routerSettings.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="MergeParams" timestamp="2020-10-09T18:19:51" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/src/decorators/routerSettings.spec.ts" time="0.0000" failures="0">
    <testcase name="RouterSettings MergeParams should call merge method for mergeParams options" time="0.0000" classname="should call merge method for mergeParams options">
    </testcase>
  </testsuite>
  <testsuite name="CaseSensitive" timestamp="2020-10-09T18:19:51" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/src/decorators/routerSettings.spec.ts" time="0.0010" failures="0">
    <testcase name="RouterSettings CaseSensitive should call merge method for mergeParams options" time="0.0010" classname="should call merge method for mergeParams options">
    </testcase>
  </testsuite>
  <testsuite name="Strict" timestamp="2020-10-09T18:19:51" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/src/decorators/routerSettings.spec.ts" time="0.0000" failures="0">
    <testcase name="RouterSettings Strict should call merge method for mergeParams options" time="0.0000" classname="should call merge method for mergeParams options">
    </testcase>
  </testsuite>
  <testsuite name="staticsMiddleware" timestamp="2020-10-09T18:19:51" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/src/middlewares/staticsMiddleware.spec.ts" time="0.0010" failures="0">
    <testcase name="staticsMiddleware should call middleware" time="0.0000" classname="should call middleware">
    </testcase>
    <testcase name="staticsMiddleware should call next when headers is sent" time="0.0010" classname="should call next when headers is sent">
    </testcase>
  </testsuite>
  <testsuite name="PlatformExpressApplication" timestamp="2020-10-09T18:19:51" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/src/services/PlatformExpressApplication.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="statics()" timestamp="2020-10-09T18:19:51" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/src/services/PlatformExpressApplication.spec.ts" time="0.0010" failures="0">
    <testcase name="PlatformExpressApplication statics() should create a PlatformApplication" time="0.0010" classname="should create a PlatformApplication">
    </testcase>
  </testsuite>
  <testsuite name="PlatformExpressHandler" timestamp="2020-10-09T18:19:51" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/src/services/PlatformExpressHandler.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="createHandler" timestamp="2020-10-09T18:19:51" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/src/services/PlatformExpressHandler.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="ENDPOINT" timestamp="2020-10-09T18:19:51" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/src/services/PlatformExpressHandler.spec.ts" time="0.0010" failures="0">
    <testcase name="PlatformExpressHandler createHandler ENDPOINT should return a native handler with 3 params" time="0.0010" classname="should return a native handler with 3 params">
    </testcase>
  </testsuite>
  <testsuite name="MIDDLEWARE" timestamp="2020-10-09T18:19:51" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/src/services/PlatformExpressHandler.spec.ts" time="0.0030" failures="0">
    <testcase name="PlatformExpressHandler createHandler MIDDLEWARE should return a native handler with 3 params" time="0.0010" classname="should return a native handler with 3 params">
    </testcase>
    <testcase name="PlatformExpressHandler createHandler MIDDLEWARE should return a native handler with 4 params" time="0.0020" classname="should return a native handler with 4 params">
    </testcase>
  </testsuite>
  <testsuite name="$CTX" timestamp="2020-10-09T18:19:51" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/src/services/PlatformExpressHandler.spec.ts" time="0.0030" failures="0">
    <testcase name="PlatformExpressHandler createHandler $CTX should return a native handler with 3 params" time="0.0010" classname="should return a native handler with 3 params">
    </testcase>
    <testcase name="PlatformExpressHandler createHandler $CTX should catch error from handler" time="0.0020" classname="should catch error from handler">
    </testcase>
  </testsuite>
  <testsuite name="FUNCTION" timestamp="2020-10-09T18:19:51" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/src/services/PlatformExpressHandler.spec.ts" time="0.0000" failures="0">
    <testcase name="PlatformExpressHandler createHandler FUNCTION should return a native handler with 3 params" time="0.0000" classname="should return a native handler with 3 params">
    </testcase>
  </testsuite>
  <testsuite name="getArg()" timestamp="2020-10-09T18:19:51" tests="15" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/src/services/PlatformExpressHandler.spec.ts" time="0.0350" failures="0">
    <testcase name="PlatformExpressHandler getArg() should return REQUEST" time="0.0020" classname="should return REQUEST">
    </testcase>
    <testcase name="PlatformExpressHandler getArg() should return RESPONSE" time="0.0020" classname="should return RESPONSE">
    </testcase>
    <testcase name="PlatformExpressHandler getArg() should return NEXT" time="0.0030" classname="should return NEXT">
    </testcase>
    <testcase name="PlatformExpressHandler getArg() should return ERR" time="0.0030" classname="should return ERR">
    </testcase>
    <testcase name="PlatformExpressHandler getArg() should return $CTX" time="0.0020" classname="should return $CTX">
    </testcase>
    <testcase name="PlatformExpressHandler getArg() should return RESPONSE_DATA" time="0.0020" classname="should return RESPONSE_DATA">
    </testcase>
    <testcase name="PlatformExpressHandler getArg() should return ENDPOINT_INFO" time="0.0020" classname="should return ENDPOINT_INFO">
    </testcase>
    <testcase name="PlatformExpressHandler getArg() should return BODY" time="0.0030" classname="should return BODY">
    </testcase>
    <testcase name="PlatformExpressHandler getArg() should return PATH" time="0.0020" classname="should return PATH">
    </testcase>
    <testcase name="PlatformExpressHandler getArg() should return QUERY" time="0.0020" classname="should return QUERY">
    </testcase>
    <testcase name="PlatformExpressHandler getArg() should return HEADER" time="0.0020" classname="should return HEADER">
    </testcase>
    <testcase name="PlatformExpressHandler getArg() should return COOKIES" time="0.0030" classname="should return COOKIES">
    </testcase>
    <testcase name="PlatformExpressHandler getArg() should return SESSION" time="0.0030" classname="should return SESSION">
    </testcase>
    <testcase name="PlatformExpressHandler getArg() should return LOCALS" time="0.0020" classname="should return LOCALS">
    </testcase>
    <testcase name="PlatformExpressHandler getArg() should return request by default" time="0.0020" classname="should return request by default">
    </testcase>
  </testsuite>
  <testsuite name="PlatformExpressResponse" timestamp="2020-10-09T18:19:52" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/src/services/PlatformExpressResponse.spec.ts" time="0.0010" failures="0">
    <testcase name="PlatformExpressResponse should create a PlatformResponse instance" time="0.0010" classname="should create a PlatformResponse instance">
    </testcase>
  </testsuite>
  <testsuite name="PlatformExpressRouter" timestamp="2020-10-09T18:19:52" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/src/services/PlatformExpressRouter.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="create()" timestamp="2020-10-09T18:19:52" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/src/services/PlatformExpressRouter.spec.ts" time="0.0010" failures="0">
    <testcase name="PlatformExpressRouter create() should create a new router" time="0.0010" classname="should create a new router">
    </testcase>
  </testsuite>
  <testsuite name="MergeParams" timestamp="2020-10-09T18:19:52" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/merge-params.spec.ts" time="0.0050" failures="0">
    <testcase name="MergeParams should merge params" time="0.0050" classname="should merge params">
    </testcase>
  </testsuite>
  <testsuite name="PlatformExpress" timestamp="2020-10-09T18:19:52" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Handlers" timestamp="2020-10-09T18:19:52" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0100" failures="0">
    <testcase name="PlatformExpress Handlers Scenario 1: GET /rest/handlers/scenario-1/:id" time="0.0040" classname="Scenario 1: GET /rest/handlers/scenario-1/:id">
    </testcase>
    <testcase name="PlatformExpress Handlers Scenario 2: GET /rest/handlers/scenario-2/:id" time="0.0030" classname="Scenario 2: GET /rest/handlers/scenario-2/:id">
    </testcase>
    <testcase name="PlatformExpress Handlers Scenario 3: GET /rest/handlers/scenario-3/:id" time="0.0030" classname="Scenario 3: GET /rest/handlers/scenario-3/:id">
    </testcase>
  </testsuite>
  <testsuite name="Children controllers" timestamp="2020-10-09T18:19:52" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="scenario 1: GET /rest/controllers/scenario-1" timestamp="2020-10-09T18:19:52" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformExpress Children controllers scenario 1: GET /rest/controllers/scenario-1 should return a response from method" time="0.0040" classname="should return a response from method">
    </testcase>
  </testsuite>
  <testsuite name="scenario 2: GET /rest/controllers/children/scenario-2" timestamp="2020-10-09T18:19:52" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformExpress Children controllers scenario 2: GET /rest/controllers/children/scenario-2 should return a response from method" time="0.0040" classname="should return a response from method">
    </testcase>
  </testsuite>
  <testsuite name="Inheritance controllers" timestamp="2020-10-09T18:19:52" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0330" failures="0">
    <testcase name="PlatformExpress Inheritance controllers should return list" time="0.0030" classname="should return list">
    </testcase>
    <testcase name="PlatformExpress Inheritance controllers should return a resource" time="0.0030" classname="should return a resource">
    </testcase>
    <testcase name="PlatformExpress Inheritance controllers should add a resource" time="0.0270" classname="should add a resource">
    </testcase>
  </testsuite>
  <testsuite name="Scope Request" timestamp="2020-10-09T18:19:52" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="GET /rest/scopes-request/:id" timestamp="2020-10-09T18:19:52" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.5170" failures="0">
    <testcase name="PlatformExpress Scope Request GET /rest/scopes-request/:id should respond with the right userId per request" time="0.5170" classname="should respond with the right userId per request">
    </testcase>
  </testsuite>
  <testsuite name="Headers" timestamp="2020-10-09T18:19:52" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0070" failures="0">
    <testcase name="PlatformExpress Headers Scenario1: GET /rest/headers/scenario-1" time="0.0040" classname="Scenario1: GET /rest/headers/scenario-1">
    </testcase>
    <testcase name="PlatformExpress Headers Scenario2: GET /rest/headers/scenario-2" time="0.0030" classname="Scenario2: GET /rest/headers/scenario-2">
    </testcase>
  </testsuite>
  <testsuite name="Custom404" timestamp="2020-10-09T18:19:52" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0080" failures="0">
    <testcase name="PlatformExpress Custom404 Scenario 1: GET /" time="0.0080" classname="Scenario 1: GET /">
    </testcase>
  </testsuite>
  <testsuite name="Statics files" timestamp="2020-10-09T18:19:52" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0190" failures="0">
    <testcase name="PlatformExpress Statics files should return index HTML (1)" time="0.0080" classname="should return index HTML (1)">
    </testcase>
    <testcase name="PlatformExpress Statics files should return index HTML (2)" time="0.0030" classname="should return index HTML (2)">
    </testcase>
    <testcase name="PlatformExpress Statics files should return index HTML (3)" time="0.0030" classname="should return index HTML (3)">
    </testcase>
    <testcase name="PlatformExpress Statics files should return 404" time="0.0050" classname="should return 404">
    </testcase>
  </testsuite>
  <testsuite name="Cookies" timestamp="2020-10-09T18:19:53" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformExpress Cookies Scenario 1: GET /rest/cookies/scenario-1" time="0.0040" classname="Scenario 1: GET /rest/cookies/scenario-1">
    </testcase>
  </testsuite>
  <testsuite name="Session" timestamp="2020-10-09T18:19:53" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario1: POST /rest/session/connected" timestamp="2020-10-09T18:19:53" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0250" failures="0">
    <testcase name="PlatformExpress Session Scenario1: POST /rest/session/connected should keep connected user in session and destroy session" time="0.0250" classname="should keep connected user in session and destroy session">
    </testcase>
  </testsuite>
  <testsuite name="AcceptMime" timestamp="2020-10-09T18:19:53" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario 1: POST /rest/accept-mime/scenario-1" timestamp="2020-10-09T18:19:53" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0100" failures="0">
    <testcase name="PlatformExpress AcceptMime Scenario 1: POST /rest/accept-mime/scenario-1 should return a 200 response when Accept header match with @AcceptMime(&quot;application/json&quot;)" time="0.0070" classname="should return a 200 response when Accept header match with @AcceptMime(&quot;application/json&quot;)">
    </testcase>
    <testcase name="PlatformExpress AcceptMime Scenario 1: POST /rest/accept-mime/scenario-1 should return a 406 response when Accept header doesn&apos;t match with @AcceptMime(&quot;application/json&quot;)" time="0.0030" classname="should return a 406 response when Accept header doesn&apos;t match with @AcceptMime(&quot;application/json&quot;)">
    </testcase>
  </testsuite>
  <testsuite name="HeaderParams" timestamp="2020-10-09T18:19:53" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario 1: GET /rest/header-params/scenario-1" timestamp="2020-10-09T18:19:53" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0050" failures="0">
    <testcase name="PlatformExpress HeaderParams Scenario 1: GET /rest/header-params/scenario-1 should return a response with the extracted authorization from the request headers" time="0.0050" classname="should return a response with the extracted authorization from the request headers">
    </testcase>
  </testsuite>
  <testsuite name="Scenario 2: POST with contentType" timestamp="2020-10-09T18:19:53" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformExpress HeaderParams Scenario 2: POST with contentType should return a response with the extracted contentType from the request headers" time="0.0040" classname="should return a response with the extracted contentType from the request headers">
    </testcase>
  </testsuite>
  <testsuite name="PathParams" timestamp="2020-10-09T18:19:53" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0140" failures="0">
    <testcase name="PlatformExpress PathParams Scenario 1: GET /rest/path-params/scenario-1/scope/scopeId" time="0.0040" classname="Scenario 1: GET /rest/path-params/scenario-1/scope/scopeId">
    </testcase>
    <testcase name="PlatformExpress PathParams Scenario 2: GET /rest/path-params/scenario-2/scopeId" time="0.0030" classname="Scenario 2: GET /rest/path-params/scenario-2/scopeId">
    </testcase>
    <testcase name="PlatformExpress PathParams Scenario 3: POST /rest/path-params/scenario-3/scope/scopeId" time="0.0040" classname="Scenario 3: POST /rest/path-params/scenario-3/scope/scopeId">
    </testcase>
    <testcase name="PlatformExpress PathParams Scenario 4: POST /rest/path-params/scenario-4/scope/scopeId" time="0.0030" classname="Scenario 4: POST /rest/path-params/scenario-4/scope/scopeId">
    </testcase>
  </testsuite>
  <testsuite name="QueryParams" timestamp="2020-10-09T18:19:53" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario1: Boolean value" timestamp="2020-10-09T18:19:53" tests="7" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0220" failures="0">
    <testcase name="PlatformExpress QueryParams Scenario1: Boolean value should return true when query is true" time="0.0070" classname="should return true when query is true">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario1: Boolean value should return true when query is 1" time="0.0030" classname="should return true when query is 1">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario1: Boolean value should return false when query is false" time="0.0020" classname="should return false when query is false">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario1: Boolean value should return false when query is 0" time="0.0030" classname="should return false when query is 0">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario1: Boolean value should return false when query is null" time="0.0020" classname="should return false when query is null">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario1: Boolean value should return undefined when query is empty" time="0.0020" classname="should return undefined when query is empty">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario1: Boolean value should return undefined when no query" time="0.0030" classname="should return undefined when no query">
    </testcase>
  </testsuite>
  <testsuite name="Scenario2: Boolean value with default value" timestamp="2020-10-09T18:19:53" tests="7" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0220" failures="0">
    <testcase name="PlatformExpress QueryParams Scenario2: Boolean value with default value should return true when query is true" time="0.0030" classname="should return true when query is true">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario2: Boolean value with default value should return true when query is 1" time="0.0030" classname="should return true when query is 1">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario2: Boolean value with default value should return false when query is false" time="0.0030" classname="should return false when query is false">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario2: Boolean value with default value should return false when query is 0" time="0.0030" classname="should return false when query is 0">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario2: Boolean value with default value should return false when query is null" time="0.0030" classname="should return false when query is null">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario2: Boolean value with default value should return undefined when query is empty" time="0.0030" classname="should return undefined when query is empty">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario2: Boolean value with default value should return undefined when no query" time="0.0040" classname="should return undefined when no query">
    </testcase>
  </testsuite>
  <testsuite name="Scenario3: Number value" timestamp="2020-10-09T18:19:53" tests="7" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0270" failures="0">
    <testcase name="PlatformExpress QueryParams Scenario3: Number value should return 0 when query is 0" time="0.0040" classname="should return 0 when query is 0">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario3: Number value should return 1 when query is 1" time="0.0030" classname="should return 1 when query is 1">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario3: Number value should return 0.1 when query is 0.1" time="0.0030" classname="should return 0.1 when query is 0.1">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario3: Number value should throw bad request" time="0.0050" classname="should throw bad request">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario3: Number value should return undefined when query is empty" time="0.0030" classname="should return undefined when query is empty">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario3: Number value should return undefined when query is empty" time="0.0060" classname="should return undefined when query is empty">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario3: Number value should return undefined when no query" time="0.0030" classname="should return undefined when no query">
    </testcase>
  </testsuite>
  <testsuite name="Scenario4: String value" timestamp="2020-10-09T18:19:53" tests="5" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0170" failures="0">
    <testcase name="PlatformExpress QueryParams Scenario4: String value should return 0 when query is 0" time="0.0040" classname="should return 0 when query is 0">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario4: String value should return 1 when query is 1" time="0.0030" classname="should return 1 when query is 1">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario4: String value should return 0.1 when query is 0.1" time="0.0040" classname="should return 0.1 when query is 0.1">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario4: String value should return undefined when query is empty" time="0.0030" classname="should return undefined when query is empty">
    </testcase>
    <testcase name="PlatformExpress QueryParams Scenario4: String value should return undefined when no query" time="0.0030" classname="should return undefined when no query">
    </testcase>
  </testsuite>
  <testsuite name="BodyParams" timestamp="2020-10-09T18:19:53" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario 1: POST /rest/body-params/scenario-1" timestamp="2020-10-09T18:19:53" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0070" failures="0">
    <testcase name="PlatformExpress BodyParams Scenario 1: POST /rest/body-params/scenario-1 should return a 201 response" time="0.0070" classname="should return a 201 response">
    </testcase>
  </testsuite>
  <testsuite name="Scenario2: with expression Array&lt;string&gt;" timestamp="2020-10-09T18:19:53" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0100" failures="0">
    <testcase name="PlatformExpress BodyParams Scenario2: with expression Array&lt;string&gt; should return value" time="0.0040" classname="should return value">
    </testcase>
    <testcase name="PlatformExpress BodyParams Scenario2: with expression Array&lt;string&gt; should return an empty array (1)" time="0.0030" classname="should return an empty array (1)">
    </testcase>
    <testcase name="PlatformExpress BodyParams Scenario2: with expression Array&lt;string&gt; should return an empty value (2)" time="0.0030" classname="should return an empty value (2)">
    </testcase>
  </testsuite>
  <testsuite name="Scenario3: without expression Array&lt;string&gt;" timestamp="2020-10-09T18:19:53" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0060" failures="0">
    <testcase name="PlatformExpress BodyParams Scenario3: without expression Array&lt;string&gt; should return value" time="0.0030" classname="should return value">
    </testcase>
    <testcase name="PlatformExpress BodyParams Scenario3: without expression Array&lt;string&gt; should return an empty array (1)" time="0.0030" classname="should return an empty array (1)">
    </testcase>
  </testsuite>
  <testsuite name="Scenario4: with expression required Array&lt;string&gt;" timestamp="2020-10-09T18:19:53" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0070" failures="0">
    <testcase name="PlatformExpress BodyParams Scenario4: with expression required Array&lt;string&gt; should return value" time="0.0030" classname="should return value">
    </testcase>
    <testcase name="PlatformExpress BodyParams Scenario4: with expression required Array&lt;string&gt; should return an empty array (1)" time="0.0040" classname="should return an empty array (1)">
    </testcase>
  </testsuite>
  <testsuite name="Location" timestamp="2020-10-09T18:19:53" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformExpress Location Scenario1: GET /rest/location/scenario-1" time="0.0040" classname="Scenario1: GET /rest/location/scenario-1">
    </testcase>
  </testsuite>
  <testsuite name="Redirect" timestamp="2020-10-09T18:19:53" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0140" failures="0">
    <testcase name="PlatformExpress Redirect Scenario1: GET /rest/redirect/scenario-1" time="0.0070" classname="Scenario1: GET /rest/redirect/scenario-1">
    </testcase>
    <testcase name="PlatformExpress Redirect Scenario2: GET /rest/redirect/scenario-2" time="0.0030" classname="Scenario2: GET /rest/redirect/scenario-2">
    </testcase>
    <testcase name="PlatformExpress Redirect Scenario3: HEAD /rest/redirect/scenario-1" time="0.0040" classname="Scenario3: HEAD /rest/redirect/scenario-1">
    </testcase>
  </testsuite>
  <testsuite name="View" timestamp="2020-10-09T18:19:53" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario1: GET /rest/views/scenario-1" timestamp="2020-10-09T18:19:53" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0130" failures="0">
    <testcase name="PlatformExpress View Scenario1: GET /rest/views/scenario-1 should render a view" time="0.0130" classname="should render a view">
    </testcase>
  </testsuite>
  <testsuite name="Scenario2: GET /rest/views/scenario-2" timestamp="2020-10-09T18:19:53" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0070" failures="0">
    <testcase name="PlatformExpress View Scenario2: GET /rest/views/scenario-2 should throw an error when extension is not defined" time="0.0070" classname="should throw an error when extension is not defined">
    </testcase>
  </testsuite>
  <testsuite name="Errors" timestamp="2020-10-09T18:19:53" tests="7" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0340" failures="0">
    <testcase name="PlatformExpress Errors Scenario 1: GET /rest/errors/scenario-1" time="0.0050" classname="Scenario 1: GET /rest/errors/scenario-1">
    </testcase>
    <testcase name="PlatformExpress Errors Scenario 2: GET /rest/errors/scenario-2" time="0.0040" classname="Scenario 2: GET /rest/errors/scenario-2">
    </testcase>
    <testcase name="PlatformExpress Errors Scenario 3: GET /rest/errors/scenario-3" time="0.0040" classname="Scenario 3: GET /rest/errors/scenario-3">
    </testcase>
    <testcase name="PlatformExpress Errors Scenario 4: POST /rest/errors/scenario-4" time="0.0040" classname="Scenario 4: POST /rest/errors/scenario-4">
    </testcase>
    <testcase name="PlatformExpress Errors Scenario 5: POST /rest/errors/scenario-5" time="0.0080" classname="Scenario 5: POST /rest/errors/scenario-5">
    </testcase>
    <testcase name="PlatformExpress Errors Scenario 6: POST /rest/errors/scenario-6" time="0.0050" classname="Scenario 6: POST /rest/errors/scenario-6">
    </testcase>
    <testcase name="PlatformExpress Errors Scenario 7: GET /rest/errors/scenario-7" time="0.0040" classname="Scenario 7: GET /rest/errors/scenario-7">
    </testcase>
  </testsuite>
  <testsuite name="Response" timestamp="2020-10-09T18:19:53" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario1: when multiple endpoint for the same path (classic)" timestamp="2020-10-09T18:19:53" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="GET /rest/response/scenario1/:id" timestamp="2020-10-09T18:19:53" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformExpress Response Scenario1: when multiple endpoint for the same path (classic) GET /rest/response/scenario1/:id should return the id + test" time="0.0040" classname="should return the id + test">
    </testcase>
  </testsuite>
  <testsuite name="Scenario2: when multiple endpoint for the same path (with next)" timestamp="2020-10-09T18:19:53" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="GET /rest/response/scenario1/:id" timestamp="2020-10-09T18:19:53" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.1070" failures="0">
    <testcase name="PlatformExpress Response Scenario2: when multiple endpoint for the same path (with next) GET /rest/response/scenario1/:id should return the id + test" time="0.1070" classname="should return the id + test">
    </testcase>
  </testsuite>
  <testsuite name="Scenario3: when response is empty or created" timestamp="2020-10-09T18:19:53" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="GET /rest/response/scenario3/:id?" timestamp="2020-10-09T18:19:53" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0110" failures="0">
    <testcase name="PlatformExpress Response Scenario3: when response is empty or created GET /rest/response/scenario3/:id? should return nothing with a 204 status" time="0.0050" classname="should return nothing with a 204 status">
    </testcase>
    <testcase name="PlatformExpress Response Scenario3: when response is empty or created GET /rest/response/scenario3/:id? should return a body" time="0.0060" classname="should return a body">
    </testcase>
  </testsuite>
  <testsuite name="Scenario5: when endpoint response from promise" timestamp="2020-10-09T18:19:53" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="GET /rest/response/scenario5" timestamp="2020-10-09T18:19:53" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformExpress Response Scenario5: when endpoint response from promise GET /rest/response/scenario5 should return a body" time="0.0040" classname="should return a body">
    </testcase>
  </testsuite>
  <testsuite name="Scenario6: when endpoint return an observable" timestamp="2020-10-09T18:19:53" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="GET /rest/response/scenario6" timestamp="2020-10-09T18:19:53" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0050" failures="0">
    <testcase name="PlatformExpress Response Scenario6: when endpoint return an observable GET /rest/response/scenario6 should return a body" time="0.0050" classname="should return a body">
    </testcase>
  </testsuite>
  <testsuite name="GET /rest/response/scenario6b" timestamp="2020-10-09T18:19:53" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformExpress Response Scenario6: when endpoint return an observable GET /rest/response/scenario6b should return a body" time="0.0040" classname="should return a body">
    </testcase>
  </testsuite>
  <testsuite name="Scenario7: when endpoint return a stream" timestamp="2020-10-09T18:19:53" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="GET /rest/response/scenario7" timestamp="2020-10-09T18:19:53" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0090" failures="0">
    <testcase name="PlatformExpress Response Scenario7: when endpoint return a stream GET /rest/response/scenario7 should return a body" time="0.0090" classname="should return a body">
    </testcase>
  </testsuite>
  <testsuite name="GET /rest/response/scenario7b" timestamp="2020-10-09T18:19:53" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformExpress Response Scenario7: when endpoint return a stream GET /rest/response/scenario7b should return a body" time="0.0040" classname="should return a body">
    </testcase>
  </testsuite>
  <testsuite name="Scenario9: routes without parameters must be defined first in express" timestamp="2020-10-09T18:19:53" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="GET /rest/response/scenario9/static" timestamp="2020-10-09T18:19:53" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0030" failures="0">
    <testcase name="PlatformExpress Response Scenario9: routes without parameters must be defined first in express GET /rest/response/scenario9/static should return the test" time="0.0030" classname="should return the test">
    </testcase>
  </testsuite>
  <testsuite name="GET /rest/response/scenario9/:dynamic" timestamp="2020-10-09T18:19:53" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformExpress Response Scenario9: routes without parameters must be defined first in express GET /rest/response/scenario9/:dynamic should return the test + id" time="0.0020" classname="should return the test + id">
    </testcase>
  </testsuite>
  <testsuite name="GET /rest/response/scenario9/:dynamic" timestamp="2020-10-09T18:19:53" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0030" failures="0">
    <testcase name="PlatformExpress Response Scenario9: routes without parameters must be defined first in express GET /rest/response/scenario9/:dynamic should throw a badRequest when path params isn&apos;t set as number" time="0.0030" classname="should throw a badRequest when path params isn&apos;t set as number">
    </testcase>
  </testsuite>
  <testsuite name="Routing" timestamp="2020-10-09T18:19:53" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0080" failures="0">
    <testcase name="PlatformExpress Routing Scenario1: should call scenario1 only" time="0.0030" classname="Scenario1: should call scenario1 only">
    </testcase>
    <testcase name="PlatformExpress Routing Scenario2: should call scenario2 only" time="0.0020" classname="Scenario2: should call scenario2 only">
    </testcase>
    <testcase name="PlatformExpress Routing Scenario3: should call scenario3 only" time="0.0030" classname="Scenario3: should call scenario3 only">
    </testcase>
  </testsuite>
  <testsuite name="Controller inheritance" timestamp="2020-10-09T18:19:53" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0130" failures="0">
    <testcase name="PlatformExpress Controller inheritance Scenario1: should call inherited method" time="0.0060" classname="Scenario1: should call inherited method">
    </testcase>
    <testcase name="PlatformExpress Controller inheritance Scenario2: should the Child method" time="0.0030" classname="Scenario2: should the Child method">
    </testcase>
    <testcase name="PlatformExpress Controller inheritance Scenario2: should call the Child method and not the base method" time="0.0030" classname="Scenario2: should call the Child method and not the base method">
    </testcase>
    <testcase name="PlatformExpress Controller inheritance should generate swagger json" time="0.0010" classname="should generate swagger json">
    </testcase>
  </testsuite>
  <testsuite name="Locals" timestamp="2020-10-09T18:19:53" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario 1: GET /rest/locals/scenario-1" timestamp="2020-10-09T18:19:53" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformExpress Locals Scenario 1: GET /rest/locals/scenario-1 should call middleware and set a id in locals" time="0.0040" classname="should call middleware and set a id in locals">
    </testcase>
  </testsuite>
  <testsuite name="Multer" timestamp="2020-10-09T18:19:53" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario 1: POST /rest/multer/scenario-1" timestamp="2020-10-09T18:19:53" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0650" failures="0">
    <testcase name="PlatformExpress Multer Scenario 1: POST /rest/multer/scenario-1 should upload file with multer" time="0.0650" classname="should upload file with multer">
    </testcase>
  </testsuite>
  <testsuite name="Auth" timestamp="2020-10-09T18:19:54" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario 1: Create token, test token and stepup token" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0250" failures="0">
    <testcase name="PlatformExpress Auth Scenario 1: Create token, test token and stepup token should create a token, call /userinfo to get userinfo and try admin route" time="0.0250" classname="should create a token, call /userinfo to get userinfo and try admin route">
    </testcase>
  </testsuite>
  <testsuite name="Scenario 2: GET /swagger.json" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0050" failures="0">
    <testcase name="PlatformExpress Auth Scenario 2: GET /swagger.json should generate the swagger.spec" time="0.0050" classname="should generate the swagger.spec">
    </testcase>
  </testsuite>
  <testsuite name="Module" timestamp="2020-10-09T18:19:54" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario1: GET /rest/root" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0030" failures="0">
    <testcase name="PlatformExpress Module Scenario1: GET /rest/root should get content from root controller" time="0.0030" classname="should get content from root controller">
    </testcase>
  </testsuite>
  <testsuite name="Scenario2: GET /rest/features" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-express/test/platform-express.spec.ts" time="0.0030" failures="0">
    <testcase name="PlatformExpress Module Scenario2: GET /rest/features should get content from a module with his controller" time="0.0030" classname="should get content from a module with his controller">
    </testcase>
  </testsuite>
  <testsuite name="PlatformKoa" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/components/PlatformKoa.spec.ts" time="0.0010" failures="0">
    <testcase name="PlatformKoa should create the platform" time="0.0010" classname="should create the platform">
    </testcase>
  </testsuite>
  <testsuite name="@Ctx" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/decorators/ctx.spec.ts" time="0.0000" failures="0">
    <testcase name="@Ctx should call store the right configuration" time="0.0000" classname="should call store the right configuration">
    </testcase>
  </testsuite>
  <testsuite name="RouterSettings" timestamp="2020-10-09T18:19:54" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/decorators/routerSettings.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="CaseSensitive" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/decorators/routerSettings.spec.ts" time="0.0000" failures="0">
    <testcase name="RouterSettings CaseSensitive should call merge method for mergeParams options" time="0.0000" classname="should call merge method for mergeParams options">
    </testcase>
  </testsuite>
  <testsuite name="Strict" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/decorators/routerSettings.spec.ts" time="0.0000" failures="0">
    <testcase name="RouterSettings Strict should call merge method for mergeParams options" time="0.0000" classname="should call merge method for mergeParams options">
    </testcase>
  </testsuite>
  <testsuite name="Strict" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/decorators/routerSettings.spec.ts" time="0.0000" failures="0">
    <testcase name="RouterSettings Strict should call merge method for mergeParams options" time="0.0000" classname="should call merge method for mergeParams options">
    </testcase>
  </testsuite>
  <testsuite name="@State" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/decorators/state.spec.ts" time="0.0000" failures="0">
    <testcase name="@State should call ParamFilter.useParam method with the correct parameters" time="0.0000" classname="should call ParamFilter.useParam method with the correct parameters">
    </testcase>
  </testsuite>
  <testsuite name="PlatformKoaHandler" timestamp="2020-10-09T18:19:54" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/services/PlatformKoaHandler.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="createHandler" timestamp="2020-10-09T18:19:54" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/services/PlatformKoaHandler.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="$CTX" timestamp="2020-10-09T18:19:54" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/services/PlatformKoaHandler.spec.ts" time="0.0030" failures="0">
    <testcase name="PlatformKoaHandler createHandler $CTX should return a native handler with 3 params" time="0.0000" classname="should return a native handler with 3 params">
    </testcase>
    <testcase name="PlatformKoaHandler createHandler $CTX should catch error from handler" time="0.0030" classname="should catch error from handler">
    </testcase>
  </testsuite>
  <testsuite name="getArg()" timestamp="2020-10-09T18:19:54" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/services/PlatformKoaHandler.spec.ts" time="0.0050" failures="0">
    <testcase name="PlatformKoaHandler getArg() should return KOA_CTX" time="0.0020" classname="should return KOA_CTX">
    </testcase>
    <testcase name="PlatformKoaHandler getArg() should return STATE" time="0.0030" classname="should return STATE">
    </testcase>
  </testsuite>
  <testsuite name="PlatformKoaRequest" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/services/PlatformKoaRequest.spec.ts" time="0.0010" failures="0">
    <testcase name="PlatformKoaRequest should create a PlatformRequest instance" time="0.0010" classname="should create a PlatformRequest instance">
    </testcase>
  </testsuite>
  <testsuite name="cookies" timestamp="2020-10-09T18:19:54" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/services/PlatformKoaRequest.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformKoaRequest cookies should get cookies from cookie" time="0.0010" classname="should get cookies from cookie">
    </testcase>
    <testcase name="PlatformKoaRequest cookies should get cookies from cookies" time="0.0010" classname="should get cookies from cookies">
    </testcase>
  </testsuite>
  <testsuite name="session" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/services/PlatformKoaRequest.spec.ts" time="0.0010" failures="0">
    <testcase name="PlatformKoaRequest session should get session" time="0.0010" classname="should get session">
    </testcase>
  </testsuite>
  <testsuite name="getReq()" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/services/PlatformKoaRequest.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformKoaRequest getReq() should return nodejs request" time="0.0020" classname="should return nodejs request">
    </testcase>
  </testsuite>
  <testsuite name="PlatformKoaResponse" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/services/PlatformKoaResponse.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformKoaResponse should create a PlatformResponse instance" time="0.0020" classname="should create a PlatformResponse instance">
    </testcase>
  </testsuite>
  <testsuite name="getRes()" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/services/PlatformKoaResponse.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformKoaResponse getRes() return res" time="0.0020" classname="return res">
    </testcase>
  </testsuite>
  <testsuite name="statusCode" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/services/PlatformKoaResponse.spec.ts" time="0.0030" failures="0">
    <testcase name="PlatformKoaResponse statusCode return statusCode" time="0.0030" classname="return statusCode">
    </testcase>
  </testsuite>
  <testsuite name="hasStatus" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/services/PlatformKoaResponse.spec.ts" time="0.0030" failures="0">
    <testcase name="PlatformKoaResponse hasStatus return hasStatus" time="0.0030" classname="return hasStatus">
    </testcase>
  </testsuite>
  <testsuite name="contentType()" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/services/PlatformKoaResponse.spec.ts" time="0.0030" failures="0">
    <testcase name="PlatformKoaResponse contentType() should set contentType" time="0.0030" classname="should set contentType">
    </testcase>
  </testsuite>
  <testsuite name="body()" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/services/PlatformKoaResponse.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformKoaResponse body() should set body" time="0.0020" classname="should set body">
    </testcase>
  </testsuite>
  <testsuite name="location" timestamp="2020-10-09T18:19:54" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/services/PlatformKoaResponse.spec.ts" time="0.0060" failures="0">
    <testcase name="PlatformKoaResponse location should set header location" time="0.0020" classname="should set header location">
    </testcase>
    <testcase name="PlatformKoaResponse location should go back based on Referrer" time="0.0020" classname="should go back based on Referrer">
    </testcase>
    <testcase name="PlatformKoaResponse location should go back based on default path" time="0.0020" classname="should go back based on default path">
    </testcase>
  </testsuite>
  <testsuite name="redirect" timestamp="2020-10-09T18:19:54" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/src/services/PlatformKoaResponse.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformKoaResponse redirect should set header location (HEAD)" time="0.0020" classname="should set header location (HEAD)">
    </testcase>
    <testcase name="PlatformKoaResponse redirect should set header location (POST)" time="0.0020" classname="should set header location (POST)">
    </testcase>
  </testsuite>
  <testsuite name="PlatformKoa integration" timestamp="2020-10-09T18:19:54" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Handlers" timestamp="2020-10-09T18:19:54" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0140" failures="0">
    <testcase name="PlatformKoa integration Handlers Scenario 1: GET /rest/handlers/scenario-1/:id" time="0.0070" classname="Scenario 1: GET /rest/handlers/scenario-1/:id">
    </testcase>
    <testcase name="PlatformKoa integration Handlers Scenario 2: GET /rest/handlers/scenario-2/:id" time="0.0040" classname="Scenario 2: GET /rest/handlers/scenario-2/:id">
    </testcase>
    <testcase name="PlatformKoa integration Handlers Scenario 3: GET /rest/handlers/scenario-3/:id" time="0.0030" classname="Scenario 3: GET /rest/handlers/scenario-3/:id">
    </testcase>
  </testsuite>
  <testsuite name="Children controllers" timestamp="2020-10-09T18:19:54" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="scenario 1: GET /rest/controllers/scenario-1" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformKoa integration Children controllers scenario 1: GET /rest/controllers/scenario-1 should return a response from method" time="0.0040" classname="should return a response from method">
    </testcase>
  </testsuite>
  <testsuite name="scenario 2: GET /rest/controllers/children/scenario-2" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0050" failures="0">
    <testcase name="PlatformKoa integration Children controllers scenario 2: GET /rest/controllers/children/scenario-2 should return a response from method" time="0.0050" classname="should return a response from method">
    </testcase>
  </testsuite>
  <testsuite name="Inheritance controllers" timestamp="2020-10-09T18:19:54" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0260" failures="0">
    <testcase name="PlatformKoa integration Inheritance controllers should return list" time="0.0050" classname="should return list">
    </testcase>
    <testcase name="PlatformKoa integration Inheritance controllers should return a resource" time="0.0040" classname="should return a resource">
    </testcase>
    <testcase name="PlatformKoa integration Inheritance controllers should add a resource" time="0.0170" classname="should add a resource">
    </testcase>
  </testsuite>
  <testsuite name="Scope Request" timestamp="2020-10-09T18:19:54" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="GET /rest/scopes-request/:id" timestamp="2020-10-09T18:19:54" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.5070" failures="0">
    <testcase name="PlatformKoa integration Scope Request GET /rest/scopes-request/:id should respond with the right userId per request" time="0.5070" classname="should respond with the right userId per request">
    </testcase>
  </testsuite>
  <testsuite name="Headers" timestamp="2020-10-09T18:19:55" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0060" failures="0">
    <testcase name="PlatformKoa integration Headers Scenario1: GET /rest/headers/scenario-1" time="0.0040" classname="Scenario1: GET /rest/headers/scenario-1">
    </testcase>
    <testcase name="PlatformKoa integration Headers Scenario2: GET /rest/headers/scenario-2" time="0.0020" classname="Scenario2: GET /rest/headers/scenario-2">
    </testcase>
  </testsuite>
  <testsuite name="Statics files" timestamp="2020-10-09T18:19:55" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0150" failures="0">
    <testcase name="PlatformKoa integration Statics files should return index HTML (1)" time="0.0050" classname="should return index HTML (1)">
    </testcase>
    <testcase name="PlatformKoa integration Statics files should return index HTML (2)" time="0.0030" classname="should return index HTML (2)">
    </testcase>
    <testcase name="PlatformKoa integration Statics files should return index HTML (3)" time="0.0040" classname="should return index HTML (3)">
    </testcase>
    <testcase name="PlatformKoa integration Statics files should return 404" time="0.0030" classname="should return 404">
    </testcase>
  </testsuite>
  <testsuite name="Cookies" timestamp="2020-10-09T18:19:55" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformKoa integration Cookies Scenario 1: GET /rest/cookies/scenario-1" time="0.0040" classname="Scenario 1: GET /rest/cookies/scenario-1">
    </testcase>
  </testsuite>
  <testsuite name="Session" timestamp="2020-10-09T18:19:55" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario1: POST /rest/session/connected" timestamp="2020-10-09T18:19:55" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0180" failures="0">
    <testcase name="PlatformKoa integration Session Scenario1: POST /rest/session/connected should keep connected user in session and destroy session" time="0.0180" classname="should keep connected user in session and destroy session">
    </testcase>
  </testsuite>
  <testsuite name="AcceptMime" timestamp="2020-10-09T18:19:55" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario 1: POST /rest/accept-mime/scenario-1" timestamp="2020-10-09T18:19:55" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0060" failures="0">
    <testcase name="PlatformKoa integration AcceptMime Scenario 1: POST /rest/accept-mime/scenario-1 should return a 200 response when Accept header match with @AcceptMime(&quot;application/json&quot;)" time="0.0030" classname="should return a 200 response when Accept header match with @AcceptMime(&quot;application/json&quot;)">
    </testcase>
    <testcase name="PlatformKoa integration AcceptMime Scenario 1: POST /rest/accept-mime/scenario-1 should return a 406 response when Accept header doesn&apos;t match with @AcceptMime(&quot;application/json&quot;)" time="0.0030" classname="should return a 406 response when Accept header doesn&apos;t match with @AcceptMime(&quot;application/json&quot;)">
    </testcase>
  </testsuite>
  <testsuite name="HeaderParams" timestamp="2020-10-09T18:19:55" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario 1: GET /rest/header-params/scenario-1" timestamp="2020-10-09T18:19:55" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformKoa integration HeaderParams Scenario 1: GET /rest/header-params/scenario-1 should return a response with the extracted authorization from the request headers" time="0.0040" classname="should return a response with the extracted authorization from the request headers">
    </testcase>
  </testsuite>
  <testsuite name="Scenario 2: POST with contentType" timestamp="2020-10-09T18:19:55" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0030" failures="0">
    <testcase name="PlatformKoa integration HeaderParams Scenario 2: POST with contentType should return a response with the extracted contentType from the request headers" time="0.0030" classname="should return a response with the extracted contentType from the request headers">
    </testcase>
  </testsuite>
  <testsuite name="PathParams" timestamp="2020-10-09T18:19:55" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0110" failures="0">
    <testcase name="PlatformKoa integration PathParams Scenario 1: GET /rest/path-params/scenario-1/scope/scopeId" time="0.0040" classname="Scenario 1: GET /rest/path-params/scenario-1/scope/scopeId">
    </testcase>
    <testcase name="PlatformKoa integration PathParams Scenario 2: GET /rest/path-params/scenario-2/scopeId" time="0.0020" classname="Scenario 2: GET /rest/path-params/scenario-2/scopeId">
    </testcase>
    <testcase name="PlatformKoa integration PathParams Scenario 3: POST /rest/path-params/scenario-3/scope/scopeId" time="0.0020" classname="Scenario 3: POST /rest/path-params/scenario-3/scope/scopeId">
    </testcase>
    <testcase name="PlatformKoa integration PathParams Scenario 4: POST /rest/path-params/scenario-4/scope/scopeId" time="0.0030" classname="Scenario 4: POST /rest/path-params/scenario-4/scope/scopeId">
    </testcase>
  </testsuite>
  <testsuite name="QueryParams" timestamp="2020-10-09T18:19:55" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario1: Boolean value" timestamp="2020-10-09T18:19:55" tests="7" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0280" failures="0">
    <testcase name="PlatformKoa integration QueryParams Scenario1: Boolean value should return true when query is true" time="0.0060" classname="should return true when query is true">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario1: Boolean value should return true when query is 1" time="0.0020" classname="should return true when query is 1">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario1: Boolean value should return false when query is false" time="0.0050" classname="should return false when query is false">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario1: Boolean value should return false when query is 0" time="0.0060" classname="should return false when query is 0">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario1: Boolean value should return false when query is null" time="0.0040" classname="should return false when query is null">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario1: Boolean value should return undefined when query is empty" time="0.0020" classname="should return undefined when query is empty">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario1: Boolean value should return undefined when no query" time="0.0030" classname="should return undefined when no query">
    </testcase>
  </testsuite>
  <testsuite name="Scenario2: Boolean value with default value" timestamp="2020-10-09T18:19:55" tests="7" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0180" failures="0">
    <testcase name="PlatformKoa integration QueryParams Scenario2: Boolean value with default value should return true when query is true" time="0.0030" classname="should return true when query is true">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario2: Boolean value with default value should return true when query is 1" time="0.0040" classname="should return true when query is 1">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario2: Boolean value with default value should return false when query is false" time="0.0020" classname="should return false when query is false">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario2: Boolean value with default value should return false when query is 0" time="0.0020" classname="should return false when query is 0">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario2: Boolean value with default value should return false when query is null" time="0.0030" classname="should return false when query is null">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario2: Boolean value with default value should return undefined when query is empty" time="0.0020" classname="should return undefined when query is empty">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario2: Boolean value with default value should return undefined when no query" time="0.0020" classname="should return undefined when no query">
    </testcase>
  </testsuite>
  <testsuite name="Scenario3: Number value" timestamp="2020-10-09T18:19:55" tests="7" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0160" failures="0">
    <testcase name="PlatformKoa integration QueryParams Scenario3: Number value should return 0 when query is 0" time="0.0020" classname="should return 0 when query is 0">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario3: Number value should return 1 when query is 1" time="0.0030" classname="should return 1 when query is 1">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario3: Number value should return 0.1 when query is 0.1" time="0.0020" classname="should return 0.1 when query is 0.1">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario3: Number value should throw bad request" time="0.0030" classname="should throw bad request">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario3: Number value should return undefined when query is empty" time="0.0020" classname="should return undefined when query is empty">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario3: Number value should return undefined when query is empty" time="0.0020" classname="should return undefined when query is empty">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario3: Number value should return undefined when no query" time="0.0020" classname="should return undefined when no query">
    </testcase>
  </testsuite>
  <testsuite name="Scenario4: String value" timestamp="2020-10-09T18:19:55" tests="5" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0120" failures="0">
    <testcase name="PlatformKoa integration QueryParams Scenario4: String value should return 0 when query is 0" time="0.0030" classname="should return 0 when query is 0">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario4: String value should return 1 when query is 1" time="0.0020" classname="should return 1 when query is 1">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario4: String value should return 0.1 when query is 0.1" time="0.0020" classname="should return 0.1 when query is 0.1">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario4: String value should return undefined when query is empty" time="0.0030" classname="should return undefined when query is empty">
    </testcase>
    <testcase name="PlatformKoa integration QueryParams Scenario4: String value should return undefined when no query" time="0.0020" classname="should return undefined when no query">
    </testcase>
  </testsuite>
  <testsuite name="BodyParams" timestamp="2020-10-09T18:19:55" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario 1: POST /rest/body-params/scenario-1" timestamp="2020-10-09T18:19:55" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0060" failures="0">
    <testcase name="PlatformKoa integration BodyParams Scenario 1: POST /rest/body-params/scenario-1 should return a 201 response" time="0.0060" classname="should return a 201 response">
    </testcase>
  </testsuite>
  <testsuite name="Scenario2: with expression Array&lt;string&gt;" timestamp="2020-10-09T18:19:55" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0080" failures="0">
    <testcase name="PlatformKoa integration BodyParams Scenario2: with expression Array&lt;string&gt; should return value" time="0.0030" classname="should return value">
    </testcase>
    <testcase name="PlatformKoa integration BodyParams Scenario2: with expression Array&lt;string&gt; should return an empty array (1)" time="0.0030" classname="should return an empty array (1)">
    </testcase>
    <testcase name="PlatformKoa integration BodyParams Scenario2: with expression Array&lt;string&gt; should return an empty value (2)" time="0.0020" classname="should return an empty value (2)">
    </testcase>
  </testsuite>
  <testsuite name="Scenario3: without expression Array&lt;string&gt;" timestamp="2020-10-09T18:19:55" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0100" failures="0">
    <testcase name="PlatformKoa integration BodyParams Scenario3: without expression Array&lt;string&gt; should return value" time="0.0050" classname="should return value">
    </testcase>
    <testcase name="PlatformKoa integration BodyParams Scenario3: without expression Array&lt;string&gt; should return an empty array (1)" time="0.0050" classname="should return an empty array (1)">
    </testcase>
  </testsuite>
  <testsuite name="Scenario4: with expression required Array&lt;string&gt;" timestamp="2020-10-09T18:19:55" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0060" failures="0">
    <testcase name="PlatformKoa integration BodyParams Scenario4: with expression required Array&lt;string&gt; should return value" time="0.0030" classname="should return value">
    </testcase>
    <testcase name="PlatformKoa integration BodyParams Scenario4: with expression required Array&lt;string&gt; should return an empty array (1)" time="0.0030" classname="should return an empty array (1)">
    </testcase>
  </testsuite>
  <testsuite name="Location" timestamp="2020-10-09T18:19:55" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0030" failures="0">
    <testcase name="PlatformKoa integration Location Scenario1: GET /rest/location/scenario-1" time="0.0030" classname="Scenario1: GET /rest/location/scenario-1">
    </testcase>
  </testsuite>
  <testsuite name="Redirect" timestamp="2020-10-09T18:19:55" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0090" failures="0">
    <testcase name="PlatformKoa integration Redirect Scenario1: GET /rest/redirect/scenario-1" time="0.0040" classname="Scenario1: GET /rest/redirect/scenario-1">
    </testcase>
    <testcase name="PlatformKoa integration Redirect Scenario2: GET /rest/redirect/scenario-2" time="0.0030" classname="Scenario2: GET /rest/redirect/scenario-2">
    </testcase>
    <testcase name="PlatformKoa integration Redirect Scenario3: HEAD /rest/redirect/scenario-1" time="0.0020" classname="Scenario3: HEAD /rest/redirect/scenario-1">
    </testcase>
  </testsuite>
  <testsuite name="View" timestamp="2020-10-09T18:19:55" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario1: GET /rest/views/scenario-1" timestamp="2020-10-09T18:19:55" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0060" failures="0">
    <testcase name="PlatformKoa integration View Scenario1: GET /rest/views/scenario-1 should render a view" time="0.0060" classname="should render a view">
    </testcase>
  </testsuite>
  <testsuite name="Scenario2: GET /rest/views/scenario-2" timestamp="2020-10-09T18:19:55" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformKoa integration View Scenario2: GET /rest/views/scenario-2 should throw an error when extension is not defined" time="0.0040" classname="should throw an error when extension is not defined">
    </testcase>
  </testsuite>
  <testsuite name="Errors" timestamp="2020-10-09T18:19:55" tests="7" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0220" failures="0">
    <testcase name="PlatformKoa integration Errors Scenario 1: GET /rest/errors/scenario-1" time="0.0030" classname="Scenario 1: GET /rest/errors/scenario-1">
    </testcase>
    <testcase name="PlatformKoa integration Errors Scenario 2: GET /rest/errors/scenario-2" time="0.0030" classname="Scenario 2: GET /rest/errors/scenario-2">
    </testcase>
    <testcase name="PlatformKoa integration Errors Scenario 3: GET /rest/errors/scenario-3" time="0.0020" classname="Scenario 3: GET /rest/errors/scenario-3">
    </testcase>
    <testcase name="PlatformKoa integration Errors Scenario 4: POST /rest/errors/scenario-4" time="0.0030" classname="Scenario 4: POST /rest/errors/scenario-4">
    </testcase>
    <testcase name="PlatformKoa integration Errors Scenario 5: POST /rest/errors/scenario-5" time="0.0050" classname="Scenario 5: POST /rest/errors/scenario-5">
    </testcase>
    <testcase name="PlatformKoa integration Errors Scenario 6: POST /rest/errors/scenario-6" time="0.0030" classname="Scenario 6: POST /rest/errors/scenario-6">
    </testcase>
    <testcase name="PlatformKoa integration Errors Scenario 7: GET /rest/errors/scenario-7" time="0.0030" classname="Scenario 7: GET /rest/errors/scenario-7">
    </testcase>
  </testsuite>
  <testsuite name="Response" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario1: when multiple endpoint for the same path (classic)" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="GET /rest/response/scenario1/:id" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformKoa integration Response Scenario1: when multiple endpoint for the same path (classic) GET /rest/response/scenario1/:id should return the id + test" time="0.0040" classname="should return the id + test">
    </testcase>
  </testsuite>
  <testsuite name="Scenario2: when multiple endpoint for the same path (with next)" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="GET /rest/response/scenario1/:id" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.1060" failures="0">
    <testcase name="PlatformKoa integration Response Scenario2: when multiple endpoint for the same path (with next) GET /rest/response/scenario1/:id should return the id + test" time="0.1060" classname="should return the id + test">
    </testcase>
  </testsuite>
  <testsuite name="Scenario3: when response is empty or created" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="GET /rest/response/scenario3/:id?" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0050" failures="0">
    <testcase name="PlatformKoa integration Response Scenario3: when response is empty or created GET /rest/response/scenario3/:id? should return nothing with a 204 status" time="0.0030" classname="should return nothing with a 204 status">
    </testcase>
    <testcase name="PlatformKoa integration Response Scenario3: when response is empty or created GET /rest/response/scenario3/:id? should return a body" time="0.0020" classname="should return a body">
    </testcase>
  </testsuite>
  <testsuite name="Scenario5: when endpoint response from promise" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="GET /rest/response/scenario5" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformKoa integration Response Scenario5: when endpoint response from promise GET /rest/response/scenario5 should return a body" time="0.0040" classname="should return a body">
    </testcase>
  </testsuite>
  <testsuite name="Scenario6: when endpoint return an observable" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="GET /rest/response/scenario6" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0030" failures="0">
    <testcase name="PlatformKoa integration Response Scenario6: when endpoint return an observable GET /rest/response/scenario6 should return a body" time="0.0030" classname="should return a body">
    </testcase>
  </testsuite>
  <testsuite name="GET /rest/response/scenario6b" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0030" failures="0">
    <testcase name="PlatformKoa integration Response Scenario6: when endpoint return an observable GET /rest/response/scenario6b should return a body" time="0.0030" classname="should return a body">
    </testcase>
  </testsuite>
  <testsuite name="Scenario7: when endpoint return a stream" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="GET /rest/response/scenario7" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0050" failures="0">
    <testcase name="PlatformKoa integration Response Scenario7: when endpoint return a stream GET /rest/response/scenario7 should return a body" time="0.0050" classname="should return a body">
    </testcase>
  </testsuite>
  <testsuite name="GET /rest/response/scenario7b" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0030" failures="0">
    <testcase name="PlatformKoa integration Response Scenario7: when endpoint return a stream GET /rest/response/scenario7b should return a body" time="0.0030" classname="should return a body">
    </testcase>
  </testsuite>
  <testsuite name="Scenario9: routes without parameters must be defined first in express" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="GET /rest/response/scenario9/static" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformKoa integration Response Scenario9: routes without parameters must be defined first in express GET /rest/response/scenario9/static should return the test" time="0.0020" classname="should return the test">
    </testcase>
  </testsuite>
  <testsuite name="GET /rest/response/scenario9/:dynamic" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformKoa integration Response Scenario9: routes without parameters must be defined first in express GET /rest/response/scenario9/:dynamic should return the test + id" time="0.0040" classname="should return the test + id">
    </testcase>
  </testsuite>
  <testsuite name="GET /rest/response/scenario9/:dynamic" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformKoa integration Response Scenario9: routes without parameters must be defined first in express GET /rest/response/scenario9/:dynamic should throw a badRequest when path params isn&apos;t set as number" time="0.0040" classname="should throw a badRequest when path params isn&apos;t set as number">
    </testcase>
  </testsuite>
  <testsuite name="Routing" timestamp="2020-10-09T18:19:56" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0070" failures="0">
    <testcase name="PlatformKoa integration Routing Scenario1: should call scenario1 only" time="0.0030" classname="Scenario1: should call scenario1 only">
    </testcase>
    <testcase name="PlatformKoa integration Routing Scenario2: should call scenario2 only" time="0.0020" classname="Scenario2: should call scenario2 only">
    </testcase>
    <testcase name="PlatformKoa integration Routing Scenario3: should call scenario3 only" time="0.0020" classname="Scenario3: should call scenario3 only">
    </testcase>
  </testsuite>
  <testsuite name="Locals" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario 1: GET /rest/locals/scenario-1" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformKoa integration Locals Scenario 1: GET /rest/locals/scenario-1 should call middleware and set a id in locals" time="0.0040" classname="should call middleware and set a id in locals">
    </testcase>
  </testsuite>
  <testsuite name="Multer" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario 1: POST /rest/multer/scenario-1" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0060" failures="0">
    <testcase name="PlatformKoa integration Multer Scenario 1: POST /rest/multer/scenario-1 should upload file with multer" time="0.0060" classname="should upload file with multer">
    </testcase>
  </testsuite>
  <testsuite name="Auth" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario 1: Create token, test token and stepup token" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0170" failures="0">
    <testcase name="PlatformKoa integration Auth Scenario 1: Create token, test token and stepup token should create a token, call /userinfo to get userinfo and try admin route" time="0.0170" classname="should create a token, call /userinfo to get userinfo and try admin route">
    </testcase>
  </testsuite>
  <testsuite name="Scenario 2: GET /swagger.json" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0060" failures="0">
    <testcase name="PlatformKoa integration Auth Scenario 2: GET /swagger.json should generate the swagger.spec" time="0.0060" classname="should generate the swagger.spec">
    </testcase>
  </testsuite>
  <testsuite name="Module" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Scenario1: GET /rest/root" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0040" failures="0">
    <testcase name="PlatformKoa integration Module Scenario1: GET /rest/root should get content from root controller" time="0.0040" classname="should get content from root controller">
    </testcase>
  </testsuite>
  <testsuite name="Scenario2: GET /rest/features" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0030" failures="0">
    <testcase name="PlatformKoa integration Module Scenario2: GET /rest/features should get content from a module with his controller" time="0.0030" classname="should get content from a module with his controller">
    </testcase>
  </testsuite>
  <testsuite name="Custom404" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/platform-koa/test/platform-koa.spec.ts" time="0.0020" failures="0">
    <testcase name="PlatformKoa integration Custom404 Scenario 1: GET /" time="0.0020" classname="Scenario 1: GET /">
    </testcase>
  </testsuite>
  <testsuite name="@CollectionOf" timestamp="2020-10-09T18:19:56" tests="7" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/collections/collectionOf.spec.ts" time="0.0060" failures="0">
    <testcase name="@CollectionOf should declare a collection (Array of)" time="0.0000" classname="should declare a collection (Array of)">
    </testcase>
    <testcase name="@CollectionOf should declare a collection (Array of Model)" time="0.0020" classname="should declare a collection (Array of Model)">
    </testcase>
    <testcase name="@CollectionOf should declare a collection (Array of Model on param)" time="0.0010" classname="should declare a collection (Array of Model on param)">
    </testcase>
    <testcase name="@CollectionOf should declare a collection (Map of)" time="0.0010" classname="should declare a collection (Map of)">
    </testcase>
    <testcase name="@CollectionOf should declare a collection (Set of)" time="0.0010" classname="should declare a collection (Set of)">
    </testcase>
    <testcase name="@CollectionOf should declare collection with additional props" time="0.0000" classname="should declare collection with additional props">
    </testcase>
    <testcase name="@CollectionOf should declare collection with additional props and contains" time="0.0010" classname="should declare collection with additional props and contains">
    </testcase>
  </testsuite>
  <testsuite name="@ArrayOf" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/collections/collectionOf.spec.ts" time="0.0030" failures="0">
    <testcase name="@ArrayOf should declare a collection (Array of)" time="0.0030" classname="should declare a collection (Array of)">
    </testcase>
  </testsuite>
  <testsuite name="@MapOf" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/collections/collectionOf.spec.ts" time="0.0020" failures="0">
    <testcase name="@MapOf should declare a collection (Map of)" time="0.0020" classname="should declare a collection (Map of)">
    </testcase>
  </testsuite>
  <testsuite name="@MaxItems" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/collections/maxItems.spec.ts" time="0.0010" failures="0">
    <testcase name="@MaxItems should declare a prop" time="0.0010" classname="should declare a prop">
    </testcase>
    <testcase name="@MaxItems should throw error" time="0.0000" classname="should throw error">
    </testcase>
  </testsuite>
  <testsuite name="@MaxProperties" timestamp="2020-10-09T18:19:56" tests="5" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/collections/maxProperties.spec.ts" time="0.0070" failures="0">
    <testcase name="@MaxProperties should declare max value (any)" time="0.0010" classname="should declare max value (any)">
    </testcase>
    <testcase name="@MaxProperties should declare max value (Map&lt;any&gt;)" time="0.0020" classname="should declare max value (Map&lt;any&gt;)">
    </testcase>
    <testcase name="@MaxProperties should declare max value on class" time="0.0020" classname="should declare max value on class">
    </testcase>
    <testcase name="@MaxProperties should declare max value on param" time="0.0020" classname="should declare max value on param">
    </testcase>
    <testcase name="@MaxProperties should throw an error when the given parameters is as negative integer" time="0.0000" classname="should throw an error when the given parameters is as negative integer">
    </testcase>
  </testsuite>
  <testsuite name="@MinItems" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/collections/minItems.spec.ts" time="0.0010" failures="0">
    <testcase name="@MinItems should declare a prop" time="0.0010" classname="should declare a prop">
    </testcase>
    <testcase name="@MinItems should throw error" time="0.0000" classname="should throw error">
    </testcase>
  </testsuite>
  <testsuite name="@MinProperties" timestamp="2020-10-09T18:19:56" tests="5" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/collections/minProperties.spec.ts" time="0.0020" failures="0">
    <testcase name="@MinProperties should declare min value (any)" time="0.0000" classname="should declare min value (any)">
    </testcase>
    <testcase name="@MinProperties should declare min value (Map&lt;any&gt;)" time="0.0010" classname="should declare min value (Map&lt;any&gt;)">
    </testcase>
    <testcase name="@MinProperties should declare min value on class" time="0.0000" classname="should declare min value on class">
    </testcase>
    <testcase name="@MinProperties should declare min value on param" time="0.0000" classname="should declare min value on param">
    </testcase>
    <testcase name="@MinProperties should throw an error when the given parameters is as negative integer" time="0.0010" classname="should throw an error when the given parameters is as negative integer">
    </testcase>
  </testsuite>
  <testsuite name="@UniqueItems" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/collections/uniqueItems.spec.ts" time="0.0000" failures="0">
    <testcase name="@UniqueItems should declare a prop" time="0.0000" classname="should declare a prop">
    </testcase>
  </testsuite>
  <testsuite name="AdditionalProperties" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/additionalProperties.spec.ts" time="0.0000" failures="0">
    <testcase name="AdditionalProperties should declare additional properties" time="0.0000" classname="should declare additional properties">
    </testcase>
  </testsuite>
  <testsuite name="@Allow" timestamp="2020-10-09T18:19:56" tests="5" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/allow.spec.ts" time="0.0160" failures="0">
    <testcase name="@Allow should declare required and allow field (without Allow)" time="0.0040" classname="should declare required and allow field (without Allow)">
    </testcase>
    <testcase name="@Allow should declare required and allow field (with Allowed empty string)" time="0.0030" classname="should declare required and allow field (with Allowed empty string)">
    </testcase>
    <testcase name="@Allow should declare required and allow field (with Allowed null basic type)" time="0.0040" classname="should declare required and allow field (with Allowed null basic type)">
    </testcase>
    <testcase name="@Allow should declare required and allow field (with Allowed null NestedModel)" time="0.0050" classname="should declare required and allow field (with Allowed null NestedModel)">
    </testcase>
    <testcase name="@Allow should throw error when the decorator isn&apos;t used with a supported decorator type" time="0.0000" classname="should throw error when the decorator isn&apos;t used with a supported decorator type">
    </testcase>
  </testsuite>
  <testsuite name="@Any" timestamp="2020-10-09T18:19:56" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/any.spec.ts" time="0.0020" failures="0">
    <testcase name="@Any should declare any prop" time="0.0010" classname="should declare any prop">
    </testcase>
    <testcase name="@Any should declare any prop (uniq type)" time="0.0000" classname="should declare any prop (uniq type)">
    </testcase>
    <testcase name="@Any should declare any prop (with list)" time="0.0000" classname="should declare any prop (with list)">
    </testcase>
    <testcase name="@Any should declare any prop (with string, list)" time="0.0010" classname="should declare any prop (with string, list)">
    </testcase>
  </testsuite>
  <testsuite name="@Const" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/const.spec.ts" time="0.0000" failures="0">
    <testcase name="@Const should declare prop" time="0.0000" classname="should declare prop">
    </testcase>
  </testsuite>
  <testsuite name="@Default" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/default.spec.ts" time="0.0000" failures="0">
    <testcase name="@Default should declare prop" time="0.0000" classname="should declare prop">
    </testcase>
  </testsuite>
  <testsuite name="@Description" timestamp="2020-10-09T18:19:56" tests="7" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/description.spec.ts" time="0.0040" failures="0">
    <testcase name="@Description should declare description on class" time="0.0010" classname="should declare description on class">
    </testcase>
    <testcase name="@Description should declare description on method" time="0.0000" classname="should declare description on method">
    </testcase>
    <testcase name="@Description should declare description on property" time="0.0000" classname="should declare description on property">
    </testcase>
    <testcase name="@Description should declare description on params (QUERY)" time="0.0010" classname="should declare description on params (QUERY)">
    </testcase>
    <testcase name="@Description should declare description on params (BODY)" time="0.0010" classname="should declare description on params (BODY)">
    </testcase>
    <testcase name="@Description should declare description on params (BODY - openapi3)" time="0.0010" classname="should declare description on params (BODY - openapi3)">
    </testcase>
    <testcase name="@Description should throw error when the decorator isn&apos;t used with a supported decorator type" time="0.0000" classname="should throw error when the decorator isn&apos;t used with a supported decorator type">
    </testcase>
  </testsuite>
  <testsuite name="@Enum" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/enum.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when enum is a list of values" timestamp="2020-10-09T18:19:56" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/enum.spec.ts" time="0.0010" failures="0">
    <testcase name="@Enum when enum is a list of values should declare prop (uniq type)" time="0.0010" classname="should declare prop (uniq type)">
    </testcase>
    <testcase name="@Enum when enum is a list of values should declare prop (mixed type)" time="0.0000" classname="should declare prop (mixed type)">
    </testcase>
    <testcase name="@Enum when enum is a list of values should declare prop (mixed type and null)" time="0.0000" classname="should declare prop (mixed type and null)">
    </testcase>
  </testsuite>
  <testsuite name="when is a typescript enum (string)" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/enum.spec.ts" time="0.0000" failures="0">
    <testcase name="@Enum when is a typescript enum (string) should declare prop" time="0.0000" classname="should declare prop">
    </testcase>
  </testsuite>
  <testsuite name="when is a typescript enum (index)" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/enum.spec.ts" time="0.0000" failures="0">
    <testcase name="@Enum when is a typescript enum (index) should declare prop" time="0.0000" classname="should declare prop">
    </testcase>
  </testsuite>
  <testsuite name="when is a typescript enum (mixed type)" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/enum.spec.ts" time="0.0010" failures="0">
    <testcase name="@Enum when is a typescript enum (mixed type) should declare prop" time="0.0010" classname="should declare prop">
    </testcase>
  </testsuite>
  <testsuite name="@Example" timestamp="2020-10-09T18:19:56" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/example.spec.ts" time="0.0020" failures="0">
    <testcase name="@Example should declare description on class" time="0.0010" classname="should declare description on class">
    </testcase>
    <testcase name="@Example should declare description on class with description" time="0.0000" classname="should declare description on class with description">
    </testcase>
    <testcase name="@Example should declare description on property" time="0.0010" classname="should declare description on property">
    </testcase>
    <testcase name="@Example should throw error when the decorator isn&apos;t used with a supported decorator type" time="0.0000" classname="should throw error when the decorator isn&apos;t used with a supported decorator type">
    </testcase>
  </testsuite>
  <testsuite name="@ExclusiveMaximum" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/exclusiveMaximum.spec.ts" time="0.0010" failures="0">
    <testcase name="@ExclusiveMaximum should declare exclusiveMaximum value" time="0.0010" classname="should declare exclusiveMaximum value">
    </testcase>
  </testsuite>
  <testsuite name="@ExclusiveMinimum" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/exclusiveMinimum.spec.ts" time="0.0010" failures="0">
    <testcase name="@ExclusiveMinimum should declare exclusiveMinimum value" time="0.0010" classname="should declare exclusiveMinimum value">
    </testcase>
  </testsuite>
  <testsuite name="@Format" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/format.spec.ts" time="0.0000" failures="0">
    <testcase name="@Format should declare prop" time="0.0000" classname="should declare prop">
    </testcase>
  </testsuite>
  <testsuite name="@Email" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/format.spec.ts" time="0.0000" failures="0">
    <testcase name="@Email should declare prop" time="0.0000" classname="should declare prop">
    </testcase>
  </testsuite>
  <testsuite name="@DateFormat" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/format.spec.ts" time="0.0010" failures="0">
    <testcase name="@DateFormat should declare prop" time="0.0010" classname="should declare prop">
    </testcase>
  </testsuite>
  <testsuite name="@TimeFormat" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/format.spec.ts" time="0.0010" failures="0">
    <testcase name="@TimeFormat should declare prop" time="0.0010" classname="should declare prop">
    </testcase>
  </testsuite>
  <testsuite name="@DateTime" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/format.spec.ts" time="0.0010" failures="0">
    <testcase name="@DateTime should declare prop" time="0.0010" classname="should declare prop">
    </testcase>
  </testsuite>
  <testsuite name="@Uri" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/format.spec.ts" time="0.0000" failures="0">
    <testcase name="@Uri should declare prop" time="0.0000" classname="should declare prop">
    </testcase>
  </testsuite>
  <testsuite name="@Ignore" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/ignore.spec.ts" time="0.0010" failures="0">
    <testcase name="@Ignore should declare prop" time="0.0010" classname="should declare prop">
    </testcase>
    <testcase name="@Ignore should declare prop (boolean)" time="0.0000" classname="should declare prop (boolean)">
    </testcase>
  </testsuite>
  <testsuite name="@Integer" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/integer.spec.ts" time="0.0000" failures="0">
    <testcase name="@Integer should generate the right json schema" time="0.0000" classname="should generate the right json schema">
    </testcase>
  </testsuite>
  <testsuite name="JsonSchemaStoreFn" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/jsonEntityFn.spec.ts" time="0.0000" failures="0">
    <testcase name="JsonSchemaStoreFn should decorate property" time="0.0000" classname="should decorate property">
    </testcase>
  </testsuite>
  <testsuite name="@Maximum" timestamp="2020-10-09T18:19:56" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/maximum.spec.ts" time="0.0010" failures="0">
    <testcase name="@Maximum should declare maximum value" time="0.0000" classname="should declare maximum value">
    </testcase>
    <testcase name="@Maximum should declare exclusive maximum value" time="0.0010" classname="should declare exclusive maximum value">
    </testcase>
    <testcase name="@Maximum should declare maximum value (collection)" time="0.0000" classname="should declare maximum value (collection)">
    </testcase>
  </testsuite>
  <testsuite name="@MaxLength" timestamp="2020-10-09T18:19:56" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/maxLength.spec.ts" time="0.0010" failures="0">
    <testcase name="@MaxLength should declare minimum value" time="0.0010" classname="should declare minimum value">
    </testcase>
    <testcase name="@MaxLength should throw error" time="0.0000" classname="should throw error">
    </testcase>
    <testcase name="@MaxLength should declare minimum value (collection)" time="0.0000" classname="should declare minimum value (collection)">
    </testcase>
  </testsuite>
  <testsuite name="@Minimum" timestamp="2020-10-09T18:19:56" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/minimum.spec.ts" time="0.0020" failures="0">
    <testcase name="@Minimum should declare minimum value" time="0.0010" classname="should declare minimum value">
    </testcase>
    <testcase name="@Minimum should declare exclusive minimum value" time="0.0000" classname="should declare exclusive minimum value">
    </testcase>
    <testcase name="@Minimum should declare minimum value (collection)" time="0.0010" classname="should declare minimum value (collection)">
    </testcase>
  </testsuite>
  <testsuite name="@MinLength" timestamp="2020-10-09T18:19:56" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/minLength.spec.ts" time="0.0030" failures="0">
    <testcase name="@MinLength should declare minimum value" time="0.0020" classname="should declare minimum value">
    </testcase>
    <testcase name="@MinLength should throw error" time="0.0000" classname="should throw error">
    </testcase>
    <testcase name="@MinLength should declare minimum value on type (collection)" time="0.0010" classname="should declare minimum value on type (collection)">
    </testcase>
    <testcase name="@MinLength should declare minimum value on collection (collection)" time="0.0000" classname="should declare minimum value on collection (collection)">
    </testcase>
  </testsuite>
  <testsuite name="MultipleOf" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/multipleOf.spec.ts" time="0.0000" failures="0">
    <testcase name="MultipleOf should declare minimum value" time="0.0000" classname="should declare minimum value">
    </testcase>
    <testcase name="MultipleOf should throw an error when the given parameters is as negative integer" time="0.0000" classname="should throw an error when the given parameters is as negative integer">
    </testcase>
  </testsuite>
  <testsuite name="@Name" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/name.spec.ts" time="0.0010" failures="0">
    <testcase name="@Name should declare name as alias (props)" time="0.0000" classname="should declare name as alias (props)">
    </testcase>
    <testcase name="@Name should declare name on class" time="0.0010" classname="should declare name on class">
    </testcase>
  </testsuite>
  <testsuite name="@Pattern" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/pattern.spec.ts" time="0.0010" failures="0">
    <testcase name="@Pattern should declare pattern value" time="0.0010" classname="should declare pattern value">
    </testcase>
  </testsuite>
  <testsuite name="@Required" timestamp="2020-10-09T18:19:56" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/required.spec.ts" time="0.0020" failures="0">
    <testcase name="@Required should declare required field" time="0.0010" classname="should declare required field">
    </testcase>
    <testcase name="@Required should declare required field (false)" time="0.0010" classname="should declare required field (false)">
    </testcase>
    <testcase name="@Required should throw error when the decorator isn&apos;t used with a supported decorator type" time="0.0000" classname="should throw error when the decorator isn&apos;t used with a supported decorator type">
    </testcase>
  </testsuite>
  <testsuite name="Schema()" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/schema.spec.ts" time="0.0010" failures="0">
    <testcase name="Schema() should store data" time="0.0010" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="Title()" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/common/title.spec.ts" time="0.0010" failures="0">
    <testcase name="Title() should store data" time="0.0010" classname="should store data">
    </testcase>
  </testsuite>
  <testsuite name="JsonEntityComponent" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/config/jsonEntityComponent.spec.ts" time="0.0010" failures="0">
    <testcase name="JsonEntityComponent should declare new JsonEntityComponent" time="0.0010" classname="should declare new JsonEntityComponent">
    </testcase>
  </testsuite>
  <testsuite name="@GenericOf" timestamp="2020-10-09T18:19:56" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/generics/genericOf.spec.ts" time="0.0070" failures="0">
    <testcase name="@GenericOf should generate Generic pagination with nested model (array)" time="0.0020" classname="should generate Generic pagination with nested model (array)">
    </testcase>
    <testcase name="@GenericOf should generate Generic pagination with nested model" time="0.0010" classname="should generate Generic pagination with nested model">
    </testcase>
    <testcase name="@GenericOf should generate Generic pagination with nested model (deep generics)" time="0.0040" classname="should generate Generic pagination with nested model (deep generics)">
    </testcase>
  </testsuite>
  <testsuite name="Consumes" timestamp="2020-10-09T18:19:56" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/operations/consumes.spec.ts" time="0.0030" failures="0">
    <testcase name="Consumes should store metadata (swagger)" time="0.0010" classname="should store metadata (swagger)">
    </testcase>
    <testcase name="Consumes should store metadata (openspec)" time="0.0010" classname="should store metadata (openspec)">
    </testcase>
    <testcase name="Consumes should store metadata (class)" time="0.0010" classname="should store metadata (class)">
    </testcase>
    <testcase name="Consumes should throw error for unsupported usage" time="0.0000" classname="should throw error for unsupported usage">
    </testcase>
  </testsuite>
  <testsuite name="Deprecated" timestamp="2020-10-09T18:19:56" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/operations/deprecated.spec.ts" time="0.0010" failures="0">
    <testcase name="Deprecated should store metadata (swagger)" time="0.0010" classname="should store metadata (swagger)">
    </testcase>
    <testcase name="Deprecated should store metadata (openspec)" time="0.0000" classname="should store metadata (openspec)">
    </testcase>
    <testcase name="Deprecated should store metadata (class)" time="0.0000" classname="should store metadata (class)">
    </testcase>
    <testcase name="Deprecated should throw error for unsupported usage" time="0.0000" classname="should throw error for unsupported usage">
    </testcase>
  </testsuite>
  <testsuite name="In" timestamp="2020-10-09T18:19:56" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/operations/in.spec.ts" time="0.0030" failures="0">
    <testcase name="In should declare all schema correctly (param)" time="0.0010" classname="should declare all schema correctly (param)">
    </testcase>
    <testcase name="In should declare all schema correctly (method)" time="0.0010" classname="should declare all schema correctly (method)">
    </testcase>
    <testcase name="In should throw error for unsupported usage" time="0.0010" classname="should throw error for unsupported usage">
    </testcase>
  </testsuite>
  <testsuite name="OperationId" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/operations/operationId.spec.ts" time="0.0020" failures="0">
    <testcase name="OperationId should store metadata" time="0.0010" classname="should store metadata">
    </testcase>
    <testcase name="OperationId should throw error for unsupported usage" time="0.0010" classname="should throw error for unsupported usage">
    </testcase>
  </testsuite>
  <testsuite name="OperationPath" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/operations/operationPath.spec.ts" time="0.0000" failures="0">
    <testcase name="OperationPath should store metadata" time="0.0000" classname="should store metadata">
    </testcase>
    <testcase name="OperationPath should throw error for unsupported usage" time="0.0000" classname="should throw error for unsupported usage">
    </testcase>
  </testsuite>
  <testsuite name="Path" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/operations/path.spec.ts" time="0.0020" failures="0">
    <testcase name="Path should declare a path" time="0.0010" classname="should declare a path">
    </testcase>
    <testcase name="Path should throw error for unsupported usage" time="0.0010" classname="should throw error for unsupported usage">
    </testcase>
  </testsuite>
  <testsuite name="Produces" timestamp="2020-10-09T18:19:56" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/operations/produces.spec.ts" time="0.0020" failures="0">
    <testcase name="Produces should store metadata (swagger)" time="0.0010" classname="should store metadata (swagger)">
    </testcase>
    <testcase name="Produces should store metadata (openspec)" time="0.0000" classname="should store metadata (openspec)">
    </testcase>
    <testcase name="Produces should store metadata (class)" time="0.0010" classname="should store metadata (class)">
    </testcase>
    <testcase name="Produces should throw error for unsupported usage" time="0.0000" classname="should throw error for unsupported usage">
    </testcase>
  </testsuite>
  <testsuite name="@Returns" timestamp="2020-10-09T18:19:56" tests="11" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/operations/returns.spec.ts" time="0.0110" failures="0">
    <testcase name="@Returns should declare a return type" time="0.0010" classname="should declare a return type">
    </testcase>
    <testcase name="@Returns should declare a return type (Status().Type())" time="0.0010" classname="should declare a return type (Status().Type())">
    </testcase>
    <testcase name="@Returns should declare a return type with headers" time="0.0020" classname="should declare a return type with headers">
    </testcase>
    <testcase name="@Returns should declare a return type with content-type" time="0.0010" classname="should declare a return type with content-type">
    </testcase>
    <testcase name="@Returns should declare error response" time="0.0010" classname="should declare error response">
    </testcase>
    <testcase name="@Returns should throw an error when using of with String" time="0.0000" classname="should throw an error when using of with String">
    </testcase>
    <testcase name="@Returns should throw an error when using of with Collection" time="0.0000" classname="should throw an error when using of with Collection">
    </testcase>
    <testcase name="@Returns should throw an error when the decorator isn&apos;t correctly used" time="0.0010" classname="should throw an error when the decorator isn&apos;t correctly used">
    </testcase>
    <testcase name="@Returns should declare an Array of string" time="0.0010" classname="should declare an Array of string">
    </testcase>
    <testcase name="@Returns should declare an Array of Model" time="0.0010" classname="should declare an Array of Model">
    </testcase>
    <testcase name="@Returns should declare an Generic of Model" time="0.0020" classname="should declare an Generic of Model">
    </testcase>
  </testsuite>
  <testsuite name="Security" timestamp="2020-10-09T18:19:56" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/operations/security.spec.ts" time="0.0020" failures="0">
    <testcase name="Security should store metadata (method)" time="0.0010" classname="should store metadata (method)">
    </testcase>
    <testcase name="Security should store metadata (class)" time="0.0000" classname="should store metadata (class)">
    </testcase>
    <testcase name="Security should throw error for unsupported usage" time="0.0010" classname="should throw error for unsupported usage">
    </testcase>
  </testsuite>
  <testsuite name="Summary" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/operations/summary.spec.ts" time="0.0000" failures="0">
    <testcase name="Summary should store metadata" time="0.0000" classname="should store metadata">
    </testcase>
    <testcase name="Summary should throw error for unsupported usage" time="0.0000" classname="should throw error for unsupported usage">
    </testcase>
  </testsuite>
  <testsuite name="Tags" timestamp="2020-10-09T18:19:56" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/decorators/operations/tags.spec.ts" time="0.0020" failures="0">
    <testcase name="Tags should store metadata (method)" time="0.0000" classname="should store metadata (method)">
    </testcase>
    <testcase name="Tags should store metadata (method - map)" time="0.0010" classname="should store metadata (method - map)">
    </testcase>
    <testcase name="Tags should store metadata (class)" time="0.0010" classname="should store metadata (class)">
    </testcase>
    <testcase name="Tags should throw error for unsupported usage" time="0.0000" classname="should throw error for unsupported usage">
    </testcase>
  </testsuite>
  <testsuite name="JsonEntityStore" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonEntityStore.spec.ts" time="0.0010" failures="0">
    <testcase name="JsonEntityStore should create JsonEntityStore" time="0.0010" classname="should create JsonEntityStore">
    </testcase>
  </testsuite>
  <testsuite name="JsonMap" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonMap.spec.ts" time="0.0010" failures="0">
    <testcase name="JsonMap should serialize a JsonMap" time="0.0010" classname="should serialize a JsonMap">
    </testcase>
  </testsuite>
  <testsuite name="JsonOperation" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonOperation.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="getStatus()" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonOperation.spec.ts" time="0.0010" failures="0">
    <testcase name="JsonOperation getStatus() should return the status" time="0.0010" classname="should return the status">
    </testcase>
  </testsuite>
  <testsuite name="when custom parameter is used" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonOperation.spec.ts" time="0.0010" failures="0">
    <testcase name="JsonOperation when custom parameter is used should not generate invalid parameter" time="0.0010" classname="should not generate invalid parameter">
    </testcase>
  </testsuite>
  <testsuite name="JsonParameterType" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonParameterTypes.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="isParameterType" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonParameterTypes.spec.ts" time="0.0000" failures="0">
    <testcase name="JsonParameterType isParameterType should return true" time="0.0000" classname="should return true">
    </testcase>
    <testcase name="JsonParameterType isParameterType should return false" time="0.0000" classname="should return false">
    </testcase>
  </testsuite>
  <testsuite name="JsonSchema" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="basics" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0030" failures="0">
    <testcase name="JsonSchema basics should validate {}" time="0.0030" classname="should validate {}">
    </testcase>
  </testsuite>
  <testsuite name="String" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Basics" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0110" failures="0">
    <testcase name="JsonSchema String Basics should create a new jsonSchema" time="0.0110" classname="should create a new jsonSchema">
    </testcase>
  </testsuite>
  <testsuite name="Length" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0040" failures="0">
    <testcase name="JsonSchema String Length should create a new jsonSchema" time="0.0040" classname="should create a new jsonSchema">
    </testcase>
  </testsuite>
  <testsuite name="Regular expression" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0040" failures="0">
    <testcase name="JsonSchema String Regular expression should build json schema" time="0.0040" classname="should build json schema">
    </testcase>
  </testsuite>
  <testsuite name="Format" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0000" failures="0">
    <testcase name="JsonSchema String Format should create a new jsonSchema" time="0.0000" classname="should create a new jsonSchema">
    </testcase>
    <testcase name="JsonSchema String Format should create a new jsonSchema with format" time="0.0000" classname="should create a new jsonSchema with format">
    </testcase>
  </testsuite>
  <testsuite name="Number" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Basics" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0060" failures="0">
    <testcase name="JsonSchema Number Basics should create a jsonschema for number" time="0.0060" classname="should create a jsonschema for number">
    </testcase>
  </testsuite>
  <testsuite name="Integer" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0040" failures="0">
    <testcase name="JsonSchema Number Integer should create a jsonschema" time="0.0040" classname="should create a jsonschema">
    </testcase>
  </testsuite>
  <testsuite name="Multiples" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0050" failures="0">
    <testcase name="JsonSchema Number Multiples should create a jsonschema" time="0.0050" classname="should create a jsonschema">
    </testcase>
  </testsuite>
  <testsuite name="Ranges" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0070" failures="0">
    <testcase name="JsonSchema Number Ranges should create a jsonschema minimum &amp; exclusiveMaximum" time="0.0030" classname="should create a jsonschema minimum &amp; exclusiveMaximum">
    </testcase>
    <testcase name="JsonSchema Number Ranges should create a jsonschema exclusiveMinimum &amp; maximum" time="0.0040" classname="should create a jsonschema exclusiveMinimum &amp; maximum">
    </testcase>
  </testsuite>
  <testsuite name="Object" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="basic" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0050" failures="0">
    <testcase name="JsonSchema Object basic should create a new jsonSchema" time="0.0050" classname="should create a new jsonSchema">
    </testcase>
  </testsuite>
  <testsuite name="Properties" timestamp="2020-10-09T18:19:56" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0150" failures="0">
    <testcase name="JsonSchema Object Properties should create a valid jsonchema (properties)" time="0.0050" classname="should create a valid jsonchema (properties)">
    </testcase>
    <testcase name="JsonSchema Object Properties should create a valid jsonchema (additionalProperties boolean)" time="0.0060" classname="should create a valid jsonchema (additionalProperties boolean)">
    </testcase>
    <testcase name="JsonSchema Object Properties should create a valid jsonchema (additionalProperties schema)" time="0.0040" classname="should create a valid jsonchema (additionalProperties schema)">
    </testcase>
  </testsuite>
  <testsuite name="Required" timestamp="2020-10-09T18:19:56" tests="5" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0210" failures="0">
    <testcase name="JsonSchema Object Required should create a valid jsonchema (basic)" time="0.0080" classname="should create a valid jsonchema (basic)">
    </testcase>
    <testcase name="JsonSchema Object Required should create a valid jsonchema (default - string)" time="0.0040" classname="should create a valid jsonchema (default - string)">
    </testcase>
    <testcase name="JsonSchema Object Required should create a valid jsonchema (default - number)" time="0.0030" classname="should create a valid jsonchema (default - number)">
    </testcase>
    <testcase name="JsonSchema Object Required should create a valid jsonchema (empty string is falsy)" time="0.0030" classname="should create a valid jsonchema (empty string is falsy)">
    </testcase>
    <testcase name="JsonSchema Object Required should create a valid jsonchema (0 is falsy - number)" time="0.0030" classname="should create a valid jsonchema (0 is falsy - number)">
    </testcase>
  </testsuite>
  <testsuite name="Property names" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0050" failures="0">
    <testcase name="JsonSchema Object Property names should create a valid jsonchema" time="0.0050" classname="should create a valid jsonchema">
    </testcase>
  </testsuite>
  <testsuite name="Size" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0040" failures="0">
    <testcase name="JsonSchema Object Size should create a valid jsonchema" time="0.0040" classname="should create a valid jsonchema">
    </testcase>
  </testsuite>
  <testsuite name="Dependencies" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Property Dependencies" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0180" failures="0">
    <testcase name="JsonSchema Object Dependencies Property Dependencies should create a valid jsonchema" time="0.0120" classname="should create a valid jsonchema">
    </testcase>
    <testcase name="JsonSchema Object Dependencies Property Dependencies should create a valid jsonchema (bidirectional dependencies)" time="0.0060" classname="should create a valid jsonchema (bidirectional dependencies)">
    </testcase>
  </testsuite>
  <testsuite name="Schema Dependencies" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0040" failures="0">
    <testcase name="JsonSchema Object Dependencies Schema Dependencies should create a valid jsonchema" time="0.0040" classname="should create a valid jsonchema">
    </testcase>
  </testsuite>
  <testsuite name="Pattern Properties" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0070" failures="0">
    <testcase name="JsonSchema Object Pattern Properties should create a valid jsonchema with false value" time="0.0040" classname="should create a valid jsonchema with false value">
    </testcase>
    <testcase name="JsonSchema Object Pattern Properties should create a valid jsonchema with schema value" time="0.0030" classname="should create a valid jsonchema with schema value">
    </testcase>
  </testsuite>
  <testsuite name="Array" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Basic" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0030" failures="0">
    <testcase name="JsonSchema Array Basic should create a new jsonSchema" time="0.0030" classname="should create a new jsonSchema">
    </testcase>
  </testsuite>
  <testsuite name="Items" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="List validation" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0060" failures="0">
    <testcase name="JsonSchema Array Items List validation should create a new jsonSchema (items)" time="0.0030" classname="should create a new jsonSchema (items)">
    </testcase>
    <testcase name="JsonSchema Array Items List validation should create a new jsonSchema (contains)" time="0.0030" classname="should create a new jsonSchema (contains)">
    </testcase>
  </testsuite>
  <testsuite name="Tuple validation" timestamp="2020-10-09T18:19:56" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0120" failures="0">
    <testcase name="JsonSchema Array Items Tuple validation should create a new jsonSchema" time="0.0060" classname="should create a new jsonSchema">
    </testcase>
    <testcase name="JsonSchema Array Items Tuple validation should create a new jsonSchema (additionalItems=false)" time="0.0030" classname="should create a new jsonSchema (additionalItems=false)">
    </testcase>
    <testcase name="JsonSchema Array Items Tuple validation should create a new jsonSchema (additionalItems=Schema)" time="0.0030" classname="should create a new jsonSchema (additionalItems=Schema)">
    </testcase>
  </testsuite>
  <testsuite name="Length" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0020" failures="0">
    <testcase name="JsonSchema Array Items Length should create a new jsonSchema" time="0.0020" classname="should create a new jsonSchema">
    </testcase>
  </testsuite>
  <testsuite name="Uniqueness" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0030" failures="0">
    <testcase name="JsonSchema Array Items Uniqueness should create a new jsonSchema" time="0.0030" classname="should create a new jsonSchema">
    </testcase>
  </testsuite>
  <testsuite name="Boolean" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0020" failures="0">
    <testcase name="JsonSchema Boolean should create a new jsonSchema" time="0.0020" classname="should create a new jsonSchema">
    </testcase>
  </testsuite>
  <testsuite name="Null" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0020" failures="0">
    <testcase name="JsonSchema Null should create a new jsonSchema" time="0.0020" classname="should create a new jsonSchema">
    </testcase>
  </testsuite>
  <testsuite name="Generic keywords" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Annotations" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0000" failures="0">
    <testcase name="JsonSchema Generic keywords Annotations should create a new jsonSchema" time="0.0000" classname="should create a new jsonSchema">
    </testcase>
  </testsuite>
  <testsuite name="Enumerated values" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0070" failures="0">
    <testcase name="JsonSchema Generic keywords Enumerated values should create a new jsonSchema" time="0.0030" classname="should create a new jsonSchema">
    </testcase>
    <testcase name="JsonSchema Generic keywords Enumerated values should create a new jsonSchema (without type)" time="0.0040" classname="should create a new jsonSchema (without type)">
    </testcase>
  </testsuite>
  <testsuite name="Constant values" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0030" failures="0">
    <testcase name="JsonSchema Generic keywords Constant values should create a new jsonSchema" time="0.0030" classname="should create a new jsonSchema">
    </testcase>
  </testsuite>
  <testsuite name="props" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0000" failures="0">
    <testcase name="JsonSchema Generic keywords props should create a new jsonSchema" time="0.0000" classname="should create a new jsonSchema">
    </testcase>
  </testsuite>
  <testsuite name="Combining Schema" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="anyOf" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0020" failures="0">
    <testcase name="JsonSchema Combining Schema anyOf should create a new jsonSchema" time="0.0020" classname="should create a new jsonSchema">
    </testcase>
  </testsuite>
  <testsuite name="allOf" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0030" failures="0">
    <testcase name="JsonSchema Combining Schema allOf should create a new jsonSchema" time="0.0030" classname="should create a new jsonSchema">
    </testcase>
  </testsuite>
  <testsuite name="oneOf" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0030" failures="0">
    <testcase name="JsonSchema Combining Schema oneOf should create a new jsonSchema" time="0.0030" classname="should create a new jsonSchema">
    </testcase>
  </testsuite>
  <testsuite name="not" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0030" failures="0">
    <testcase name="JsonSchema Combining Schema not should create a new jsonSchema" time="0.0030" classname="should create a new jsonSchema">
    </testcase>
  </testsuite>
  <testsuite name="Collection" timestamp="2020-10-09T18:19:56" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0010" failures="0">
    <testcase name="JsonSchema Collection should create a new jsonSchema (Array)" time="0.0000" classname="should create a new jsonSchema (Array)">
    </testcase>
    <testcase name="JsonSchema Collection should create a new jsonSchema (Map)" time="0.0000" classname="should create a new jsonSchema (Map)">
    </testcase>
    <testcase name="JsonSchema Collection should create a new jsonSchema (Set)" time="0.0010" classname="should create a new jsonSchema (Set)">
    </testcase>
  </testsuite>
  <testsuite name="Class" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0000" failures="0">
    <testcase name="JsonSchema Class should create a new jsonSchema" time="0.0000" classname="should create a new jsonSchema">
    </testcase>
  </testsuite>
  <testsuite name="Circular ref" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0050" failures="0">
    <testcase name="JsonSchema Circular ref should create and validate schema" time="0.0050" classname="should create and validate schema">
    </testcase>
  </testsuite>
  <testsuite name="Alias" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0010" failures="0">
    <testcase name="JsonSchema Alias should create new jsonSchema (useAlias = true)" time="0.0010" classname="should create new jsonSchema (useAlias = true)">
    </testcase>
    <testcase name="JsonSchema Alias should create new jsonSchema (useAlias = false)" time="0.0000" classname="should create new jsonSchema (useAlias = false)">
    </testcase>
  </testsuite>
  <testsuite name="Mixed types" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0010" failures="0">
    <testcase name="JsonSchema Mixed types should create a new jsonSchema" time="0.0010" classname="should create a new jsonSchema">
    </testcase>
    <testcase name="JsonSchema Mixed types should create a new jsonSchema (2)" time="0.0000" classname="should create a new jsonSchema (2)">
    </testcase>
  </testsuite>
  <testsuite name="Any types" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/domain/JsonSchema.spec.ts" time="0.0010" failures="0">
    <testcase name="JsonSchema Any types should create a new jsonSchema" time="0.0010" classname="should create a new jsonSchema">
    </testcase>
  </testsuite>
  <testsuite name="getComputedType" timestamp="2020-10-09T18:19:56" tests="12" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/utils/getComputedType.spec.ts" time="0.0010" failures="0">
    <testcase name="getComputedType should return the right class (String)" time="0.0000" classname="should return the right class (String)">
    </testcase>
    <testcase name="getComputedType should return the right class (Number)" time="0.0000" classname="should return the right class (Number)">
    </testcase>
    <testcase name="getComputedType should return the right class (Boolean)" time="0.0000" classname="should return the right class (Boolean)">
    </testcase>
    <testcase name="getComputedType should return the right class (Symbol)" time="0.0000" classname="should return the right class (Symbol)">
    </testcase>
    <testcase name="getComputedType should return the right class (Date)" time="0.0000" classname="should return the right class (Date)">
    </testcase>
    <testcase name="getComputedType should return the right class (Array)" time="0.0000" classname="should return the right class (Array)">
    </testcase>
    <testcase name="getComputedType should return the right class (Map)" time="0.0000" classname="should return the right class (Map)">
    </testcase>
    <testcase name="getComputedType should return the right class (Set)" time="0.0000" classname="should return the right class (Set)">
    </testcase>
    <testcase name="getComputedType should return the right class (Promise)" time="0.0010" classname="should return the right class (Promise)">
    </testcase>
    <testcase name="getComputedType should return the right class (class with arrow)" time="0.0000" classname="should return the right class (class with arrow)">
    </testcase>
    <testcase name="getComputedType should return the right class (class)" time="0.0000" classname="should return the right class (class)">
    </testcase>
    <testcase name="getComputedType should return the right class (undefined)" time="0.0000" classname="should return the right class (undefined)">
    </testcase>
  </testsuite>
  <testsuite name="getInheritedStores" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/utils/getInheritedStores.spec.ts" time="0.0010" failures="0">
    <testcase name="getInheritedStores should return inherited store" time="0.0010" classname="should return inherited store">
    </testcase>
  </testsuite>
  <testsuite name="getJsonPathParameters" timestamp="2020-10-09T18:19:56" tests="7" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/utils/getJsonPathParameters.spec.ts" time="0.0040" failures="0">
    <testcase name="getJsonPathParameters should return params and path(1)" time="0.0000" classname="should return params and path(1)">
    </testcase>
    <testcase name="getJsonPathParameters should return params and path(2)" time="0.0020" classname="should return params and path(2)">
    </testcase>
    <testcase name="getJsonPathParameters should return params and path(3)" time="0.0000" classname="should return params and path(3)">
    </testcase>
    <testcase name="getJsonPathParameters should return params and path(4)" time="0.0000" classname="should return params and path(4)">
    </testcase>
    <testcase name="getJsonPathParameters should return params and path /file/:filename.json" time="0.0010" classname="should return params and path /file/:filename.json">
    </testcase>
    <testcase name="getJsonPathParameters should return params and path /category/:category([a-zA-Z/_-]+).json" time="0.0000" classname="should return params and path /category/:category([a-zA-Z/_-]+).json">
    </testcase>
    <testcase name="getJsonPathParameters should return params and path regexp" time="0.0010" classname="should return params and path regexp">
    </testcase>
  </testsuite>
  <testsuite name="getJsonSchema" timestamp="2020-10-09T18:19:56" tests="11" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/utils/getJsonSchema.spec.ts" time="0.0160" failures="0">
    <testcase name="getJsonSchema should declare all schema correctly (basic)" time="0.0020" classname="should declare all schema correctly (basic)">
    </testcase>
    <testcase name="getJsonSchema should declare all schema correctly (alias)" time="0.0020" classname="should declare all schema correctly (alias)">
    </testcase>
    <testcase name="getJsonSchema should declare prop with a nested model" time="0.0020" classname="should declare prop with a nested model">
    </testcase>
    <testcase name="getJsonSchema should declare prop with a nested model with named model" time="0.0010" classname="should declare prop with a nested model with named model">
    </testcase>
    <testcase name="getJsonSchema should declare prop with a nested of nested model (Array)" time="0.0010" classname="should declare prop with a nested of nested model (Array)">
    </testcase>
    <testcase name="getJsonSchema should declare prop with a nested of nested model (Set)" time="0.0020" classname="should declare prop with a nested of nested model (Set)">
    </testcase>
    <testcase name="getJsonSchema should declare prop with a nested of nested model (Map)" time="0.0010" classname="should declare prop with a nested of nested model (Map)">
    </testcase>
    <testcase name="getJsonSchema should accept circular ref" time="0.0010" classname="should accept circular ref">
    </testcase>
    <testcase name="getJsonSchema should return the json schema for an inherited model" time="0.0010" classname="should return the json schema for an inherited model">
    </testcase>
    <testcase name="getJsonSchema should return the json schema for an inherited model and generics" time="0.0010" classname="should return the json schema for an inherited model and generics">
    </testcase>
    <testcase name="getJsonSchema should return the json schema with hosted schemes" time="0.0020" classname="should return the json schema with hosted schemes">
    </testcase>
  </testsuite>
  <testsuite name="getOperationsStore" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/utils/getOperationsStore.spec.ts" time="0.0020" failures="0">
    <testcase name="getOperationsStore should return operation with right order" time="0.0020" classname="should return operation with right order">
    </testcase>
  </testsuite>
  <testsuite name="getProperties()" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/utils/getPropertiesStores.spec.ts" time="0.0000" failures="0">
    <testcase name="getProperties() should return properties" time="0.0000" classname="should return properties">
    </testcase>
  </testsuite>
  <testsuite name="getSpec()" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/utils/getSpec.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="In" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/utils/getSpec.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Path" timestamp="2020-10-09T18:19:56" tests="4" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/utils/getSpec.spec.ts" time="0.0610" failures="0">
    <testcase name="getSpec() In Path should declare all schema correctly (path - swagger2)" time="0.0370" classname="should declare all schema correctly (path - swagger2)">
    </testcase>
    <testcase name="getSpec() In Path should declare all schema correctly (path optional - swagger2)" time="0.0060" classname="should declare all schema correctly (path optional - swagger2)">
    </testcase>
    <testcase name="getSpec() In Path should declare all schema correctly with expression" time="0.0040" classname="should declare all schema correctly with expression">
    </testcase>
    <testcase name="getSpec() In Path should declare all schema correctly (path - openspec3)" time="0.0140" classname="should declare all schema correctly (path - openspec3)">
    </testcase>
  </testsuite>
  <testsuite name="Query" timestamp="2020-10-09T18:19:56" tests="7" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/utils/getSpec.spec.ts" time="0.0100" failures="0">
    <testcase name="getSpec() In Query should declare all schema correctly (query - swagger2)" time="0.0010" classname="should declare all schema correctly (query - swagger2)">
    </testcase>
    <testcase name="getSpec() In Query should declare all schema correctly (query - swagger2 - model)" time="0.0020" classname="should declare all schema correctly (query - swagger2 - model)">
    </testcase>
    <testcase name="getSpec() In Query should declare all schema correctly (query - openapi3 - model)" time="0.0010" classname="should declare all schema correctly (query - openapi3 - model)">
    </testcase>
    <testcase name="getSpec() In Query should declare all schema correctly (query - swagger2 - array string)" time="0.0010" classname="should declare all schema correctly (query - swagger2 - array string)">
    </testcase>
    <testcase name="getSpec() In Query should declare all schema correctly (query - openapi3 - array string)" time="0.0020" classname="should declare all schema correctly (query - openapi3 - array string)">
    </testcase>
    <testcase name="getSpec() In Query should declare all schema correctly (query - swagger2 - Map)" time="0.0020" classname="should declare all schema correctly (query - swagger2 - Map)">
    </testcase>
    <testcase name="getSpec() In Query should declare all schema correctly (query - openapi3 - Map)" time="0.0010" classname="should declare all schema correctly (query - openapi3 - Map)">
    </testcase>
  </testsuite>
  <testsuite name="Body" timestamp="2020-10-09T18:19:56" tests="8" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/utils/getSpec.spec.ts" time="0.0220" failures="0">
    <testcase name="getSpec() In Body should declare all schema correctly (model - swagger2)" time="0.0020" classname="should declare all schema correctly (model - swagger2)">
    </testcase>
    <testcase name="getSpec() In Body should declare all schema correctly (model - openapi3)" time="0.0020" classname="should declare all schema correctly (model - openapi3)">
    </testcase>
    <testcase name="getSpec() In Body should declare all schema correctly (Array - model - swagger2)" time="0.0020" classname="should declare all schema correctly (Array - model - swagger2)">
    </testcase>
    <testcase name="getSpec() In Body should declare all schema correctly (Map - model - swagger2)" time="0.0040" classname="should declare all schema correctly (Map - model - swagger2)">
    </testcase>
    <testcase name="getSpec() In Body should declare all schema correctly (inline - swagger2)" time="0.0020" classname="should declare all schema correctly (inline - swagger2)">
    </testcase>
    <testcase name="getSpec() In Body should declare all schema correctly (Array - inline - swagger2)" time="0.0040" classname="should declare all schema correctly (Array - inline - swagger2)">
    </testcase>
    <testcase name="getSpec() In Body should declare all schema correctly (inline - openapi3)" time="0.0040" classname="should declare all schema correctly (inline - openapi3)">
    </testcase>
    <testcase name="getSpec() In Body should declare all schema correctly (generics - openapi3)" time="0.0020" classname="should declare all schema correctly (generics - openapi3)">
    </testcase>
  </testsuite>
  <testsuite name="Response" timestamp="2020-10-09T18:19:56" tests="8" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/utils/getSpec.spec.ts" time="0.0130" failures="0">
    <testcase name="getSpec() Response should declare all schema correctly (swagger2)" time="0.0010" classname="should declare all schema correctly (swagger2)">
    </testcase>
    <testcase name="getSpec() Response should declare all schema correctly (openapi3)" time="0.0010" classname="should declare all schema correctly (openapi3)">
    </testcase>
    <testcase name="getSpec() Response should declare an Array of string (swagger2)" time="0.0000" classname="should declare an Array of string (swagger2)">
    </testcase>
    <testcase name="getSpec() Response should declare an Array of string (openapi3)" time="0.0020" classname="should declare an Array of string (openapi3)">
    </testcase>
    <testcase name="getSpec() Response should declare an Generic of Model (swagger2)" time="0.0020" classname="should declare an Generic of Model (swagger2)">
    </testcase>
    <testcase name="getSpec() Response should declare an Generic of Model (openspec3)" time="0.0010" classname="should declare an Generic of Model (openspec3)">
    </testcase>
    <testcase name="getSpec() Response should declare a nested Generics of Model (swagger2)" time="0.0040" classname="should declare a nested Generics of Model (swagger2)">
    </testcase>
    <testcase name="getSpec() Response should declare a nested Generics of Model (openspec3)" time="0.0020" classname="should declare a nested Generics of Model (openspec3)">
    </testcase>
  </testsuite>
  <testsuite name="isSuccessStatus" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/utils/isSuccessStatus.spec.ts" time="0.0000" failures="0">
    <testcase name="isSuccessStatus should be a valid success status" time="0.0000" classname="should be a valid success status">
    </testcase>
    <testcase name="isSuccessStatus should not be a valid success status" time="0.0000" classname="should not be a valid success status">
    </testcase>
  </testsuite>
  <testsuite name="mapHeaders" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/utils/mapHeaders.spec.ts" time="0.0000" failures="0">
    <testcase name="mapHeaders should map headers" time="0.0000" classname="should map headers">
    </testcase>
  </testsuite>
  <testsuite name="operationIdFormatter" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/utils/operationIdFormatter.spec.ts" time="0.0000" failures="0">
    <testcase name="operationIdFormatter should define new OperationId" time="0.0000" classname="should define new OperationId">
    </testcase>
  </testsuite>
  <testsuite name="toJsonMapCollection" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/schema/src/utils/toJsonMapCollection.spec.ts" time="0.0010" failures="0">
    <testcase name="toJsonMapCollection should transform object to JsonMapCollection" time="0.0010" classname="should transform object to JsonMapCollection">
    </testcase>
  </testsuite>
  <testsuite name="SocketHandlersBuilder" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="build()" timestamp="2020-10-09T18:19:56" tests="6" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketHandlersBuilder build() should create metadata when $onDisconnect exists" time="0.0000" classname="should create metadata when $onDisconnect exists">
    </testcase>
    <testcase name="SocketHandlersBuilder build() should call $onNamespaceInit hook" time="0.0000" classname="should call $onNamespaceInit hook">
    </testcase>
    <testcase name="SocketHandlersBuilder build() should add namespace1" time="0.0000" classname="should add namespace1">
    </testcase>
    <testcase name="SocketHandlersBuilder build() should add namespace2" time="0.0000" classname="should add namespace2">
    </testcase>
    <testcase name="SocketHandlersBuilder build() should add default nsp" time="0.0000" classname="should add default nsp">
    </testcase>
    <testcase name="SocketHandlersBuilder build() should init the nspSession" time="0.0000" classname="should init the nspSession">
    </testcase>
  </testsuite>
  <testsuite name="onConnection" timestamp="2020-10-09T18:19:56" tests="3" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketHandlersBuilder onConnection should call the buildHandlers method" time="0.0000" classname="should call the buildHandlers method">
    </testcase>
    <testcase name="SocketHandlersBuilder onConnection should call the createSession method" time="0.0000" classname="should call the createSession method">
    </testcase>
    <testcase name="SocketHandlersBuilder onConnection should add metadata when $onConnection exists" time="0.0000" classname="should add metadata when $onConnection exists">
    </testcase>
  </testsuite>
  <testsuite name="onDisconnect" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketHandlersBuilder onDisconnect should call the createSession method" time="0.0000" classname="should call the createSession method">
    </testcase>
    <testcase name="SocketHandlersBuilder onDisconnect should add metadata when $onDisconnect exists" time="0.0000" classname="should add metadata when $onDisconnect exists">
    </testcase>
  </testsuite>
  <testsuite name="createSession()" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketHandlersBuilder createSession() should create session for the socket" time="0.0000" classname="should create session for the socket">
    </testcase>
  </testsuite>
  <testsuite name="destroySession()" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketHandlersBuilder destroySession() should destroy session for the socket" time="0.0000" classname="should destroy session for the socket">
    </testcase>
  </testsuite>
  <testsuite name="buildHandlers()" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketHandlersBuilder buildHandlers() should call socket.on() method" time="0.0000" classname="should call socket.on() method">
    </testcase>
    <testcase name="SocketHandlersBuilder buildHandlers() should call runQueue method" time="0.0000" classname="should call runQueue method">
    </testcase>
  </testsuite>
  <testsuite name="invoke()" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketHandlersBuilder invoke() should call buildParameters" time="0.0000" classname="should call buildParameters">
    </testcase>
    <testcase name="SocketHandlersBuilder invoke() should call the method instance" time="0.0000" classname="should call the method instance">
    </testcase>
  </testsuite>
  <testsuite name="buildParameters()" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when ARGS" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketHandlersBuilder buildParameters() when ARGS should return a list of parameters" time="0.0000" classname="should return a list of parameters">
    </testcase>
  </testsuite>
  <testsuite name="when ARGS with mapIndex" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketHandlersBuilder buildParameters() when ARGS with mapIndex should return a list of parameters" time="0.0000" classname="should return a list of parameters">
    </testcase>
  </testsuite>
  <testsuite name="when Socket" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketHandlersBuilder buildParameters() when Socket should return a list of parameters" time="0.0000" classname="should return a list of parameters">
    </testcase>
  </testsuite>
  <testsuite name="when NSP" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketHandlersBuilder buildParameters() when NSP should return a list of parameters" time="0.0000" classname="should return a list of parameters">
    </testcase>
  </testsuite>
  <testsuite name="when ERROR" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketHandlersBuilder buildParameters() when ERROR should return a list of parameters" time="0.0000" classname="should return a list of parameters">
    </testcase>
  </testsuite>
  <testsuite name="when EVENT_NAME" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketHandlersBuilder buildParameters() when EVENT_NAME should return a list of parameters" time="0.0000" classname="should return a list of parameters">
    </testcase>
  </testsuite>
  <testsuite name="when SESSION" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketHandlersBuilder buildParameters() when SESSION should return a list of parameters" time="0.0000" classname="should return a list of parameters">
    </testcase>
  </testsuite>
  <testsuite name="bindResponseMiddleware()" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when BROADCAST" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketHandlersBuilder bindResponseMiddleware() when BROADCAST should call the ws.emit method" time="0.0000" classname="should call the ws.emit method">
    </testcase>
  </testsuite>
  <testsuite name="when BROADCAST_OTHERS" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0010" failures="0">
    <testcase name="SocketHandlersBuilder bindResponseMiddleware() when BROADCAST_OTHERS should call the socket.broadcast.emit method" time="0.0010" classname="should call the socket.broadcast.emit method">
    </testcase>
  </testsuite>
  <testsuite name="when EMIT" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketHandlersBuilder bindResponseMiddleware() when EMIT should call the socket.emit method" time="0.0000" classname="should call the socket.emit method">
    </testcase>
  </testsuite>
  <testsuite name="runQueue()" timestamp="2020-10-09T18:19:56" tests="7" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0010" failures="0">
    <testcase name="SocketHandlersBuilder runQueue() should call bindMiddleware (handler before global)" time="0.0000" classname="should call bindMiddleware (handler before global)">
    </testcase>
    <testcase name="SocketHandlersBuilder runQueue() should call bindMiddleware (handler before)" time="0.0000" classname="should call bindMiddleware (handler before)">
    </testcase>
    <testcase name="SocketHandlersBuilder runQueue() should invoke method instance" time="0.0000" classname="should invoke method instance">
    </testcase>
    <testcase name="SocketHandlersBuilder runQueue() should call SocketHandlersBuilder.bindResponseMiddleware" time="0.0000" classname="should call SocketHandlersBuilder.bindResponseMiddleware">
    </testcase>
    <testcase name="SocketHandlersBuilder runQueue() should call bindMiddleware (handler after)" time="0.0000" classname="should call bindMiddleware (handler after)">
    </testcase>
    <testcase name="SocketHandlersBuilder runQueue() should call bindMiddleware (handler after global)" time="0.0000" classname="should call bindMiddleware (handler after global)">
    </testcase>
    <testcase name="SocketHandlersBuilder runQueue() should call deserialize()" time="0.0010" classname="should call deserialize()">
    </testcase>
  </testsuite>
  <testsuite name="bindMiddleware()" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="middleware is not registered" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketHandlersBuilder bindMiddleware() middleware is not registered should call Middleware.get" time="0.0000" classname="should call Middleware.get">
    </testcase>
    <testcase name="SocketHandlersBuilder bindMiddleware() middleware is not registered should invoke method" time="0.0000" classname="should invoke method">
    </testcase>
  </testsuite>
  <testsuite name="middleware" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0010" failures="0">
    <testcase name="SocketHandlersBuilder bindMiddleware() middleware should call build handler from metadata" time="0.0010" classname="should call build handler from metadata">
    </testcase>
  </testsuite>
  <testsuite name="middleware error" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0010" failures="0">
    <testcase name="SocketHandlersBuilder bindMiddleware() middleware error should call build handler from metadata" time="0.0010" classname="should call build handler from metadata">
    </testcase>
  </testsuite>
  <testsuite name="deserialize()" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/class/SocketHandlersBuilder.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketHandlersBuilder deserialize() should call ConverterService.deserialize" time="0.0000" classname="should call ConverterService.deserialize">
    </testcase>
  </testsuite>
  <testsuite name="Args" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/args.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="without parameters" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/args.spec.ts" time="0.0000" failures="0">
    <testcase name="Args without parameters should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="with parameters" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/args.spec.ts" time="0.0000" failures="0">
    <testcase name="Args with parameters should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="Broadcast" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/broadcast.spec.ts" time="0.0000" failures="0">
    <testcase name="Broadcast should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="BroadcastOthers" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/broadcastOthers.spec.ts" time="0.0000" failures="0">
    <testcase name="BroadcastOthers should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="Emit" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/emit.spec.ts" time="0.0010" failures="0">
    <testcase name="Emit should set metadata" time="0.0010" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="Input" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/input.spec.ts" time="0.0000" failures="0">
    <testcase name="Input should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="InputAndBroadcast" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/inputAndBroadcast.spec.ts" time="0.0010" failures="0">
    <testcase name="InputAndBroadcast should set metadata" time="0.0010" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="InputAndBroadcastOthers" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/inputAndBroadcastOthers.spec.ts" time="0.0000" failures="0">
    <testcase name="InputAndBroadcastOthers should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="InputAndEmit" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/inputAndEmit.spec.ts" time="0.0000" failures="0">
    <testcase name="InputAndEmit should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="Nsp" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/nsp.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when it used as param decorator" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/nsp.spec.ts" time="0.0000" failures="0">
    <testcase name="Nsp when it used as param decorator should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="when it used as property decorator" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/nsp.spec.ts" time="0.0000" failures="0">
    <testcase name="Nsp when it used as property decorator should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="when it used as property decorator with parameters" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/nsp.spec.ts" time="0.0000" failures="0">
    <testcase name="Nsp when it used as property decorator with parameters should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="Socket" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/socket.spec.ts" time="0.0000" failures="0">
    <testcase name="Socket should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="@SocketErr" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/socketErr.spec.ts" time="0.0000" failures="0">
    <testcase name="@SocketErr should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="@SocketEventName" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/socketEventName.spec.ts" time="0.0000" failures="0">
    <testcase name="@SocketEventName should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="@SocketMiddleware" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/socketMiddleware.spec.ts" time="0.0000" failures="0">
    <testcase name="@SocketMiddleware should register the middleware" time="0.0000" classname="should register the middleware">
    </testcase>
  </testsuite>
  <testsuite name="@SocketMiddlewareError" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/socketMiddlewareError.spec.ts" time="0.0000" failures="0">
    <testcase name="@SocketMiddlewareError should register the metadata and middleware" time="0.0000" classname="should register the metadata and middleware">
    </testcase>
  </testsuite>
  <testsuite name="SocketService" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/socketService.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="case 1" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/socketService.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketService case 1 should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
    <testcase name="SocketService case 1 should call socketServiceRegistry" time="0.0000" classname="should call socketServiceRegistry">
    </testcase>
  </testsuite>
  <testsuite name="case 2" timestamp="2020-10-09T18:19:56" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/socketService.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketService case 2 should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
    <testcase name="SocketService case 2 should call socketServiceRegistry" time="0.0000" classname="should call socketServiceRegistry">
    </testcase>
  </testsuite>
  <testsuite name="SocketSession" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/socketSession.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketSession should set metadata" time="0.0000" classname="should set metadata">
    </testcase>
  </testsuite>
  <testsuite name="@SocketUseAfter" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/socketUseAfter.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the decorator is used on a class" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/socketUseAfter.spec.ts" time="0.0000" failures="0">
    <testcase name="@SocketUseAfter when the decorator is used on a class should store metadata" time="0.0000" classname="should store metadata">
    </testcase>
  </testsuite>
  <testsuite name="when the decorator is used on a method" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/socketUseAfter.spec.ts" time="0.0000" failures="0">
    <testcase name="@SocketUseAfter when the decorator is used on a method should store metadata" time="0.0000" classname="should store metadata">
    </testcase>
  </testsuite>
  <testsuite name="@SocketUseBefore" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/socketUseBefore.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when the decorator is used on a class" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/socketUseBefore.spec.ts" time="0.0000" failures="0">
    <testcase name="@SocketUseBefore when the decorator is used on a class should store metadata" time="0.0000" classname="should store metadata">
    </testcase>
  </testsuite>
  <testsuite name="when the decorator is used on a method" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/decorators/socketUseBefore.spec.ts" time="0.0000" failures="0">
    <testcase name="@SocketUseBefore when the decorator is used on a method should store metadata" time="0.0000" classname="should store metadata">
    </testcase>
  </testsuite>
  <testsuite name="NspSessionRegistry" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/registries/NspSessionRegistry.spec.ts" time="0.0000" failures="0">
    <testcase name="NspSessionRegistry should return session" time="0.0000" classname="should return session">
    </testcase>
  </testsuite>
  <testsuite name="SocketIOService" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/services/SocketIOService.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="getNsp()" timestamp="2020-10-09T18:19:56" tests="5" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/services/SocketIOService.spec.ts" time="0.0000" failures="0">
    <testcase name="SocketIOService getNsp() should call io.of and create namespace" time="0.0000" classname="should call io.of and create namespace">
    </testcase>
    <testcase name="SocketIOService getNsp() should call namespace.on" time="0.0000" classname="should call namespace.on">
    </testcase>
    <testcase name="SocketIOService getNsp() should call builder.onConnection" time="0.0000" classname="should call builder.onConnection">
    </testcase>
    <testcase name="SocketIOService getNsp() should call socket.on when socket is disconnected" time="0.0000" classname="should call socket.on when socket is disconnected">
    </testcase>
    <testcase name="SocketIOService getNsp() should call builder.onDisconnect" time="0.0000" classname="should call builder.onDisconnect">
    </testcase>
  </testsuite>
  <testsuite name="SocketIOModule" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/SocketIOModule.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="$afterListen()" timestamp="2020-10-09T18:19:56" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/SocketIOModule.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="with http server" timestamp="2020-10-09T18:19:56" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/SocketIOModule.spec.ts" time="0.0020" failures="0">
    <testcase name="SocketIOModule $afterListen() with http server should call attach method" time="0.0020" classname="should call attach method">
    </testcase>
  </testsuite>
  <testsuite name="with https server" timestamp="2020-10-09T18:19:57" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/src/SocketIOModule.spec.ts" time="0.0010" failures="0">
    <testcase name="SocketIOModule $afterListen() with https server should call attach method" time="0.0010" classname="should call attach method">
    </testcase>
  </testsuite>
  <testsuite name="SocketIO" timestamp="2020-10-09T18:19:57" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/socketio/test/socketio.spec.ts" time="0.0080" failures="0">
    <testcase name="SocketIO should render index page" time="0.0080" classname="should render index page">
    </testcase>
  </testsuite>
  <testsuite name="cssMiddleware" timestamp="2020-10-09T18:19:57" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/swagger/src/middlewares/cssMiddleware.spec.ts" time="0.0040" failures="0">
    <testcase name="cssMiddleware should create a middleware" time="0.0040" classname="should create a middleware">
    </testcase>
  </testsuite>
  <testsuite name="indexMiddleware and redirect" timestamp="2020-10-09T18:19:57" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/swagger/src/middlewares/indexMiddleware.spec.ts" time="0.0050" failures="0">
    <testcase name="indexMiddleware and redirect should create a middleware" time="0.0050" classname="should create a middleware">
    </testcase>
  </testsuite>
  <testsuite name="jsMiddleware" timestamp="2020-10-09T18:19:57" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/swagger/src/middlewares/jsMiddleware.spec.ts" time="0.0050" failures="0">
    <testcase name="jsMiddleware should create a middleware" time="0.0050" classname="should create a middleware">
    </testcase>
  </testsuite>
  <testsuite name="redirectMiddleware and redirect" timestamp="2020-10-09T18:19:57" tests="2" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/swagger/src/middlewares/redirectMiddleware.spec.ts" time="0.0070" failures="0">
    <testcase name="redirectMiddleware and redirect should create a middleware" time="0.0040" classname="should create a middleware">
    </testcase>
    <testcase name="redirectMiddleware and redirect should create a middleware and call next" time="0.0030" classname="should create a middleware and call next">
    </testcase>
  </testsuite>
  <testsuite name="SwaggerService" timestamp="2020-10-09T18:19:57" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/swagger/src/services/SwaggerService.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="getDefaultSpec()" timestamp="2020-10-09T18:19:57" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/swagger/src/services/SwaggerService.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="when specPath is given" timestamp="2020-10-09T18:19:57" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/swagger/src/services/SwaggerService.spec.ts" time="0.0030" failures="0">
    <testcase name="SwaggerService getDefaultSpec() when specPath is given should return default spec" time="0.0030" classname="should return default spec">
    </testcase>
  </testsuite>
  <testsuite name="when spec is given with produces fields" timestamp="2020-10-09T18:19:57" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/swagger/src/services/SwaggerService.spec.ts" time="0.0000" failures="0">
    <testcase name="SwaggerService getDefaultSpec() when spec is given with produces fields should return default spec" time="0.0000" classname="should return default spec">
    </testcase>
  </testsuite>
  <testsuite name="when nothing is given" timestamp="2020-10-09T18:19:57" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/swagger/src/services/SwaggerService.spec.ts" time="0.0000" failures="0">
    <testcase name="SwaggerService getDefaultSpec() when nothing is given should return default spec" time="0.0000" classname="should return default spec">
    </testcase>
  </testsuite>
  <testsuite name="when some info is given" timestamp="2020-10-09T18:19:57" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/swagger/src/services/SwaggerService.spec.ts" time="0.0000" failures="0">
    <testcase name="SwaggerService getDefaultSpec() when some info is given should return default spec" time="0.0000" classname="should return default spec">
    </testcase>
  </testsuite>
  <testsuite name="readSpecPath" timestamp="2020-10-09T18:19:57" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/swagger/src/services/SwaggerService.spec.ts" time="0.0000" failures="0">
    <testcase name="SwaggerService readSpecPath should return an empty object" time="0.0000" classname="should return an empty object">
    </testcase>
  </testsuite>
  <testsuite name="SwaggerModule" timestamp="2020-10-09T18:19:57" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/swagger/src/SwaggerModule.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="$beforeRoutesInit" timestamp="2020-10-09T18:19:57" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/swagger/src/SwaggerModule.spec.ts" time="0.0010" failures="0">
    <testcase name="SwaggerModule $beforeRoutesInit should add middlewares" time="0.0010" classname="should add middlewares">
    </testcase>
  </testsuite>
  <testsuite name="$onRoutesInit" timestamp="2020-10-09T18:19:57" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/swagger/src/SwaggerModule.spec.ts" time="0.0010" failures="0">
    <testcase name="SwaggerModule $onRoutesInit should write file" time="0.0010" classname="should write file">
    </testcase>
  </testsuite>
  <testsuite name="$onReady" timestamp="2020-10-09T18:19:57" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/swagger/src/SwaggerModule.spec.ts" time="0.0010" failures="0">
    <testcase name="SwaggerModule $onReady should display the right log" time="0.0010" classname="should display the right log">
    </testcase>
  </testsuite>
  <testsuite name="parseSwaggerPath()" timestamp="2020-10-09T18:19:57" tests="6" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/swagger/src/utils/getReducers.spec.ts" time="0.0010" failures="0">
    <testcase name="parseSwaggerPath() should return params and path(1)" time="0.0000" classname="should return params and path(1)">
    </testcase>
    <testcase name="parseSwaggerPath() should return params and path(2)" time="0.0010" classname="should return params and path(2)">
    </testcase>
    <testcase name="parseSwaggerPath() should return params and path(3)" time="0.0000" classname="should return params and path(3)">
    </testcase>
    <testcase name="parseSwaggerPath() should return params and path(4)" time="0.0000" classname="should return params and path(4)">
    </testcase>
    <testcase name="parseSwaggerPath() should return params and path /file/:filename.json" time="0.0000" classname="should return params and path /file/:filename.json">
    </testcase>
    <testcase name="parseSwaggerPath() should return params and path /category/:category([a-zA-Z/_-]+).json" time="0.0000" classname="should return params and path /category/:category([a-zA-Z/_-]+).json">
    </testcase>
  </testsuite>
  <testsuite name="Swagger errors params" timestamp="2020-10-09T18:19:57" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/swagger/test/swagger.errors.spec.ts" time="0.0070" failures="0">
    <testcase name="Swagger errors params should generate swagger" time="0.0070" classname="should generate swagger">
    </testcase>
  </testsuite>
  <testsuite name="Swagger integration" timestamp="2020-10-09T18:19:57" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/swagger/test/swagger.integration.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="swagger 2" timestamp="2020-10-09T18:19:57" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/swagger/test/swagger.integration.spec.ts" time="0.0100" failures="0">
    <testcase name="Swagger integration swagger 2 should swagger spec" time="0.0100" classname="should swagger spec">
    </testcase>
  </testsuite>
  <testsuite name="OpenSpec3" timestamp="2020-10-09T18:19:57" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/swagger/test/swagger.integration.spec.ts" time="0.0080" failures="0">
    <testcase name="Swagger integration OpenSpec3 should swagger spec" time="0.0080" classname="should swagger spec">
    </testcase>
  </testsuite>
  <testsuite name="Swagger query params" timestamp="2020-10-09T18:19:57" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/swagger/test/swagger.query.spec.ts" time="0.0130" failures="0">
    <testcase name="Swagger query params should generate swagger" time="0.0130" classname="should generate swagger">
    </testcase>
  </testsuite>
  <testsuite name="TypeORMService" timestamp="2020-10-09T18:19:57" tests="0" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/typeorm/src/services/TypeORMService.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="createConnection()" timestamp="2020-10-09T18:19:57" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/typeorm/src/services/TypeORMService.spec.ts" time="0.0010" failures="0">
    <testcase name="TypeORMService createConnection() should create connection and close connection" time="0.0010" classname="should create connection and close connection">
    </testcase>
  </testsuite>
  <testsuite name="TypeORM integration" timestamp="2020-10-09T18:19:57" tests="1" file="/Users/romainlenzotti/workspace/ts-projects/ts-express-decorators/packages/typeorm/test/integration.spec.ts" time="0.0130" failures="0">
    <testcase name="TypeORM integration should return repository" time="0.0130" classname="should return repository">
    </testcase>
  </testsuite>
</testsuites>